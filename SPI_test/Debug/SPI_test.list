
SPI_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000084c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080009d4  080009d4  000019d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009e0  080009e0  000019f0  2**0
                  CONTENTS
  4 .ARM          00000008  080009e0  080009e0  000019e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080009e8  080009f0  000019f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009e8  080009e8  000019e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009ec  080009ec  000019ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000019f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000019f0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014f2  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004a9  00000000  00000000  00002f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  000033c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000011b  00000000  00000000  00003548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000024c2  00000000  00000000  00003663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a9e  00000000  00000000  00005b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000972b  00000000  00000000  000075c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010cee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005a8  00000000  00000000  00010d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  000112dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080009bc 	.word	0x080009bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080009bc 	.word	0x080009bc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001de:	4b0e      	ldr	r3, [pc, #56]	@ (8000218 <SPI2_GPIOInits+0x40>)
 80001e0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001e6:	2305      	movs	r3, #5
 80001e8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001ea:	2300      	movs	r3, #0
 80001ec:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001ee:	2300      	movs	r3, #0
 80001f0:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001f2:	2302      	movs	r3, #2
 80001f4:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80001f6:	230d      	movs	r3, #13
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f90b 	bl	8000418 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000202:	230f      	movs	r3, #15
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f905 	bl	8000418 <GPIO_Init>
	//NSS
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	//GPIO_Init(&SPIPins);


}
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40020400 	.word	0x40020400

0800021c <SPI2_Inits>:

void SPI2_Inits(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000222:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <SPI2_Inits+0x38>)
 8000224:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000226:	2301      	movs	r3, #1
 8000228:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800022a:	2301      	movs	r3, #1
 800022c:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;//generates sclk of 8MHz
 800022e:	2300      	movs	r3, #0
 8000230:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000232:	2300      	movs	r3, #0
 8000234:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_HIGH;
 8000236:	2301      	movs	r3, #1
 8000238:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800023a:	2300      	movs	r3, #0
 800023c:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN; //software slave management enabled for NSS pin
 800023e:	2301      	movs	r3, #1
 8000240:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 8000242:	463b      	mov	r3, r7
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fabb 	bl	80007c0 <SPI_Init>
}
 800024a:	bf00      	nop
 800024c:	3720      	adds	r7, #32
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40003800 	.word	0x40003800

08000258 <main>:

int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world";
 800025e:	4a14      	ldr	r2, [pc, #80]	@ (80002b0 <main+0x58>)
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	ca07      	ldmia	r2, {r0, r1, r2}
 8000264:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8000268:	f7ff ffb6 	bl	80001d8 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 800026c:	f7ff ffd6 	bl	800021c <SPI2_Inits>

	//this makes NSS signal internally high and avoids MODF error
	SPI_SSIConfig(SPI2,ENABLE);
 8000270:	2101      	movs	r1, #1
 8000272:	4810      	ldr	r0, [pc, #64]	@ (80002b4 <main+0x5c>)
 8000274:	f000 fb61 	bl	800093a <SPI_SSIConfig>

	//enable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,ENABLE);
 8000278:	2101      	movs	r1, #1
 800027a:	480e      	ldr	r0, [pc, #56]	@ (80002b4 <main+0x5c>)
 800027c:	f000 fb41 	bl	8000902 <SPI_PeripheralControl>

	//to send data
	SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	4618      	mov	r0, r3
 8000284:	f7ff ffa0 	bl	80001c8 <strlen>
 8000288:	4602      	mov	r2, r0
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4619      	mov	r1, r3
 800028e:	4809      	ldr	r0, [pc, #36]	@ (80002b4 <main+0x5c>)
 8000290:	f000 fb00 	bl	8000894 <SPI_SendData>

	//lets confirm SPI is not busy
	while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 8000294:	bf00      	nop
 8000296:	2180      	movs	r1, #128	@ 0x80
 8000298:	4806      	ldr	r0, [pc, #24]	@ (80002b4 <main+0x5c>)
 800029a:	f000 fae7 	bl	800086c <SPI_GetFlagStatus>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d1f8      	bne.n	8000296 <main+0x3e>

	//Disable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,DISABLE);
 80002a4:	2100      	movs	r1, #0
 80002a6:	4803      	ldr	r0, [pc, #12]	@ (80002b4 <main+0x5c>)
 80002a8:	f000 fb2b 	bl	8000902 <SPI_PeripheralControl>

	while(1);
 80002ac:	bf00      	nop
 80002ae:	e7fd      	b.n	80002ac <main+0x54>
 80002b0:	080009d4 	.word	0x080009d4
 80002b4:	40003800 	.word	0x40003800

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	@ (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	@ (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	@ (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	@ (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 fb45 	bl	8000974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ffb5 	bl	8000258 <main>

080002ee <LoopForever>:

LoopForever:
  b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	080009f0 	.word	0x080009f0
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	2000001c 	.word	0x2000001c

08000308 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC_IRQHandler>
	...

0800030c <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000318:	78fb      	ldrb	r3, [r7, #3]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d161      	bne.n	80003e2 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a33      	ldr	r2, [pc, #204]	@ (80003f0 <GPIO_PeriClockControl+0xe4>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000326:	4b33      	ldr	r3, [pc, #204]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032a:	4a32      	ldr	r2, [pc, #200]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6313      	str	r3, [r2, #48]	@ 0x30
	else
	{
		//TODO
	}

}
 8000332:	e056      	b.n	80003e2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a30      	ldr	r2, [pc, #192]	@ (80003f8 <GPIO_PeriClockControl+0xec>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800033c:	4b2d      	ldr	r3, [pc, #180]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000340:	4a2c      	ldr	r2, [pc, #176]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 8000342:	f043 0302 	orr.w	r3, r3, #2
 8000346:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000348:	e04b      	b.n	80003e2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a2b      	ldr	r2, [pc, #172]	@ (80003fc <GPIO_PeriClockControl+0xf0>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000352:	4b28      	ldr	r3, [pc, #160]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000356:	4a27      	ldr	r2, [pc, #156]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 8000358:	f043 0304 	orr.w	r3, r3, #4
 800035c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035e:	e040      	b.n	80003e2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a27      	ldr	r2, [pc, #156]	@ (8000400 <GPIO_PeriClockControl+0xf4>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d106      	bne.n	8000376 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000368:	4b22      	ldr	r3, [pc, #136]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036c:	4a21      	ldr	r2, [pc, #132]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000374:	e035      	b.n	80003e2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a22      	ldr	r2, [pc, #136]	@ (8000404 <GPIO_PeriClockControl+0xf8>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800037e:	4b1d      	ldr	r3, [pc, #116]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000382:	4a1c      	ldr	r2, [pc, #112]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 8000384:	f043 0310 	orr.w	r3, r3, #16
 8000388:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800038a:	e02a      	b.n	80003e2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a1e      	ldr	r2, [pc, #120]	@ (8000408 <GPIO_PeriClockControl+0xfc>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000394:	4b17      	ldr	r3, [pc, #92]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000398:	4a16      	ldr	r2, [pc, #88]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 800039a:	f043 0320 	orr.w	r3, r3, #32
 800039e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a0:	e01f      	b.n	80003e2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a19      	ldr	r2, [pc, #100]	@ (800040c <GPIO_PeriClockControl+0x100>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003aa:	4b12      	ldr	r3, [pc, #72]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ae:	4a11      	ldr	r2, [pc, #68]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 80003b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003b4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b6:	e014      	b.n	80003e2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a15      	ldr	r2, [pc, #84]	@ (8000410 <GPIO_PeriClockControl+0x104>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003c0:	4b0c      	ldr	r3, [pc, #48]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c4:	4a0b      	ldr	r2, [pc, #44]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 80003c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003cc:	e009      	b.n	80003e2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a10      	ldr	r2, [pc, #64]	@ (8000414 <GPIO_PeriClockControl+0x108>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d105      	bne.n	80003e2 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80003d6:	4b07      	ldr	r3, [pc, #28]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003da:	4a06      	ldr	r2, [pc, #24]	@ (80003f4 <GPIO_PeriClockControl+0xe8>)
 80003dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003e0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40020000 	.word	0x40020000
 80003f4:	40023800 	.word	0x40023800
 80003f8:	40020400 	.word	0x40020400
 80003fc:	40020800 	.word	0x40020800
 8000400:	40020c00 	.word	0x40020c00
 8000404:	40021000 	.word	0x40021000
 8000408:	40021400 	.word	0x40021400
 800040c:	40021800 	.word	0x40021800
 8000410:	40021c00 	.word	0x40021c00
 8000414:	40022000 	.word	0x40022000

08000418 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2101      	movs	r1, #1
 800042a:	4618      	mov	r0, r3
 800042c:	f7ff ff6e 	bl	800030c <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	795b      	ldrb	r3, [r3, #5]
 8000434:	2b03      	cmp	r3, #3
 8000436:	d820      	bhi.n	800047a <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	795b      	ldrb	r3, [r3, #5]
 800043c:	461a      	mov	r2, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	fa02 f303 	lsl.w	r3, r2, r3
 8000448:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	791b      	ldrb	r3, [r3, #4]
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	2103      	movs	r1, #3
 8000458:	fa01 f303 	lsl.w	r3, r1, r3
 800045c:	43db      	mvns	r3, r3
 800045e:	4619      	mov	r1, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	400a      	ands	r2, r1
 8000466:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	6819      	ldr	r1, [r3, #0]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	697a      	ldr	r2, [r7, #20]
 8000474:	430a      	orrs	r2, r1
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	e0cb      	b.n	8000612 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	795b      	ldrb	r3, [r3, #5]
 800047e:	2b04      	cmp	r3, #4
 8000480:	d117      	bne.n	80004b2 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000482:	4b4b      	ldr	r3, [pc, #300]	@ (80005b0 <GPIO_Init+0x198>)
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	7912      	ldrb	r2, [r2, #4]
 800048a:	4611      	mov	r1, r2
 800048c:	2201      	movs	r2, #1
 800048e:	408a      	lsls	r2, r1
 8000490:	4611      	mov	r1, r2
 8000492:	4a47      	ldr	r2, [pc, #284]	@ (80005b0 <GPIO_Init+0x198>)
 8000494:	430b      	orrs	r3, r1
 8000496:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000498:	4b45      	ldr	r3, [pc, #276]	@ (80005b0 <GPIO_Init+0x198>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	7912      	ldrb	r2, [r2, #4]
 80004a0:	4611      	mov	r1, r2
 80004a2:	2201      	movs	r2, #1
 80004a4:	408a      	lsls	r2, r1
 80004a6:	43d2      	mvns	r2, r2
 80004a8:	4611      	mov	r1, r2
 80004aa:	4a41      	ldr	r2, [pc, #260]	@ (80005b0 <GPIO_Init+0x198>)
 80004ac:	400b      	ands	r3, r1
 80004ae:	6093      	str	r3, [r2, #8]
 80004b0:	e035      	b.n	800051e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	795b      	ldrb	r3, [r3, #5]
 80004b6:	2b05      	cmp	r3, #5
 80004b8:	d117      	bne.n	80004ea <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ba:	4b3d      	ldr	r3, [pc, #244]	@ (80005b0 <GPIO_Init+0x198>)
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	7912      	ldrb	r2, [r2, #4]
 80004c2:	4611      	mov	r1, r2
 80004c4:	2201      	movs	r2, #1
 80004c6:	408a      	lsls	r2, r1
 80004c8:	4611      	mov	r1, r2
 80004ca:	4a39      	ldr	r2, [pc, #228]	@ (80005b0 <GPIO_Init+0x198>)
 80004cc:	430b      	orrs	r3, r1
 80004ce:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d0:	4b37      	ldr	r3, [pc, #220]	@ (80005b0 <GPIO_Init+0x198>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	7912      	ldrb	r2, [r2, #4]
 80004d8:	4611      	mov	r1, r2
 80004da:	2201      	movs	r2, #1
 80004dc:	408a      	lsls	r2, r1
 80004de:	43d2      	mvns	r2, r2
 80004e0:	4611      	mov	r1, r2
 80004e2:	4a33      	ldr	r2, [pc, #204]	@ (80005b0 <GPIO_Init+0x198>)
 80004e4:	400b      	ands	r3, r1
 80004e6:	60d3      	str	r3, [r2, #12]
 80004e8:	e019      	b.n	800051e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	795b      	ldrb	r3, [r3, #5]
 80004ee:	2b06      	cmp	r3, #6
 80004f0:	d115      	bne.n	800051e <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f2:	4b2f      	ldr	r3, [pc, #188]	@ (80005b0 <GPIO_Init+0x198>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	7912      	ldrb	r2, [r2, #4]
 80004fa:	4611      	mov	r1, r2
 80004fc:	2201      	movs	r2, #1
 80004fe:	408a      	lsls	r2, r1
 8000500:	4611      	mov	r1, r2
 8000502:	4a2b      	ldr	r2, [pc, #172]	@ (80005b0 <GPIO_Init+0x198>)
 8000504:	430b      	orrs	r3, r1
 8000506:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000508:	4b29      	ldr	r3, [pc, #164]	@ (80005b0 <GPIO_Init+0x198>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	7912      	ldrb	r2, [r2, #4]
 8000510:	4611      	mov	r1, r2
 8000512:	2201      	movs	r2, #1
 8000514:	408a      	lsls	r2, r1
 8000516:	4611      	mov	r1, r2
 8000518:	4a25      	ldr	r2, [pc, #148]	@ (80005b0 <GPIO_Init+0x198>)
 800051a:	430b      	orrs	r3, r1
 800051c:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	089b      	lsrs	r3, r3, #2
 8000524:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	791b      	ldrb	r3, [r3, #4]
 800052a:	f003 0303 	and.w	r3, r3, #3
 800052e:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a1f      	ldr	r2, [pc, #124]	@ (80005b4 <GPIO_Init+0x19c>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d04e      	beq.n	80005d8 <GPIO_Init+0x1c0>
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a1e      	ldr	r2, [pc, #120]	@ (80005b8 <GPIO_Init+0x1a0>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d032      	beq.n	80005aa <GPIO_Init+0x192>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a1c      	ldr	r2, [pc, #112]	@ (80005bc <GPIO_Init+0x1a4>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d02b      	beq.n	80005a6 <GPIO_Init+0x18e>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a1b      	ldr	r2, [pc, #108]	@ (80005c0 <GPIO_Init+0x1a8>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d024      	beq.n	80005a2 <GPIO_Init+0x18a>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a19      	ldr	r2, [pc, #100]	@ (80005c4 <GPIO_Init+0x1ac>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d01d      	beq.n	800059e <GPIO_Init+0x186>
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a18      	ldr	r2, [pc, #96]	@ (80005c8 <GPIO_Init+0x1b0>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d016      	beq.n	800059a <GPIO_Init+0x182>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a16      	ldr	r2, [pc, #88]	@ (80005cc <GPIO_Init+0x1b4>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d00f      	beq.n	8000596 <GPIO_Init+0x17e>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a15      	ldr	r2, [pc, #84]	@ (80005d0 <GPIO_Init+0x1b8>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d008      	beq.n	8000592 <GPIO_Init+0x17a>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a13      	ldr	r2, [pc, #76]	@ (80005d4 <GPIO_Init+0x1bc>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d101      	bne.n	800058e <GPIO_Init+0x176>
 800058a:	2308      	movs	r3, #8
 800058c:	e025      	b.n	80005da <GPIO_Init+0x1c2>
 800058e:	2300      	movs	r3, #0
 8000590:	e023      	b.n	80005da <GPIO_Init+0x1c2>
 8000592:	2307      	movs	r3, #7
 8000594:	e021      	b.n	80005da <GPIO_Init+0x1c2>
 8000596:	2306      	movs	r3, #6
 8000598:	e01f      	b.n	80005da <GPIO_Init+0x1c2>
 800059a:	2305      	movs	r3, #5
 800059c:	e01d      	b.n	80005da <GPIO_Init+0x1c2>
 800059e:	2304      	movs	r3, #4
 80005a0:	e01b      	b.n	80005da <GPIO_Init+0x1c2>
 80005a2:	2303      	movs	r3, #3
 80005a4:	e019      	b.n	80005da <GPIO_Init+0x1c2>
 80005a6:	2302      	movs	r3, #2
 80005a8:	e017      	b.n	80005da <GPIO_Init+0x1c2>
 80005aa:	2301      	movs	r3, #1
 80005ac:	e015      	b.n	80005da <GPIO_Init+0x1c2>
 80005ae:	bf00      	nop
 80005b0:	40013c00 	.word	0x40013c00
 80005b4:	40020000 	.word	0x40020000
 80005b8:	40020400 	.word	0x40020400
 80005bc:	40020800 	.word	0x40020800
 80005c0:	40020c00 	.word	0x40020c00
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40021400 	.word	0x40021400
 80005cc:	40021800 	.word	0x40021800
 80005d0:	40021c00 	.word	0x40021c00
 80005d4:	40022000 	.word	0x40022000
 80005d8:	2300      	movs	r3, #0
 80005da:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80005dc:	4b59      	ldr	r3, [pc, #356]	@ (8000744 <GPIO_Init+0x32c>)
 80005de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005e0:	4a58      	ldr	r2, [pc, #352]	@ (8000744 <GPIO_Init+0x32c>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e6:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80005e8:	7c7a      	ldrb	r2, [r7, #17]
 80005ea:	7cbb      	ldrb	r3, [r7, #18]
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	fa02 f103 	lsl.w	r1, r2, r3
 80005f2:	4a55      	ldr	r2, [pc, #340]	@ (8000748 <GPIO_Init+0x330>)
 80005f4:	7cfb      	ldrb	r3, [r7, #19]
 80005f6:	3302      	adds	r3, #2
 80005f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005fc:	4b53      	ldr	r3, [pc, #332]	@ (800074c <GPIO_Init+0x334>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	7912      	ldrb	r2, [r2, #4]
 8000604:	4611      	mov	r1, r2
 8000606:	2201      	movs	r2, #1
 8000608:	408a      	lsls	r2, r1
 800060a:	4611      	mov	r1, r2
 800060c:	4a4f      	ldr	r2, [pc, #316]	@ (800074c <GPIO_Init+0x334>)
 800060e:	430b      	orrs	r3, r1
 8000610:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	799b      	ldrb	r3, [r3, #6]
 8000616:	461a      	mov	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	689a      	ldr	r2, [r3, #8]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	2103      	movs	r1, #3
 8000632:	fa01 f303 	lsl.w	r3, r1, r3
 8000636:	43db      	mvns	r3, r3
 8000638:	4619      	mov	r1, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	400a      	ands	r2, r1
 8000640:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	6899      	ldr	r1, [r3, #8]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	430a      	orrs	r2, r1
 8000650:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	79db      	ldrb	r3, [r3, #7]
 8000656:	461a      	mov	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	791b      	ldrb	r3, [r3, #4]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	68da      	ldr	r2, [r3, #12]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	2103      	movs	r1, #3
 8000672:	fa01 f303 	lsl.w	r3, r1, r3
 8000676:	43db      	mvns	r3, r3
 8000678:	4619      	mov	r1, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	400a      	ands	r2, r1
 8000680:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	68d9      	ldr	r1, [r3, #12]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	430a      	orrs	r2, r1
 8000690:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	7a1b      	ldrb	r3, [r3, #8]
 8000696:	461a      	mov	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	791b      	ldrb	r3, [r3, #4]
 800069c:	fa02 f303 	lsl.w	r3, r2, r3
 80006a0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	685a      	ldr	r2, [r3, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	4619      	mov	r1, r3
 80006ae:	2301      	movs	r3, #1
 80006b0:	408b      	lsls	r3, r1
 80006b2:	43db      	mvns	r3, r3
 80006b4:	4619      	mov	r1, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	400a      	ands	r2, r1
 80006bc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6859      	ldr	r1, [r3, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	430a      	orrs	r2, r1
 80006cc:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	795b      	ldrb	r3, [r3, #5]
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d131      	bne.n	800073a <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	791b      	ldrb	r3, [r3, #4]
 80006da:	08db      	lsrs	r3, r3, #3
 80006dc:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	791b      	ldrb	r3, [r3, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	7c3a      	ldrb	r2, [r7, #16]
 80006ee:	3208      	adds	r2, #8
 80006f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	220f      	movs	r2, #15
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	43db      	mvns	r3, r3
 8000700:	4618      	mov	r0, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	7c3a      	ldrb	r2, [r7, #16]
 8000708:	4001      	ands	r1, r0
 800070a:	3208      	adds	r2, #8
 800070c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	7c3a      	ldrb	r2, [r7, #16]
 8000716:	3208      	adds	r2, #8
 8000718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7a5b      	ldrb	r3, [r3, #9]
 8000720:	461a      	mov	r2, r3
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	4618      	mov	r0, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	7c3a      	ldrb	r2, [r7, #16]
 8000732:	4301      	orrs	r1, r0
 8000734:	3208      	adds	r2, #8
 8000736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800073a:	bf00      	nop
 800073c:	3718      	adds	r7, #24
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40013800 	.word	0x40013800
 800074c:	40013c00 	.word	0x40013c00

08000750 <SPI_PeriClockControl>:
 *
 * @Note              -

 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d11f      	bne.n	80007a2 <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a12      	ldr	r2, [pc, #72]	@ (80007b0 <SPI_PeriClockControl+0x60>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d106      	bne.n	8000778 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <SPI_PeriClockControl+0x64>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	4a11      	ldr	r2, [pc, #68]	@ (80007b4 <SPI_PeriClockControl+0x64>)
 8000770:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000774:	6453      	str	r3, [r2, #68]	@ 0x44
	}
	else
	{
		//TODO
	}
}
 8000776:	e014      	b.n	80007a2 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a0f      	ldr	r2, [pc, #60]	@ (80007b8 <SPI_PeriClockControl+0x68>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d106      	bne.n	800078e <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <SPI_PeriClockControl+0x64>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	4a0b      	ldr	r2, [pc, #44]	@ (80007b4 <SPI_PeriClockControl+0x64>)
 8000786:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800078c:	e009      	b.n	80007a2 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a0a      	ldr	r2, [pc, #40]	@ (80007bc <SPI_PeriClockControl+0x6c>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d105      	bne.n	80007a2 <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 8000796:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <SPI_PeriClockControl+0x64>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <SPI_PeriClockControl+0x64>)
 800079c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007a0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40013000 	.word	0x40013000
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40003800 	.word	0x40003800
 80007bc:	40003c00 	.word	0x40003c00

080007c0 <SPI_Init>:
 *
 * @Note              -

 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2101      	movs	r1, #1
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffbe 	bl	8000750 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	795b      	ldrb	r3, [r3, #5]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d104      	bne.n	80007f6 <SPI_Init+0x36>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	e014      	b.n	8000820 <SPI_Init+0x60>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	795b      	ldrb	r3, [r3, #5]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d104      	bne.n	8000808 <SPI_Init+0x48>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	e00b      	b.n	8000820 <SPI_Init+0x60>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	795b      	ldrb	r3, [r3, #5]
 800080c:	2b03      	cmp	r3, #3
 800080e:	d107      	bne.n	8000820 <SPI_Init+0x60>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000816:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800081e:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	799b      	ldrb	r3, [r3, #6]
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	4313      	orrs	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	79db      	ldrb	r3, [r3, #7]
 8000830:	02db      	lsls	r3, r3, #11
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	4313      	orrs	r3, r2
 8000836:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	7a1b      	ldrb	r3, [r3, #8]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	4313      	orrs	r3, r2
 8000842:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7a5b      	ldrb	r3, [r3, #9]
 8000848:	461a      	mov	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	4313      	orrs	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7a9b      	ldrb	r3, [r3, #10]
 8000854:	025b      	lsls	r3, r3, #9
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	4313      	orrs	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	601a      	str	r2, [r3, #0]

}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <SPI_GetFlagStatus>:
{
 //todo
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	689a      	ldr	r2, [r3, #8]
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	4013      	ands	r3, r2
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000882:	2301      	movs	r3, #1
 8000884:	e000      	b.n	8000888 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <SPI_SendData>:
 *
 * @Note              - This is blocking call

 */
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80008a0:	e027      	b.n	80008f2 <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );
 80008a2:	bf00      	nop
 80008a4:	2102      	movs	r1, #2
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f7ff ffe0 	bl	800086c <SPI_GetFlagStatus>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0f8      	beq.n	80008a4 <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d00e      	beq.n	80008dc <SPI_SendData+0x48>
		{
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR =   *((uint16_t*)pTxBuffer);
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	60da      	str	r2, [r3, #12]
			Len--;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	607b      	str	r3, [r7, #4]
			Len--;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	3301      	adds	r3, #1
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	e00a      	b.n	80008f2 <SPI_SendData+0x5e>
		}else
		{
			//8 bit DFF
			pSPIx->DR =   *pTxBuffer;
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	60da      	str	r2, [r3, #12]
			Len--;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3b01      	subs	r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	3301      	adds	r3, #1
 80008f0:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1d4      	bne.n	80008a2 <SPI_SendData+0xe>
		}
	}

}
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <SPI_PeripheralControl>:
 *
 * @Note              -

 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
 800090a:	460b      	mov	r3, r1
 800090c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800090e:	78fb      	ldrb	r3, [r7, #3]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d106      	bne.n	8000922 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8000920:	e005      	b.n	800092e <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <SPI_SSIConfig>:
 *
 * @Note              -

 */
void  SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	460b      	mov	r3, r1
 8000944:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000946:	78fb      	ldrb	r3, [r7, #3]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d106      	bne.n	800095a <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
	}


}
 8000958:	e005      	b.n	8000966 <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	601a      	str	r2, [r3, #0]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <__libc_init_array>:
 8000974:	b570      	push	{r4, r5, r6, lr}
 8000976:	4d0d      	ldr	r5, [pc, #52]	@ (80009ac <__libc_init_array+0x38>)
 8000978:	4c0d      	ldr	r4, [pc, #52]	@ (80009b0 <__libc_init_array+0x3c>)
 800097a:	1b64      	subs	r4, r4, r5
 800097c:	10a4      	asrs	r4, r4, #2
 800097e:	2600      	movs	r6, #0
 8000980:	42a6      	cmp	r6, r4
 8000982:	d109      	bne.n	8000998 <__libc_init_array+0x24>
 8000984:	4d0b      	ldr	r5, [pc, #44]	@ (80009b4 <__libc_init_array+0x40>)
 8000986:	4c0c      	ldr	r4, [pc, #48]	@ (80009b8 <__libc_init_array+0x44>)
 8000988:	f000 f818 	bl	80009bc <_init>
 800098c:	1b64      	subs	r4, r4, r5
 800098e:	10a4      	asrs	r4, r4, #2
 8000990:	2600      	movs	r6, #0
 8000992:	42a6      	cmp	r6, r4
 8000994:	d105      	bne.n	80009a2 <__libc_init_array+0x2e>
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f855 3b04 	ldr.w	r3, [r5], #4
 800099c:	4798      	blx	r3
 800099e:	3601      	adds	r6, #1
 80009a0:	e7ee      	b.n	8000980 <__libc_init_array+0xc>
 80009a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009a6:	4798      	blx	r3
 80009a8:	3601      	adds	r6, #1
 80009aa:	e7f2      	b.n	8000992 <__libc_init_array+0x1e>
 80009ac:	080009e8 	.word	0x080009e8
 80009b0:	080009e8 	.word	0x080009e8
 80009b4:	080009e8 	.word	0x080009e8
 80009b8:	080009ec 	.word	0x080009ec

080009bc <_init>:
 80009bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009be:	bf00      	nop
 80009c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009c2:	bc08      	pop	{r3}
 80009c4:	469e      	mov	lr, r3
 80009c6:	4770      	bx	lr

080009c8 <_fini>:
 80009c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ca:	bf00      	nop
 80009cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ce:	bc08      	pop	{r3}
 80009d0:	469e      	mov	lr, r3
 80009d2:	4770      	bx	lr
