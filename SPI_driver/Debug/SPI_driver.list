
SPI_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fb4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002144  08002144  00003144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002188  08002188  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002188  08002188  00003188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002190  08002190  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002190  08002190  00003190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002194  08002194  00003194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002198  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000405c  2**0
                  CONTENTS
 10 .bss          00000388  2000005c  2000005c  0000405c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003e4  200003e4  0000405c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001e01  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000086b  00000000  00000000  00005e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000270  00000000  00000000  000066f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001c1  00000000  00000000  00006968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003879  00000000  00000000  00006b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002cf3  00000000  00000000  0000a3a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cde8  00000000  00000000  0000d095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00019e7d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000010ac  00000000  00000000  00019ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  0001af6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800212c 	.word	0x0800212c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800212c 	.word	0x0800212c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <GPIO_PeriClockControl>:
 * @retval None.
 * @note   This function must be called before configuring the GPIO registers.
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	460b      	mov	r3, r1
 800027a:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 800027c:	78fb      	ldrb	r3, [r7, #3]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d162      	bne.n	8000348 <GPIO_PeriClockControl+0xd8>
    {
    	if(pGPIOx == GPIOA)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4a64      	ldr	r2, [pc, #400]	@ (8000418 <GPIO_PeriClockControl+0x1a8>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d106      	bne.n	8000298 <GPIO_PeriClockControl+0x28>
    	{
    		GPIOA_PCLK_EN();
 800028a:	4b64      	ldr	r3, [pc, #400]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 800028c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028e:	4a63      	ldr	r2, [pc, #396]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6313      	str	r3, [r2, #48]	@ 0x30
        {
            GPIOI_PCLK_DI();
        }

    }
}
 8000296:	e0b9      	b.n	800040c <GPIO_PeriClockControl+0x19c>
    	}else if(pGPIOx == GPIOB)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4a61      	ldr	r2, [pc, #388]	@ (8000420 <GPIO_PeriClockControl+0x1b0>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d106      	bne.n	80002ae <GPIO_PeriClockControl+0x3e>
    		GPIOB_PCLK_EN();
 80002a0:	4b5e      	ldr	r3, [pc, #376]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80002a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a4:	4a5d      	ldr	r2, [pc, #372]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80002a6:	f043 0302 	orr.w	r3, r3, #2
 80002aa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ac:	e0ae      	b.n	800040c <GPIO_PeriClockControl+0x19c>
    	}else if(pGPIOx == GPIOC)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4a5c      	ldr	r2, [pc, #368]	@ (8000424 <GPIO_PeriClockControl+0x1b4>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d106      	bne.n	80002c4 <GPIO_PeriClockControl+0x54>
    		GPIOC_PCLK_EN();
 80002b6:	4b59      	ldr	r3, [pc, #356]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80002b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ba:	4a58      	ldr	r2, [pc, #352]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80002bc:	f043 0304 	orr.w	r3, r3, #4
 80002c0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002c2:	e0a3      	b.n	800040c <GPIO_PeriClockControl+0x19c>
    	}else if(pGPIOx == GPIOD)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a58      	ldr	r2, [pc, #352]	@ (8000428 <GPIO_PeriClockControl+0x1b8>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d106      	bne.n	80002da <GPIO_PeriClockControl+0x6a>
    		GPIOD_PCLK_EN();
 80002cc:	4b53      	ldr	r3, [pc, #332]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80002ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d0:	4a52      	ldr	r2, [pc, #328]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80002d2:	f043 0308 	orr.w	r3, r3, #8
 80002d6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002d8:	e098      	b.n	800040c <GPIO_PeriClockControl+0x19c>
    	}else if(pGPIOx == GPIOE)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4a53      	ldr	r2, [pc, #332]	@ (800042c <GPIO_PeriClockControl+0x1bc>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d106      	bne.n	80002f0 <GPIO_PeriClockControl+0x80>
    		GPIOE_PCLK_EN();
 80002e2:	4b4e      	ldr	r3, [pc, #312]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80002e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e6:	4a4d      	ldr	r2, [pc, #308]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80002e8:	f043 0310 	orr.w	r3, r3, #16
 80002ec:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ee:	e08d      	b.n	800040c <GPIO_PeriClockControl+0x19c>
    	}else if(pGPIOx == GPIOF)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a4f      	ldr	r2, [pc, #316]	@ (8000430 <GPIO_PeriClockControl+0x1c0>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d106      	bne.n	8000306 <GPIO_PeriClockControl+0x96>
    		GPIOF_PCLK_EN();
 80002f8:	4b48      	ldr	r3, [pc, #288]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80002fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fc:	4a47      	ldr	r2, [pc, #284]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80002fe:	f043 0320 	orr.w	r3, r3, #32
 8000302:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000304:	e082      	b.n	800040c <GPIO_PeriClockControl+0x19c>
    	}else if(pGPIOx == GPIOG)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a4a      	ldr	r2, [pc, #296]	@ (8000434 <GPIO_PeriClockControl+0x1c4>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d106      	bne.n	800031c <GPIO_PeriClockControl+0xac>
    		GPIOG_PCLK_EN();
 800030e:	4b43      	ldr	r3, [pc, #268]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 8000310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000312:	4a42      	ldr	r2, [pc, #264]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 8000314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000318:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800031a:	e077      	b.n	800040c <GPIO_PeriClockControl+0x19c>
    	}else if(pGPIOx == GPIOH)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a46      	ldr	r2, [pc, #280]	@ (8000438 <GPIO_PeriClockControl+0x1c8>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <GPIO_PeriClockControl+0xc2>
    		GPIOH_PCLK_EN();
 8000324:	4b3d      	ldr	r3, [pc, #244]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000328:	4a3c      	ldr	r2, [pc, #240]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 800032a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800032e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000330:	e06c      	b.n	800040c <GPIO_PeriClockControl+0x19c>
    	}else if(pGPIOx == GPIOI)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a41      	ldr	r2, [pc, #260]	@ (800043c <GPIO_PeriClockControl+0x1cc>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d168      	bne.n	800040c <GPIO_PeriClockControl+0x19c>
    		GPIOI_PCLK_EN();
 800033a:	4b38      	ldr	r3, [pc, #224]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033e:	4a37      	ldr	r2, [pc, #220]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 8000340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000344:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000346:	e061      	b.n	800040c <GPIO_PeriClockControl+0x19c>
        if(pGPIOx == GPIOA)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a33      	ldr	r2, [pc, #204]	@ (8000418 <GPIO_PeriClockControl+0x1a8>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d106      	bne.n	800035e <GPIO_PeriClockControl+0xee>
            GPIOA_PCLK_DI();
 8000350:	4b32      	ldr	r3, [pc, #200]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 8000352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000354:	4a31      	ldr	r2, [pc, #196]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 8000356:	f023 0301 	bic.w	r3, r3, #1
 800035a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035c:	e056      	b.n	800040c <GPIO_PeriClockControl+0x19c>
        }else if(pGPIOx == GPIOB)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a2f      	ldr	r2, [pc, #188]	@ (8000420 <GPIO_PeriClockControl+0x1b0>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d106      	bne.n	8000374 <GPIO_PeriClockControl+0x104>
            GPIOB_PCLK_DI();
 8000366:	4b2d      	ldr	r3, [pc, #180]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036a:	4a2c      	ldr	r2, [pc, #176]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 800036c:	f023 0302 	bic.w	r3, r3, #2
 8000370:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000372:	e04b      	b.n	800040c <GPIO_PeriClockControl+0x19c>
        }else if(pGPIOx == GPIOC)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a2b      	ldr	r2, [pc, #172]	@ (8000424 <GPIO_PeriClockControl+0x1b4>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d106      	bne.n	800038a <GPIO_PeriClockControl+0x11a>
            GPIOC_PCLK_DI();
 800037c:	4b27      	ldr	r3, [pc, #156]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000380:	4a26      	ldr	r2, [pc, #152]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 8000382:	f023 0304 	bic.w	r3, r3, #4
 8000386:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000388:	e040      	b.n	800040c <GPIO_PeriClockControl+0x19c>
        }else if(pGPIOx == GPIOD)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a26      	ldr	r2, [pc, #152]	@ (8000428 <GPIO_PeriClockControl+0x1b8>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d106      	bne.n	80003a0 <GPIO_PeriClockControl+0x130>
            GPIOD_PCLK_DI();
 8000392:	4b22      	ldr	r3, [pc, #136]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000396:	4a21      	ldr	r2, [pc, #132]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 8000398:	f023 0308 	bic.w	r3, r3, #8
 800039c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800039e:	e035      	b.n	800040c <GPIO_PeriClockControl+0x19c>
        }else if(pGPIOx == GPIOE)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a22      	ldr	r2, [pc, #136]	@ (800042c <GPIO_PeriClockControl+0x1bc>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d106      	bne.n	80003b6 <GPIO_PeriClockControl+0x146>
            GPIOE_PCLK_DI();
 80003a8:	4b1c      	ldr	r3, [pc, #112]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80003aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ac:	4a1b      	ldr	r2, [pc, #108]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80003ae:	f023 0310 	bic.w	r3, r3, #16
 80003b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b4:	e02a      	b.n	800040c <GPIO_PeriClockControl+0x19c>
        }else if(pGPIOx == GPIOF)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000430 <GPIO_PeriClockControl+0x1c0>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <GPIO_PeriClockControl+0x15c>
            GPIOF_PCLK_DI();
 80003be:	4b17      	ldr	r3, [pc, #92]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c2:	4a16      	ldr	r2, [pc, #88]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80003c4:	f023 0320 	bic.w	r3, r3, #32
 80003c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ca:	e01f      	b.n	800040c <GPIO_PeriClockControl+0x19c>
        }else if(pGPIOx == GPIOG)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a19      	ldr	r2, [pc, #100]	@ (8000434 <GPIO_PeriClockControl+0x1c4>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d106      	bne.n	80003e2 <GPIO_PeriClockControl+0x172>
            GPIOG_PCLK_DI();
 80003d4:	4b11      	ldr	r3, [pc, #68]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80003d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d8:	4a10      	ldr	r2, [pc, #64]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80003da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80003de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e0:	e014      	b.n	800040c <GPIO_PeriClockControl+0x19c>
        }else if(pGPIOx == GPIOH)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a14      	ldr	r2, [pc, #80]	@ (8000438 <GPIO_PeriClockControl+0x1c8>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <GPIO_PeriClockControl+0x188>
            GPIOH_PCLK_DI();
 80003ea:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ee:	4a0b      	ldr	r2, [pc, #44]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 80003f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003f4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f6:	e009      	b.n	800040c <GPIO_PeriClockControl+0x19c>
        }else if(pGPIOx == GPIOI)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a10      	ldr	r2, [pc, #64]	@ (800043c <GPIO_PeriClockControl+0x1cc>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d105      	bne.n	800040c <GPIO_PeriClockControl+0x19c>
            GPIOI_PCLK_DI();
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000404:	4a05      	ldr	r2, [pc, #20]	@ (800041c <GPIO_PeriClockControl+0x1ac>)
 8000406:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800040a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	40020000 	.word	0x40020000
 800041c:	40023800 	.word	0x40023800
 8000420:	40020400 	.word	0x40020400
 8000424:	40020800 	.word	0x40020800
 8000428:	40020c00 	.word	0x40020c00
 800042c:	40021000 	.word	0x40021000
 8000430:	40021400 	.word	0x40021400
 8000434:	40021800 	.word	0x40021800
 8000438:	40021c00 	.word	0x40021c00
 800043c:	40022000 	.word	0x40022000

08000440 <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2101      	movs	r1, #1
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff0c 	bl	8000270 <GPIO_PeriClockControl>


    //1. config the mode of gpio pin
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	2b03      	cmp	r3, #3
 800045e:	d81f      	bhi.n	80004a0 <GPIO_Init+0x60>
    {
    	// the non interrupt
    	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	795b      	ldrb	r3, [r3, #5]
 8000464:	461a      	mov	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	791b      	ldrb	r3, [r3, #4]
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	fa02 f303 	lsl.w	r3, r2, r3
 8000470:	617b      	str	r3, [r7, #20]
    	pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	791b      	ldrb	r3, [r3, #4]
 800047c:	4619      	mov	r1, r3
 800047e:	2303      	movs	r3, #3
 8000480:	408b      	lsls	r3, r1
 8000482:	43db      	mvns	r3, r3
 8000484:	4619      	mov	r1, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	400a      	ands	r2, r1
 800048c:	601a      	str	r2, [r3, #0]
    	pGPIOHandle->pGPIOx->MODER |= temp;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	697a      	ldr	r2, [r7, #20]
 800049a:	430a      	orrs	r2, r1
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	e0c2      	b.n	8000626 <GPIO_Init+0x1e6>
    }else
    {
    	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	795b      	ldrb	r3, [r3, #5]
 80004a4:	2b04      	cmp	r3, #4
 80004a6:	d117      	bne.n	80004d8 <GPIO_Init+0x98>
    	{
    		//1. config the FTSR
    		EXTI->FTSR	|= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a8:	4b47      	ldr	r3, [pc, #284]	@ (80005c8 <GPIO_Init+0x188>)
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	7912      	ldrb	r2, [r2, #4]
 80004b0:	4611      	mov	r1, r2
 80004b2:	2201      	movs	r2, #1
 80004b4:	408a      	lsls	r2, r1
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a43      	ldr	r2, [pc, #268]	@ (80005c8 <GPIO_Init+0x188>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	60d3      	str	r3, [r2, #12]
    		// Clear the responding RTSR bit
    		EXTI->RTSR	&= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004be:	4b42      	ldr	r3, [pc, #264]	@ (80005c8 <GPIO_Init+0x188>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	7912      	ldrb	r2, [r2, #4]
 80004c6:	4611      	mov	r1, r2
 80004c8:	2201      	movs	r2, #1
 80004ca:	408a      	lsls	r2, r1
 80004cc:	43d2      	mvns	r2, r2
 80004ce:	4611      	mov	r1, r2
 80004d0:	4a3d      	ldr	r2, [pc, #244]	@ (80005c8 <GPIO_Init+0x188>)
 80004d2:	400b      	ands	r3, r1
 80004d4:	6093      	str	r3, [r2, #8]
 80004d6:	e035      	b.n	8000544 <GPIO_Init+0x104>
    	}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	795b      	ldrb	r3, [r3, #5]
 80004dc:	2b05      	cmp	r3, #5
 80004de:	d117      	bne.n	8000510 <GPIO_Init+0xd0>
    	{
    		//1. config the RTSR
			EXTI->RTSR	|= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e0:	4b39      	ldr	r3, [pc, #228]	@ (80005c8 <GPIO_Init+0x188>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	7912      	ldrb	r2, [r2, #4]
 80004e8:	4611      	mov	r1, r2
 80004ea:	2201      	movs	r2, #1
 80004ec:	408a      	lsls	r2, r1
 80004ee:	4611      	mov	r1, r2
 80004f0:	4a35      	ldr	r2, [pc, #212]	@ (80005c8 <GPIO_Init+0x188>)
 80004f2:	430b      	orrs	r3, r1
 80004f4:	6093      	str	r3, [r2, #8]
			// Clear the responding RTSR bit
			EXTI->FTSR	&= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f6:	4b34      	ldr	r3, [pc, #208]	@ (80005c8 <GPIO_Init+0x188>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	7912      	ldrb	r2, [r2, #4]
 80004fe:	4611      	mov	r1, r2
 8000500:	2201      	movs	r2, #1
 8000502:	408a      	lsls	r2, r1
 8000504:	43d2      	mvns	r2, r2
 8000506:	4611      	mov	r1, r2
 8000508:	4a2f      	ldr	r2, [pc, #188]	@ (80005c8 <GPIO_Init+0x188>)
 800050a:	400b      	ands	r3, r1
 800050c:	60d3      	str	r3, [r2, #12]
 800050e:	e019      	b.n	8000544 <GPIO_Init+0x104>
    	}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	795b      	ldrb	r3, [r3, #5]
 8000514:	2b06      	cmp	r3, #6
 8000516:	d115      	bne.n	8000544 <GPIO_Init+0x104>
    	{
    		//1. config the RTSR and FTSR
			EXTI->RTSR	|= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000518:	4b2b      	ldr	r3, [pc, #172]	@ (80005c8 <GPIO_Init+0x188>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	7912      	ldrb	r2, [r2, #4]
 8000520:	4611      	mov	r1, r2
 8000522:	2201      	movs	r2, #1
 8000524:	408a      	lsls	r2, r1
 8000526:	4611      	mov	r1, r2
 8000528:	4a27      	ldr	r2, [pc, #156]	@ (80005c8 <GPIO_Init+0x188>)
 800052a:	430b      	orrs	r3, r1
 800052c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR	|= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052e:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <GPIO_Init+0x188>)
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	7912      	ldrb	r2, [r2, #4]
 8000536:	4611      	mov	r1, r2
 8000538:	2201      	movs	r2, #1
 800053a:	408a      	lsls	r2, r1
 800053c:	4611      	mov	r1, r2
 800053e:	4a22      	ldr	r2, [pc, #136]	@ (80005c8 <GPIO_Init+0x188>)
 8000540:	430b      	orrs	r3, r1
 8000542:	60d3      	str	r3, [r2, #12]
    	}

    	//2. config the gpio port selection in SYSCFG_EXTICR
    	uint8_t tem1,tem2;
    	tem1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	791b      	ldrb	r3, [r3, #4]
 8000548:	089b      	lsrs	r3, r3, #2
 800054a:	74fb      	strb	r3, [r7, #19]
    	tem2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	791b      	ldrb	r3, [r3, #4]
 8000550:	f003 0303 	and.w	r3, r3, #3
 8000554:	74bb      	strb	r3, [r7, #18]
    	uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a1c      	ldr	r2, [pc, #112]	@ (80005cc <GPIO_Init+0x18c>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d045      	beq.n	80005ec <GPIO_Init+0x1ac>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a1a      	ldr	r2, [pc, #104]	@ (80005d0 <GPIO_Init+0x190>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d02b      	beq.n	80005c2 <GPIO_Init+0x182>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a19      	ldr	r2, [pc, #100]	@ (80005d4 <GPIO_Init+0x194>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d024      	beq.n	80005be <GPIO_Init+0x17e>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a17      	ldr	r2, [pc, #92]	@ (80005d8 <GPIO_Init+0x198>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d01d      	beq.n	80005ba <GPIO_Init+0x17a>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a16      	ldr	r2, [pc, #88]	@ (80005dc <GPIO_Init+0x19c>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d016      	beq.n	80005b6 <GPIO_Init+0x176>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a14      	ldr	r2, [pc, #80]	@ (80005e0 <GPIO_Init+0x1a0>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d00f      	beq.n	80005b2 <GPIO_Init+0x172>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a13      	ldr	r2, [pc, #76]	@ (80005e4 <GPIO_Init+0x1a4>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d008      	beq.n	80005ae <GPIO_Init+0x16e>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a11      	ldr	r2, [pc, #68]	@ (80005e8 <GPIO_Init+0x1a8>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d101      	bne.n	80005aa <GPIO_Init+0x16a>
 80005a6:	2307      	movs	r3, #7
 80005a8:	e021      	b.n	80005ee <GPIO_Init+0x1ae>
 80005aa:	2300      	movs	r3, #0
 80005ac:	e01f      	b.n	80005ee <GPIO_Init+0x1ae>
 80005ae:	2306      	movs	r3, #6
 80005b0:	e01d      	b.n	80005ee <GPIO_Init+0x1ae>
 80005b2:	2305      	movs	r3, #5
 80005b4:	e01b      	b.n	80005ee <GPIO_Init+0x1ae>
 80005b6:	2304      	movs	r3, #4
 80005b8:	e019      	b.n	80005ee <GPIO_Init+0x1ae>
 80005ba:	2303      	movs	r3, #3
 80005bc:	e017      	b.n	80005ee <GPIO_Init+0x1ae>
 80005be:	2302      	movs	r3, #2
 80005c0:	e015      	b.n	80005ee <GPIO_Init+0x1ae>
 80005c2:	2301      	movs	r3, #1
 80005c4:	e013      	b.n	80005ee <GPIO_Init+0x1ae>
 80005c6:	bf00      	nop
 80005c8:	40013c00 	.word	0x40013c00
 80005cc:	40020000 	.word	0x40020000
 80005d0:	40020400 	.word	0x40020400
 80005d4:	40020800 	.word	0x40020800
 80005d8:	40020c00 	.word	0x40020c00
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40021400 	.word	0x40021400
 80005e4:	40021800 	.word	0x40021800
 80005e8:	40021c00 	.word	0x40021c00
 80005ec:	2300      	movs	r3, #0
 80005ee:	747b      	strb	r3, [r7, #17]
    	SYSCFG_PCLK_EN();
 80005f0:	4b5c      	ldr	r3, [pc, #368]	@ (8000764 <GPIO_Init+0x324>)
 80005f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f4:	4a5b      	ldr	r2, [pc, #364]	@ (8000764 <GPIO_Init+0x324>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fa:	6453      	str	r3, [r2, #68]	@ 0x44
    	SYSCFG->EXTICR[tem1] = (portcode << (4*tem2));
 80005fc:	7c7a      	ldrb	r2, [r7, #17]
 80005fe:	7cbb      	ldrb	r3, [r7, #18]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	fa02 f103 	lsl.w	r1, r2, r3
 8000606:	4a58      	ldr	r2, [pc, #352]	@ (8000768 <GPIO_Init+0x328>)
 8000608:	7cfb      	ldrb	r3, [r7, #19]
 800060a:	3302      	adds	r3, #2
 800060c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	//3. enable the exti interrupt delivery using IMR
    	EXTI->IMR	|=	(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000610:	4b56      	ldr	r3, [pc, #344]	@ (800076c <GPIO_Init+0x32c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	7912      	ldrb	r2, [r2, #4]
 8000618:	4611      	mov	r1, r2
 800061a:	2201      	movs	r2, #1
 800061c:	408a      	lsls	r2, r1
 800061e:	4611      	mov	r1, r2
 8000620:	4a52      	ldr	r2, [pc, #328]	@ (800076c <GPIO_Init+0x32c>)
 8000622:	430b      	orrs	r3, r1
 8000624:	6013      	str	r3, [r2, #0]
    }
    temp = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]

    //2. config the speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	799b      	ldrb	r3, [r3, #6]
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinMode);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	689a      	ldr	r2, [r3, #8]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	795b      	ldrb	r3, [r3, #5]
 8000646:	4619      	mov	r1, r3
 8000648:	2303      	movs	r3, #3
 800064a:	408b      	lsls	r3, r1
 800064c:	43db      	mvns	r3, r3
 800064e:	4619      	mov	r1, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	400a      	ands	r2, r1
 8000656:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	6899      	ldr	r1, [r3, #8]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	697a      	ldr	r2, [r7, #20]
 8000664:	430a      	orrs	r2, r1
 8000666:	609a      	str	r2, [r3, #8]
    temp = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]

    //3. config the pupd settings
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	79db      	ldrb	r3, [r3, #7]
 8000670:	461a      	mov	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	fa02 f303 	lsl.w	r3, r2, r3
 800067c:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinMode);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	795b      	ldrb	r3, [r3, #5]
 8000688:	4619      	mov	r1, r3
 800068a:	2303      	movs	r3, #3
 800068c:	408b      	lsls	r3, r1
 800068e:	43db      	mvns	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	400a      	ands	r2, r1
 8000698:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	68d9      	ldr	r1, [r3, #12]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	430a      	orrs	r2, r1
 80006a8:	60da      	str	r2, [r3, #12]
    temp = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]

    //4. config the optype
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (1*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	7a1b      	ldrb	r3, [r3, #8]
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinMode);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	685a      	ldr	r2, [r3, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	795b      	ldrb	r3, [r3, #5]
 80006c8:	4619      	mov	r1, r3
 80006ca:	2301      	movs	r3, #1
 80006cc:	408b      	lsls	r3, r1
 80006ce:	43db      	mvns	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	400a      	ands	r2, r1
 80006d8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6859      	ldr	r1, [r3, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	430a      	orrs	r2, r1
 80006e8:	605a      	str	r2, [r3, #4]
	temp = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]

    //5. config the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUN)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	795b      	ldrb	r3, [r3, #5]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d131      	bne.n	800075a <GPIO_Init+0x31a>
	{
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	08db      	lsrs	r3, r3, #3
 80006fc:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	7c3a      	ldrb	r2, [r7, #16]
 800070e:	3208      	adds	r2, #8
 8000710:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	220f      	movs	r2, #15
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	43db      	mvns	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	7c3a      	ldrb	r2, [r7, #16]
 8000728:	4001      	ands	r1, r0
 800072a:	3208      	adds	r2, #8
 800072c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_AltFunMode << ( 4 * temp2 ));
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	7c3a      	ldrb	r2, [r7, #16]
 8000736:	3208      	adds	r2, #8
 8000738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7a5b      	ldrb	r3, [r3, #9]
 8000740:	461a      	mov	r2, r3
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	4618      	mov	r0, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	7c3a      	ldrb	r2, [r7, #16]
 8000752:	4301      	orrs	r1, r0
 8000754:	3208      	adds	r2, #8
 8000756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800075a:	bf00      	nop
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40013800 	.word	0x40013800
 800076c:	40013c00 	.word	0x40013c00

08000770 <GPIO_IRQInterruptConfig>:

/*
 *  IRQ config and ISR Handling
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	460a      	mov	r2, r1
 800077a:	71fb      	strb	r3, [r7, #7]
 800077c:	4613      	mov	r3, r2
 800077e:	71bb      	strb	r3, [r7, #6]
	if(EnorDi==ENABLE)
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d133      	bne.n	80007ee <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31) /*0 -> 31*/
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b1f      	cmp	r3, #31
 800078a:	d80a      	bhi.n	80007a2 <GPIO_IRQInterruptConfig+0x32>
		{
			//	program ISER0 register
            *NVIC_ISER0 |= (1 << IRQNumber );
 800078c:	4b35      	ldr	r3, [pc, #212]	@ (8000864 <GPIO_IRQInterruptConfig+0xf4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	79fa      	ldrb	r2, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	4611      	mov	r1, r2
 800079a:	4a32      	ldr	r2, [pc, #200]	@ (8000864 <GPIO_IRQInterruptConfig+0xf4>)
 800079c:	430b      	orrs	r3, r1
 800079e:	6013      	str	r3, [r2, #0]
		{
			//	program ISER2 register
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 80007a0:	e059      	b.n	8000856 <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64) /*32 -> 63*/
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b1f      	cmp	r3, #31
 80007a6:	d90f      	bls.n	80007c8 <GPIO_IRQInterruptConfig+0x58>
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80007ac:	d80c      	bhi.n	80007c8 <GPIO_IRQInterruptConfig+0x58>
            *NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80007ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000868 <GPIO_IRQInterruptConfig+0xf8>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	79fa      	ldrb	r2, [r7, #7]
 80007b4:	f002 021f 	and.w	r2, r2, #31
 80007b8:	2101      	movs	r1, #1
 80007ba:	fa01 f202 	lsl.w	r2, r1, r2
 80007be:	4611      	mov	r1, r2
 80007c0:	4a29      	ldr	r2, [pc, #164]	@ (8000868 <GPIO_IRQInterruptConfig+0xf8>)
 80007c2:	430b      	orrs	r3, r1
 80007c4:	6013      	str	r3, [r2, #0]
 80007c6:	e046      	b.n	8000856 <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96)	/*64 -> 95*/
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80007cc:	d943      	bls.n	8000856 <GPIO_IRQInterruptConfig+0xe6>
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b5f      	cmp	r3, #95	@ 0x5f
 80007d2:	d840      	bhi.n	8000856 <GPIO_IRQInterruptConfig+0xe6>
            *NVIC_ISER2 |= (1 << (IRQNumber % 64));
 80007d4:	4b25      	ldr	r3, [pc, #148]	@ (800086c <GPIO_IRQInterruptConfig+0xfc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	79fa      	ldrb	r2, [r7, #7]
 80007da:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80007de:	2101      	movs	r1, #1
 80007e0:	fa01 f202 	lsl.w	r2, r1, r2
 80007e4:	4611      	mov	r1, r2
 80007e6:	4a21      	ldr	r2, [pc, #132]	@ (800086c <GPIO_IRQInterruptConfig+0xfc>)
 80007e8:	430b      	orrs	r3, r1
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	e033      	b.n	8000856 <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31) /*0 -> 31*/
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b1f      	cmp	r3, #31
 80007f2:	d80a      	bhi.n	800080a <GPIO_IRQInterruptConfig+0x9a>
            *NVIC_ICER0 |= (1 << IRQNumber );
 80007f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000870 <GPIO_IRQInterruptConfig+0x100>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	79fa      	ldrb	r2, [r7, #7]
 80007fa:	2101      	movs	r1, #1
 80007fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000800:	4611      	mov	r1, r2
 8000802:	4a1b      	ldr	r2, [pc, #108]	@ (8000870 <GPIO_IRQInterruptConfig+0x100>)
 8000804:	430b      	orrs	r3, r1
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	e025      	b.n	8000856 <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64) /*32 -> 63*/
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b1f      	cmp	r3, #31
 800080e:	d90f      	bls.n	8000830 <GPIO_IRQInterruptConfig+0xc0>
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b3f      	cmp	r3, #63	@ 0x3f
 8000814:	d80c      	bhi.n	8000830 <GPIO_IRQInterruptConfig+0xc0>
            *NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000816:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <GPIO_IRQInterruptConfig+0x104>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	79fa      	ldrb	r2, [r7, #7]
 800081c:	f002 021f 	and.w	r2, r2, #31
 8000820:	2101      	movs	r1, #1
 8000822:	fa01 f202 	lsl.w	r2, r1, r2
 8000826:	4611      	mov	r1, r2
 8000828:	4a12      	ldr	r2, [pc, #72]	@ (8000874 <GPIO_IRQInterruptConfig+0x104>)
 800082a:	430b      	orrs	r3, r1
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	e012      	b.n	8000856 <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96)	/*64 -> 95*/
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b3f      	cmp	r3, #63	@ 0x3f
 8000834:	d90f      	bls.n	8000856 <GPIO_IRQInterruptConfig+0xe6>
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b5f      	cmp	r3, #95	@ 0x5f
 800083a:	d80c      	bhi.n	8000856 <GPIO_IRQInterruptConfig+0xe6>
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
 800083c:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <GPIO_IRQInterruptConfig+0x108>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	79fa      	ldrb	r2, [r7, #7]
 8000842:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000846:	2101      	movs	r1, #1
 8000848:	fa01 f202 	lsl.w	r2, r1, r2
 800084c:	4611      	mov	r1, r2
 800084e:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <GPIO_IRQInterruptConfig+0x108>)
 8000850:	430b      	orrs	r3, r1
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	e7ff      	b.n	8000856 <GPIO_IRQInterruptConfig+0xe6>
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000e100 	.word	0xe000e100
 8000868:	e000e104 	.word	0xe000e104
 800086c:	e000e108 	.word	0xe000e108
 8000870:	e000e180 	.word	0xe000e180
 8000874:	e000e184 	.word	0xe000e184
 8000878:	e000e188 	.word	0xe000e188

0800087c <GPIO_IRQPriorityConfig>:
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	6039      	str	r1, [r7, #0]
 8000886:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx = IRQNumber / 4;
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	089b      	lsrs	r3, r3, #2
 800088c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	f003 0303 	and.w	r3, r3, #3
 8000894:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8*iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000896:	7bbb      	ldrb	r3, [r7, #14]
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	b2db      	uxtb	r3, r3
 800089c:	3304      	adds	r3, #4
 800089e:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80008a8:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80008ac:	6819      	ldr	r1, [r3, #0]
 80008ae:	7b7b      	ldrb	r3, [r7, #13]
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	409a      	lsls	r2, r3
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80008bc:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80008c0:	430a      	orrs	r2, r1
 80008c2:	601a      	str	r2, [r3, #0]
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
    /* Clear the PR register corresponding to pin number */
    if(EXTI->PR & (1 << PinNumber))
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <GPIO_IRQHandling+0x3c>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	79fa      	ldrb	r2, [r7, #7]
 80008e0:	2101      	movs	r1, #1
 80008e2:	fa01 f202 	lsl.w	r2, r1, r2
 80008e6:	4013      	ands	r3, r2
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d009      	beq.n	8000900 <GPIO_IRQHandling+0x30>
    {
        /* Clear pin */
        EXTI->PR |= (1 << PinNumber);
 80008ec:	4b07      	ldr	r3, [pc, #28]	@ (800090c <GPIO_IRQHandling+0x3c>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	79fa      	ldrb	r2, [r7, #7]
 80008f2:	2101      	movs	r1, #1
 80008f4:	fa01 f202 	lsl.w	r2, r1, r2
 80008f8:	4611      	mov	r1, r2
 80008fa:	4a04      	ldr	r2, [pc, #16]	@ (800090c <GPIO_IRQHandling+0x3c>)
 80008fc:	430b      	orrs	r3, r1
 80008fe:	6153      	str	r3, [r2, #20]
    }
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	40013c00 	.word	0x40013c00

08000910 <SPI_PeriClockControl>:
 *
 * @Note              -

 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d120      	bne.n	8000964 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a22      	ldr	r2, [pc, #136]	@ (80009b0 <SPI_PeriClockControl+0xa0>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d106      	bne.n	8000938 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800092a:	4b22      	ldr	r3, [pc, #136]	@ (80009b4 <SPI_PeriClockControl+0xa4>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092e:	4a21      	ldr	r2, [pc, #132]	@ (80009b4 <SPI_PeriClockControl+0xa4>)
 8000930:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000934:	6453      	str	r3, [r2, #68]	@ 0x44
		}else if (pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
	}
}
 8000936:	e035      	b.n	80009a4 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a1f      	ldr	r2, [pc, #124]	@ (80009b8 <SPI_PeriClockControl+0xa8>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d106      	bne.n	800094e <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000940:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <SPI_PeriClockControl+0xa4>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	4a1b      	ldr	r2, [pc, #108]	@ (80009b4 <SPI_PeriClockControl+0xa4>)
 8000946:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800094c:	e02a      	b.n	80009a4 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a1a      	ldr	r2, [pc, #104]	@ (80009bc <SPI_PeriClockControl+0xac>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d126      	bne.n	80009a4 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000956:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <SPI_PeriClockControl+0xa4>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	4a16      	ldr	r2, [pc, #88]	@ (80009b4 <SPI_PeriClockControl+0xa4>)
 800095c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000960:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000962:	e01f      	b.n	80009a4 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a12      	ldr	r2, [pc, #72]	@ (80009b0 <SPI_PeriClockControl+0xa0>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d106      	bne.n	800097a <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <SPI_PeriClockControl+0xa4>)
 800096e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000970:	4a10      	ldr	r2, [pc, #64]	@ (80009b4 <SPI_PeriClockControl+0xa4>)
 8000972:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000976:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000978:	e014      	b.n	80009a4 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a0e      	ldr	r2, [pc, #56]	@ (80009b8 <SPI_PeriClockControl+0xa8>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d106      	bne.n	8000990 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <SPI_PeriClockControl+0xa4>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	4a0b      	ldr	r2, [pc, #44]	@ (80009b4 <SPI_PeriClockControl+0xa4>)
 8000988:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800098c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800098e:	e009      	b.n	80009a4 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <SPI_PeriClockControl+0xac>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d105      	bne.n	80009a4 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <SPI_PeriClockControl+0xa4>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099c:	4a05      	ldr	r2, [pc, #20]	@ (80009b4 <SPI_PeriClockControl+0xa4>)
 800099e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009a2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	40013000 	.word	0x40013000
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40003800 	.word	0x40003800
 80009bc:	40003c00 	.word	0x40003c00

080009c0 <SPI_Init>:
 *
 * @Note              -

 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2101      	movs	r1, #1
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ff9e 	bl	8000910 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	791b      	ldrb	r3, [r3, #4]
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	795b      	ldrb	r3, [r3, #5]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d104      	bne.n	80009f6 <SPI_Init+0x36>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	e014      	b.n	8000a20 <SPI_Init+0x60>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	795b      	ldrb	r3, [r3, #5]
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d104      	bne.n	8000a08 <SPI_Init+0x48>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	e00b      	b.n	8000a20 <SPI_Init+0x60>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	795b      	ldrb	r3, [r3, #5]
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	d107      	bne.n	8000a20 <SPI_Init+0x60>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000a16:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a1e:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	799b      	ldrb	r3, [r3, #6]
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	79db      	ldrb	r3, [r3, #7]
 8000a30:	02db      	lsls	r3, r3, #11
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	7a1b      	ldrb	r3, [r3, #8]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	7a5b      	ldrb	r3, [r3, #9]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7a9b      	ldrb	r3, [r3, #10]
 8000a54:	025b      	lsls	r3, r3, #9
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	601a      	str	r2, [r3, #0]

}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <SPI_GetFlagStatus>:

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	689a      	ldr	r2, [r3, #8]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e000      	b.n	8000a88 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <SPI_PeripheralControl>:
 *
 * @Note              -

 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000aa0:	78fb      	ldrb	r3, [r7, #3]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d106      	bne.n	8000ab4 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8000ab2:	e005      	b.n	8000ac0 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <SPI_SSOEConfig>:
 *
 * @Note              -

 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000ad8:	78fb      	ldrb	r3, [r7, #3]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d106      	bne.n	8000aec <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f043 0204 	orr.w	r2, r3, #4
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8000aea:	e005      	b.n	8000af8 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f023 0204 	bic.w	r2, r3, #4
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	605a      	str	r2, [r3, #4]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <SPI_IRQInterruptConfig>:
 *
 * @Note              -

 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	71fb      	strb	r3, [r7, #7]
 8000b10:	4613      	mov	r3, r2
 8000b12:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000b14:	79bb      	ldrb	r3, [r7, #6]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d133      	bne.n	8000b82 <SPI_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	2b1f      	cmp	r3, #31
 8000b1e:	d80a      	bhi.n	8000b36 <SPI_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000b20:	4b35      	ldr	r3, [pc, #212]	@ (8000bf8 <SPI_IRQInterruptConfig+0xf4>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	79fa      	ldrb	r2, [r7, #7]
 8000b26:	2101      	movs	r1, #1
 8000b28:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4a32      	ldr	r2, [pc, #200]	@ (8000bf8 <SPI_IRQInterruptConfig+0xf4>)
 8000b30:	430b      	orrs	r3, r1
 8000b32:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000b34:	e059      	b.n	8000bea <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b1f      	cmp	r3, #31
 8000b3a:	d90f      	bls.n	8000b5c <SPI_IRQInterruptConfig+0x58>
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b40:	d80c      	bhi.n	8000b5c <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000b42:	4b2e      	ldr	r3, [pc, #184]	@ (8000bfc <SPI_IRQInterruptConfig+0xf8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	f002 021f 	and.w	r2, r2, #31
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b52:	4611      	mov	r1, r2
 8000b54:	4a29      	ldr	r2, [pc, #164]	@ (8000bfc <SPI_IRQInterruptConfig+0xf8>)
 8000b56:	430b      	orrs	r3, r1
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	e046      	b.n	8000bea <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b60:	d943      	bls.n	8000bea <SPI_IRQInterruptConfig+0xe6>
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	2b5f      	cmp	r3, #95	@ 0x5f
 8000b66:	d840      	bhi.n	8000bea <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000b68:	4b25      	ldr	r3, [pc, #148]	@ (8000c00 <SPI_IRQInterruptConfig+0xfc>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	79fa      	ldrb	r2, [r7, #7]
 8000b6e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000b72:	2101      	movs	r1, #1
 8000b74:	fa01 f202 	lsl.w	r2, r1, r2
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4a21      	ldr	r2, [pc, #132]	@ (8000c00 <SPI_IRQInterruptConfig+0xfc>)
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	e033      	b.n	8000bea <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b1f      	cmp	r3, #31
 8000b86:	d80a      	bhi.n	8000b9e <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000b88:	4b1e      	ldr	r3, [pc, #120]	@ (8000c04 <SPI_IRQInterruptConfig+0x100>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	79fa      	ldrb	r2, [r7, #7]
 8000b8e:	2101      	movs	r1, #1
 8000b90:	fa01 f202 	lsl.w	r2, r1, r2
 8000b94:	4611      	mov	r1, r2
 8000b96:	4a1b      	ldr	r2, [pc, #108]	@ (8000c04 <SPI_IRQInterruptConfig+0x100>)
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	e025      	b.n	8000bea <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b1f      	cmp	r3, #31
 8000ba2:	d90f      	bls.n	8000bc4 <SPI_IRQInterruptConfig+0xc0>
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ba8:	d80c      	bhi.n	8000bc4 <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000baa:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <SPI_IRQInterruptConfig+0x104>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	79fa      	ldrb	r2, [r7, #7]
 8000bb0:	f002 021f 	and.w	r2, r2, #31
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4a12      	ldr	r2, [pc, #72]	@ (8000c08 <SPI_IRQInterruptConfig+0x104>)
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	e012      	b.n	8000bea <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2b05      	cmp	r3, #5
 8000bc8:	d90f      	bls.n	8000bea <SPI_IRQInterruptConfig+0xe6>
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b5f      	cmp	r3, #95	@ 0x5f
 8000bce:	d80c      	bhi.n	8000bea <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <SPI_IRQInterruptConfig+0x108>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	79fa      	ldrb	r2, [r7, #7]
 8000bd6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000bda:	2101      	movs	r1, #1
 8000bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000be0:	4611      	mov	r1, r2
 8000be2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <SPI_IRQInterruptConfig+0x108>)
 8000be4:	430b      	orrs	r3, r1
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	e7ff      	b.n	8000bea <SPI_IRQInterruptConfig+0xe6>
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000e104 	.word	0xe000e104
 8000c00:	e000e10c 	.word	0xe000e10c
 8000c04:	e000e180 	.word	0xe000e180
 8000c08:	e000e184 	.word	0xe000e184
 8000c0c:	e000e18c 	.word	0xe000e18c

08000c10 <SPI_SendDataIT>:
	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );

}

uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle,uint8_t *pTxBuffer, uint32_t Len)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b087      	sub	sp, #28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	7f1b      	ldrb	r3, [r3, #28]
 8000c20:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_TX)
 8000c22:	7dfb      	ldrb	r3, [r7, #23]
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d010      	beq.n	8000c4a <SPI_SendDataIT+0x3a>
	{
		//1 . Save the Tx buffer address and Len information in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	615a      	str	r2, [r3, #20]
		//2.  Mark the SPI state as busy in transmission so that
		//    no other code can take over same SPI peripheral until transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2202      	movs	r2, #2
 8000c38:	771a      	strb	r2, [r3, #28]

		//3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_TXEIE );
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000c48:	605a      	str	r2, [r3, #4]

	}


	return state;
 8000c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	371c      	adds	r7, #28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <SPI_ReceiveDataIT>:


uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	7f5b      	ldrb	r3, [r3, #29]
 8000c68:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_RX)
 8000c6a:	7dfb      	ldrb	r3, [r7, #23]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d010      	beq.n	8000c92 <SPI_ReceiveDataIT+0x3a>
	{
		//1 . Save the Rx buffer address and Len information in some global variables
		pSPIHandle->pRxBuffer = pRxBuffer;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = Len;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	619a      	str	r2, [r3, #24]
		//2.  Mark the SPI state as busy in reception so that
		//    no other code can take over same SPI peripheral until reception is over
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	775a      	strb	r2, [r3, #29]

		//3. Enable the RXNEIE control bit to get interrupt whenever RXNEIE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_RXNEIE );
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000c90:	605a      	str	r2, [r3, #4]

	}


	return state;
 8000c92:	7dfb      	ldrb	r3, [r7, #23]

}
 8000c94:	4618      	mov	r0, r3
 8000c96:	371c      	adds	r7, #28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <SPI_IRQHandling>:




void SPI_IRQHandling(SPI_Handle_t *pHandle)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

	uint8_t temp1 , temp2;
	//first lets check for TXE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_TXE);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	f003 0302 	and.w	r3, r3, #2
 8000cb4:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_TXEIE);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000cc2:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d005      	beq.n	8000cd6 <SPI_IRQHandling+0x36>
 8000cca:	7bbb      	ldrb	r3, [r7, #14]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <SPI_IRQHandling+0x36>
	{
		//handle TXE
		spi_txe_interrupt_handle(pHandle);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 f832 	bl	8000d3a <spi_txe_interrupt_handle>
	}

	// check for RXNE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_RXNE);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_RXNEIE);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cf0:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d005      	beq.n	8000d04 <SPI_IRQHandling+0x64>
 8000cf8:	7bbb      	ldrb	r3, [r7, #14]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <SPI_IRQHandling+0x64>
	{
		//handle RXNE
		spi_rxne_interrupt_handle(pHandle);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f000 f85b 	bl	8000dba <spi_rxne_interrupt_handle>
	}

	// check for ovr flag
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_OVR);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d10:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_ERRIE);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f003 0320 	and.w	r3, r3, #32
 8000d1e:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <SPI_IRQHandling+0x92>
 8000d26:	7bbb      	ldrb	r3, [r7, #14]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d002      	beq.n	8000d32 <SPI_IRQHandling+0x92>
	{
		//handle ovr error
		spi_ovr_err_interrupt_handle(pHandle);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f000 f886 	bl	8000e3e <spi_ovr_err_interrupt_handle>
	}


}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <spi_txe_interrupt_handle>:


//some helper function implementations

static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	// check the DFF bit in CR1
	if( (pSPIHandle->pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d015      	beq.n	8000d7c <spi_txe_interrupt_handle+0x42>
	{
		//16 bit DFF
		//1. load the data in to the DR
		pSPIHandle->pSPIx->DR =   *((uint16_t*)pSPIHandle->pTxBuffer);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	881a      	ldrh	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	1e5a      	subs	r2, r3, #1
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	615a      	str	r2, [r3, #20]
		pSPIHandle->TxLen--;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	1e5a      	subs	r2, r3, #1
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	1c5a      	adds	r2, r3, #1
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	e00f      	b.n	8000d9c <spi_txe_interrupt_handle+0x62>
	}else
	{
		//8 bit DFF
		pSPIHandle->pSPIx->DR =   *pSPIHandle->pTxBuffer;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	781a      	ldrb	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	60da      	str	r2, [r3, #12]
	}

	if(! pSPIHandle->TxLen)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d106      	bne.n	8000db2 <spi_txe_interrupt_handle+0x78>
	{
		//TxLen is zero , so close the spi transmission and inform the application that
		//TX is over.

		//this prevents interrupts from setting up of TXE flag
		SPI_CloseTransmisson(pSPIHandle);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f862 	bl	8000e6e <SPI_CloseTransmisson>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_TX_CMPLT);
 8000daa:	2101      	movs	r1, #1
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f97b 	bl	80010a8 <SPI_ApplicationEventCallback>
	}

}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <spi_rxne_interrupt_handle>:


static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
	//do rxing as per the dff
	if(pSPIHandle->pSPIx->CR1 & ( 1 << 11))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d016      	beq.n	8000dfe <spi_rxne_interrupt_handle+0x44>
	{
		//16 bit
		*((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t) pSPIHandle->pSPIx->DR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	b292      	uxth	r2, r2
 8000ddc:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen -= 2;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	1e9a      	subs	r2, r3, #2
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	1c5a      	adds	r2, r3, #1
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	611a      	str	r2, [r3, #16]
		pSPIHandle->pRxBuffer++;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	e010      	b.n	8000e20 <spi_rxne_interrupt_handle+0x66>

	}else
	{
		//8 bit
		*(pSPIHandle->pRxBuffer) = (uint8_t) pSPIHandle->pSPIx->DR;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	1e5a      	subs	r2, r3, #1
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	691b      	ldr	r3, [r3, #16]
 8000e1a:	1c5a      	adds	r2, r3, #1
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	611a      	str	r2, [r3, #16]
	}

	if(! pSPIHandle->RxLen)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d106      	bne.n	8000e36 <spi_rxne_interrupt_handle+0x7c>
	{
		//reception is complete
		SPI_CloseReception(pSPIHandle);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 f83b 	bl	8000ea4 <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_RX_CMPLT);
 8000e2e:	2102      	movs	r1, #2
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 f939 	bl	80010a8 <SPI_ApplicationEventCallback>
	}

}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <spi_ovr_err_interrupt_handle>:


static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b084      	sub	sp, #16
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]

	uint8_t temp;
	//1. clear the ovr flag
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7f1b      	ldrb	r3, [r3, #28]
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d007      	beq.n	8000e5e <spi_ovr_err_interrupt_handle+0x20>
	{
		temp = pSPIHandle->pSPIx->DR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;
	//2. inform the application
	SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_OVR_ERR);
 8000e5e:	2103      	movs	r1, #3
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 f921 	bl	80010a8 <SPI_ApplicationEventCallback>

}
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <SPI_CloseTransmisson>:


void SPI_CloseTransmisson(SPI_Handle_t *pSPIHandle)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_TXEIE);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e84:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	771a      	strb	r2, [r3, #28]

}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_RXNEIE);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000eba:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	775a      	strb	r2, [r3, #29]

}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <SPI2_GPIOInits+0x58>)
 8000ee4:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_AltFunMode = 5;
 8000eea:	2305      	movs	r3, #5
 8000eec:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000efa:	230d      	movs	r3, #13
 8000efc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fa9d 	bl	8000440 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000f06:	230f      	movs	r3, #15
 8000f08:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fa97 	bl	8000440 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000f12:	230e      	movs	r3, #14
 8000f14:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fa91 	bl	8000440 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000f1e:	230c      	movs	r3, #12
 8000f20:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fa8b 	bl	8000440 <GPIO_Init>


}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40020400 	.word	0x40020400

08000f38 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	SPI2handle.pSPIx = SPI2;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <SPI2_Inits+0x40>)
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f7c <SPI2_Inits+0x44>)
 8000f40:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000f42:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <SPI2_Inits+0x40>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000f48:	4b0b      	ldr	r3, [pc, #44]	@ (8000f78 <SPI2_Inits+0x40>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <SPI2_Inits+0x40>)
 8000f50:	2204      	movs	r2, #4
 8000f52:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000f54:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <SPI2_Inits+0x40>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <SPI2_Inits+0x40>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000f60:	4b05      	ldr	r3, [pc, #20]	@ (8000f78 <SPI2_Inits+0x40>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 8000f66:	4b04      	ldr	r3, [pc, #16]	@ (8000f78 <SPI2_Inits+0x40>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 8000f6c:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <SPI2_Inits+0x40>)
 8000f6e:	f7ff fd27 	bl	80009c0 <SPI_Init>
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000078 	.word	0x20000078
 8000f7c:	40003800 	.word	0x40003800

08000f80 <Slave_GPIO_InterruptPinInit>:


/*This function configures the gpio pin over which SPI peripheral issues data available interrupt */
void Slave_GPIO_InterruptPinInit(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin,0,sizeof(spiIntPin));
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	220c      	movs	r2, #12
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fab4 	bl	80014fa <memset>

	//this is led gpio configuration
	spiIntPin.pGPIOx = GPIOD;
 8000f92:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <Slave_GPIO_InterruptPinInit+0x48>)
 8000f94:	607b      	str	r3, [r7, #4]
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000f96:	2306      	movs	r3, #6
 8000f98:	723b      	strb	r3, [r7, #8]
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	727b      	strb	r3, [r7, #9]
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	72bb      	strb	r3, [r7, #10]
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&spiIntPin);
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fa49 	bl	8000440 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5,NVIC_IRQ_PRI15);
 8000fae:	210f      	movs	r1, #15
 8000fb0:	2017      	movs	r0, #23
 8000fb2:	f7ff fc63 	bl	800087c <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	2017      	movs	r0, #23
 8000fba:	f7ff fbd9 	bl	8000770 <GPIO_IRQInterruptConfig>

}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40020c00 	.word	0x40020c00

08000fcc <main>:


int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0

	uint8_t dummy = 0xff;
 8000fd2:	23ff      	movs	r3, #255	@ 0xff
 8000fd4:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit();
 8000fd6:	f7ff ffd3 	bl	8000f80 <Slave_GPIO_InterruptPinInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8000fda:	f7ff ff7f 	bl	8000edc <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000fde:	f7ff ffab 	bl	8000f38 <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	4824      	ldr	r0, [pc, #144]	@ (8001078 <main+0xac>)
 8000fe6:	f7ff fd71 	bl	8000acc <SPI_SSOEConfig>

	SPI_IRQInterruptConfig(IRQ_NO_SPI2,ENABLE);
 8000fea:	2101      	movs	r1, #1
 8000fec:	2024      	movs	r0, #36	@ 0x24
 8000fee:	f7ff fd89 	bl	8000b04 <SPI_IRQInterruptConfig>

	while(1){

		rcvStop = 0;
 8000ff2:	4b22      	ldr	r3, [pc, #136]	@ (800107c <main+0xb0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); //wait till data available interrupt from transmitter device(slave)
 8000ff8:	bf00      	nop
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <main+0xb4>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0fa      	beq.n	8000ffa <main+0x2e>

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,DISABLE);
 8001004:	2100      	movs	r1, #0
 8001006:	2017      	movs	r0, #23
 8001008:	f7ff fbb2 	bl	8000770 <GPIO_IRQInterruptConfig>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 800100c:	2101      	movs	r1, #1
 800100e:	481a      	ldr	r0, [pc, #104]	@ (8001078 <main+0xac>)
 8001010:	f7ff fd40 	bl	8000a94 <SPI_PeripheralControl>


		while(!rcvStop)
 8001014:	e012      	b.n	800103c <main+0x70>
		{
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
			while ( SPI_SendDataIT(&SPI2handle,&dummy,1) == SPI_BUSY_IN_TX);
 8001016:	bf00      	nop
 8001018:	1dfb      	adds	r3, r7, #7
 800101a:	2201      	movs	r2, #1
 800101c:	4619      	mov	r1, r3
 800101e:	4819      	ldr	r0, [pc, #100]	@ (8001084 <main+0xb8>)
 8001020:	f7ff fdf6 	bl	8000c10 <SPI_SendDataIT>
 8001024:	4603      	mov	r3, r0
 8001026:	2b02      	cmp	r3, #2
 8001028:	d0f6      	beq.n	8001018 <main+0x4c>
			while ( SPI_ReceiveDataIT(&SPI2handle,&ReadByte,1) == SPI_BUSY_IN_RX );
 800102a:	bf00      	nop
 800102c:	2201      	movs	r2, #1
 800102e:	4916      	ldr	r1, [pc, #88]	@ (8001088 <main+0xbc>)
 8001030:	4814      	ldr	r0, [pc, #80]	@ (8001084 <main+0xb8>)
 8001032:	f7ff fe11 	bl	8000c58 <SPI_ReceiveDataIT>
 8001036:	4603      	mov	r3, r0
 8001038:	2b01      	cmp	r3, #1
 800103a:	d0f7      	beq.n	800102c <main+0x60>
		while(!rcvStop)
 800103c:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <main+0xb0>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0e7      	beq.n	8001016 <main+0x4a>
		}


		// confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 8001046:	bf00      	nop
 8001048:	2180      	movs	r1, #128	@ 0x80
 800104a:	480b      	ldr	r0, [pc, #44]	@ (8001078 <main+0xac>)
 800104c:	f7ff fd0e 	bl	8000a6c <SPI_GetFlagStatus>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f8      	bne.n	8001048 <main+0x7c>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 8001056:	2100      	movs	r1, #0
 8001058:	4807      	ldr	r0, [pc, #28]	@ (8001078 <main+0xac>)
 800105a:	f7ff fd1b 	bl	8000a94 <SPI_PeripheralControl>

		printf("Rcvd data = %s\n",RcvBuff);
 800105e:	490b      	ldr	r1, [pc, #44]	@ (800108c <main+0xc0>)
 8001060:	480b      	ldr	r0, [pc, #44]	@ (8001090 <main+0xc4>)
 8001062:	f000 f9f5 	bl	8001450 <iprintf>

		dataAvailable = 0;
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <main+0xb4>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 800106c:	2101      	movs	r1, #1
 800106e:	2017      	movs	r0, #23
 8001070:	f7ff fb7e 	bl	8000770 <GPIO_IRQInterruptConfig>
		rcvStop = 0;
 8001074:	e7bd      	b.n	8000ff2 <main+0x26>
 8001076:	bf00      	nop
 8001078:	40003800 	.word	0x40003800
 800107c:	2000028d 	.word	0x2000028d
 8001080:	2000028e 	.word	0x2000028e
 8001084:	20000078 	.word	0x20000078
 8001088:	2000028c 	.word	0x2000028c
 800108c:	20000098 	.word	0x20000098
 8001090:	08002144 	.word	0x08002144

08001094 <SPI2_IRQHandler>:

}

/* Runs when a data byte is received from the peripheral over SPI*/
void SPI2_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0

	SPI_IRQHandling(&SPI2handle);
 8001098:	4802      	ldr	r0, [pc, #8]	@ (80010a4 <SPI2_IRQHandler+0x10>)
 800109a:	f7ff fe01 	bl	8000ca0 <SPI_IRQHandling>
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000078 	.word	0x20000078

080010a8 <SPI_ApplicationEventCallback>:



void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	/* In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1) */
	if(AppEv == SPI_EVENT_RX_CMPLT)
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d11f      	bne.n	80010fa <SPI_ApplicationEventCallback+0x52>
	{
				RcvBuff[i++] = ReadByte;
 80010ba:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <SPI_ApplicationEventCallback+0x60>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	4911      	ldr	r1, [pc, #68]	@ (8001108 <SPI_ApplicationEventCallback+0x60>)
 80010c2:	600a      	str	r2, [r1, #0]
 80010c4:	4a11      	ldr	r2, [pc, #68]	@ (800110c <SPI_ApplicationEventCallback+0x64>)
 80010c6:	7812      	ldrb	r2, [r2, #0]
 80010c8:	b2d1      	uxtb	r1, r2
 80010ca:	4a11      	ldr	r2, [pc, #68]	@ (8001110 <SPI_ApplicationEventCallback+0x68>)
 80010cc:	54d1      	strb	r1, [r2, r3]
				if(ReadByte == '\0' || ( i == MAX_LEN)){
 80010ce:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <SPI_ApplicationEventCallback+0x64>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d004      	beq.n	80010e2 <SPI_ApplicationEventCallback+0x3a>
 80010d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <SPI_ApplicationEventCallback+0x60>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010e0:	d10b      	bne.n	80010fa <SPI_ApplicationEventCallback+0x52>
					rcvStop = 1;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <SPI_ApplicationEventCallback+0x6c>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
					RcvBuff[i-1] = '\0';
 80010e8:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <SPI_ApplicationEventCallback+0x60>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	4a08      	ldr	r2, [pc, #32]	@ (8001110 <SPI_ApplicationEventCallback+0x68>)
 80010f0:	2100      	movs	r1, #0
 80010f2:	54d1      	strb	r1, [r2, r3]
					i = 0;
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <SPI_ApplicationEventCallback+0x60>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
				}
	}

}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000290 	.word	0x20000290
 800110c:	2000028c 	.word	0x2000028c
 8001110:	20000098 	.word	0x20000098
 8001114:	2000028d 	.word	0x2000028d

08001118 <EXTI9_5_IRQHandler>:

/* Slave data available interrupt handler */
void EXTI9_5_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_6);
 800111c:	2006      	movs	r0, #6
 800111e:	f7ff fbd7 	bl	80008d0 <GPIO_IRQHandling>
	dataAvailable = 1;
 8001122:	4b02      	ldr	r3, [pc, #8]	@ (800112c <EXTI9_5_IRQHandler+0x14>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000028e 	.word	0x2000028e

08001130 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	e00a      	b.n	8001158 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001142:	f3af 8000 	nop.w
 8001146:	4601      	mov	r1, r0
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	60ba      	str	r2, [r7, #8]
 800114e:	b2ca      	uxtb	r2, r1
 8001150:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3301      	adds	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	429a      	cmp	r2, r3
 800115e:	dbf0      	blt.n	8001142 <_read+0x12>
  }

  return len;
 8001160:	687b      	ldr	r3, [r7, #4]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	60f8      	str	r0, [r7, #12]
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	e009      	b.n	8001190 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	60ba      	str	r2, [r7, #8]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	3301      	adds	r3, #1
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	429a      	cmp	r2, r3
 8001196:	dbf1      	blt.n	800117c <_write+0x12>
  }
  return len;
 8001198:	687b      	ldr	r3, [r7, #4]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <_close>:

int _close(int file)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011ca:	605a      	str	r2, [r3, #4]
  return 0;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <_isatty>:

int _isatty(int file)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001214:	4a14      	ldr	r2, [pc, #80]	@ (8001268 <_sbrk+0x5c>)
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <_sbrk+0x60>)
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001220:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <_sbrk+0x64>)
 800122a:	4a12      	ldr	r2, [pc, #72]	@ (8001274 <_sbrk+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122e:	4b10      	ldr	r3, [pc, #64]	@ (8001270 <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	429a      	cmp	r2, r3
 800123a:	d207      	bcs.n	800124c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800123c:	f000 f9ac 	bl	8001598 <__errno>
 8001240:	4603      	mov	r3, r0
 8001242:	220c      	movs	r2, #12
 8001244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	e009      	b.n	8001260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001252:	4b07      	ldr	r3, [pc, #28]	@ (8001270 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	4a05      	ldr	r2, [pc, #20]	@ (8001270 <_sbrk+0x64>)
 800125c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20020000 	.word	0x20020000
 800126c:	00000400 	.word	0x00000400
 8001270:	20000294 	.word	0x20000294
 8001274:	200003e8 	.word	0x200003e8

08001278 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001278:	480d      	ldr	r0, [pc, #52]	@ (80012b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800127a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800127c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480c      	ldr	r0, [pc, #48]	@ (80012b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001282:	490d      	ldr	r1, [pc, #52]	@ (80012b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001284:	4a0d      	ldr	r2, [pc, #52]	@ (80012bc <LoopForever+0xe>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001298:	4c0a      	ldr	r4, [pc, #40]	@ (80012c4 <LoopForever+0x16>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012a6:	f000 f97d 	bl	80015a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012aa:	f7ff fe8f 	bl	8000fcc <main>

080012ae <LoopForever>:

LoopForever:
  b LoopForever
 80012ae:	e7fe      	b.n	80012ae <LoopForever>
  ldr   r0, =_estack
 80012b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012bc:	08002198 	.word	0x08002198
  ldr r2, =_sbss
 80012c0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012c4:	200003e4 	.word	0x200003e4

080012c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC_IRQHandler>
	...

080012cc <std>:
 80012cc:	2300      	movs	r3, #0
 80012ce:	b510      	push	{r4, lr}
 80012d0:	4604      	mov	r4, r0
 80012d2:	e9c0 3300 	strd	r3, r3, [r0]
 80012d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80012da:	6083      	str	r3, [r0, #8]
 80012dc:	8181      	strh	r1, [r0, #12]
 80012de:	6643      	str	r3, [r0, #100]	@ 0x64
 80012e0:	81c2      	strh	r2, [r0, #14]
 80012e2:	6183      	str	r3, [r0, #24]
 80012e4:	4619      	mov	r1, r3
 80012e6:	2208      	movs	r2, #8
 80012e8:	305c      	adds	r0, #92	@ 0x5c
 80012ea:	f000 f906 	bl	80014fa <memset>
 80012ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <std+0x58>)
 80012f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80012f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001328 <std+0x5c>)
 80012f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80012f6:	4b0d      	ldr	r3, [pc, #52]	@ (800132c <std+0x60>)
 80012f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80012fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001330 <std+0x64>)
 80012fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80012fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001334 <std+0x68>)
 8001300:	6224      	str	r4, [r4, #32]
 8001302:	429c      	cmp	r4, r3
 8001304:	d006      	beq.n	8001314 <std+0x48>
 8001306:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800130a:	4294      	cmp	r4, r2
 800130c:	d002      	beq.n	8001314 <std+0x48>
 800130e:	33d0      	adds	r3, #208	@ 0xd0
 8001310:	429c      	cmp	r4, r3
 8001312:	d105      	bne.n	8001320 <std+0x54>
 8001314:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800131c:	f000 b966 	b.w	80015ec <__retarget_lock_init_recursive>
 8001320:	bd10      	pop	{r4, pc}
 8001322:	bf00      	nop
 8001324:	08001475 	.word	0x08001475
 8001328:	08001497 	.word	0x08001497
 800132c:	080014cf 	.word	0x080014cf
 8001330:	080014f3 	.word	0x080014f3
 8001334:	20000298 	.word	0x20000298

08001338 <stdio_exit_handler>:
 8001338:	4a02      	ldr	r2, [pc, #8]	@ (8001344 <stdio_exit_handler+0xc>)
 800133a:	4903      	ldr	r1, [pc, #12]	@ (8001348 <stdio_exit_handler+0x10>)
 800133c:	4803      	ldr	r0, [pc, #12]	@ (800134c <stdio_exit_handler+0x14>)
 800133e:	f000 b869 	b.w	8001414 <_fwalk_sglue>
 8001342:	bf00      	nop
 8001344:	20000000 	.word	0x20000000
 8001348:	08001e8d 	.word	0x08001e8d
 800134c:	20000010 	.word	0x20000010

08001350 <cleanup_stdio>:
 8001350:	6841      	ldr	r1, [r0, #4]
 8001352:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <cleanup_stdio+0x34>)
 8001354:	4299      	cmp	r1, r3
 8001356:	b510      	push	{r4, lr}
 8001358:	4604      	mov	r4, r0
 800135a:	d001      	beq.n	8001360 <cleanup_stdio+0x10>
 800135c:	f000 fd96 	bl	8001e8c <_fflush_r>
 8001360:	68a1      	ldr	r1, [r4, #8]
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <cleanup_stdio+0x38>)
 8001364:	4299      	cmp	r1, r3
 8001366:	d002      	beq.n	800136e <cleanup_stdio+0x1e>
 8001368:	4620      	mov	r0, r4
 800136a:	f000 fd8f 	bl	8001e8c <_fflush_r>
 800136e:	68e1      	ldr	r1, [r4, #12]
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <cleanup_stdio+0x3c>)
 8001372:	4299      	cmp	r1, r3
 8001374:	d004      	beq.n	8001380 <cleanup_stdio+0x30>
 8001376:	4620      	mov	r0, r4
 8001378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800137c:	f000 bd86 	b.w	8001e8c <_fflush_r>
 8001380:	bd10      	pop	{r4, pc}
 8001382:	bf00      	nop
 8001384:	20000298 	.word	0x20000298
 8001388:	20000300 	.word	0x20000300
 800138c:	20000368 	.word	0x20000368

08001390 <global_stdio_init.part.0>:
 8001390:	b510      	push	{r4, lr}
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <global_stdio_init.part.0+0x30>)
 8001394:	4c0b      	ldr	r4, [pc, #44]	@ (80013c4 <global_stdio_init.part.0+0x34>)
 8001396:	4a0c      	ldr	r2, [pc, #48]	@ (80013c8 <global_stdio_init.part.0+0x38>)
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	4620      	mov	r0, r4
 800139c:	2200      	movs	r2, #0
 800139e:	2104      	movs	r1, #4
 80013a0:	f7ff ff94 	bl	80012cc <std>
 80013a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80013a8:	2201      	movs	r2, #1
 80013aa:	2109      	movs	r1, #9
 80013ac:	f7ff ff8e 	bl	80012cc <std>
 80013b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80013b4:	2202      	movs	r2, #2
 80013b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013ba:	2112      	movs	r1, #18
 80013bc:	f7ff bf86 	b.w	80012cc <std>
 80013c0:	200003d0 	.word	0x200003d0
 80013c4:	20000298 	.word	0x20000298
 80013c8:	08001339 	.word	0x08001339

080013cc <__sfp_lock_acquire>:
 80013cc:	4801      	ldr	r0, [pc, #4]	@ (80013d4 <__sfp_lock_acquire+0x8>)
 80013ce:	f000 b90e 	b.w	80015ee <__retarget_lock_acquire_recursive>
 80013d2:	bf00      	nop
 80013d4:	200003d9 	.word	0x200003d9

080013d8 <__sfp_lock_release>:
 80013d8:	4801      	ldr	r0, [pc, #4]	@ (80013e0 <__sfp_lock_release+0x8>)
 80013da:	f000 b909 	b.w	80015f0 <__retarget_lock_release_recursive>
 80013de:	bf00      	nop
 80013e0:	200003d9 	.word	0x200003d9

080013e4 <__sinit>:
 80013e4:	b510      	push	{r4, lr}
 80013e6:	4604      	mov	r4, r0
 80013e8:	f7ff fff0 	bl	80013cc <__sfp_lock_acquire>
 80013ec:	6a23      	ldr	r3, [r4, #32]
 80013ee:	b11b      	cbz	r3, 80013f8 <__sinit+0x14>
 80013f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013f4:	f7ff bff0 	b.w	80013d8 <__sfp_lock_release>
 80013f8:	4b04      	ldr	r3, [pc, #16]	@ (800140c <__sinit+0x28>)
 80013fa:	6223      	str	r3, [r4, #32]
 80013fc:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <__sinit+0x2c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f5      	bne.n	80013f0 <__sinit+0xc>
 8001404:	f7ff ffc4 	bl	8001390 <global_stdio_init.part.0>
 8001408:	e7f2      	b.n	80013f0 <__sinit+0xc>
 800140a:	bf00      	nop
 800140c:	08001351 	.word	0x08001351
 8001410:	200003d0 	.word	0x200003d0

08001414 <_fwalk_sglue>:
 8001414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001418:	4607      	mov	r7, r0
 800141a:	4688      	mov	r8, r1
 800141c:	4614      	mov	r4, r2
 800141e:	2600      	movs	r6, #0
 8001420:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001424:	f1b9 0901 	subs.w	r9, r9, #1
 8001428:	d505      	bpl.n	8001436 <_fwalk_sglue+0x22>
 800142a:	6824      	ldr	r4, [r4, #0]
 800142c:	2c00      	cmp	r4, #0
 800142e:	d1f7      	bne.n	8001420 <_fwalk_sglue+0xc>
 8001430:	4630      	mov	r0, r6
 8001432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001436:	89ab      	ldrh	r3, [r5, #12]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d907      	bls.n	800144c <_fwalk_sglue+0x38>
 800143c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001440:	3301      	adds	r3, #1
 8001442:	d003      	beq.n	800144c <_fwalk_sglue+0x38>
 8001444:	4629      	mov	r1, r5
 8001446:	4638      	mov	r0, r7
 8001448:	47c0      	blx	r8
 800144a:	4306      	orrs	r6, r0
 800144c:	3568      	adds	r5, #104	@ 0x68
 800144e:	e7e9      	b.n	8001424 <_fwalk_sglue+0x10>

08001450 <iprintf>:
 8001450:	b40f      	push	{r0, r1, r2, r3}
 8001452:	b507      	push	{r0, r1, r2, lr}
 8001454:	4906      	ldr	r1, [pc, #24]	@ (8001470 <iprintf+0x20>)
 8001456:	ab04      	add	r3, sp, #16
 8001458:	6808      	ldr	r0, [r1, #0]
 800145a:	f853 2b04 	ldr.w	r2, [r3], #4
 800145e:	6881      	ldr	r1, [r0, #8]
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	f000 f9e9 	bl	8001838 <_vfiprintf_r>
 8001466:	b003      	add	sp, #12
 8001468:	f85d eb04 	ldr.w	lr, [sp], #4
 800146c:	b004      	add	sp, #16
 800146e:	4770      	bx	lr
 8001470:	2000000c 	.word	0x2000000c

08001474 <__sread>:
 8001474:	b510      	push	{r4, lr}
 8001476:	460c      	mov	r4, r1
 8001478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800147c:	f000 f868 	bl	8001550 <_read_r>
 8001480:	2800      	cmp	r0, #0
 8001482:	bfab      	itete	ge
 8001484:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001486:	89a3      	ldrhlt	r3, [r4, #12]
 8001488:	181b      	addge	r3, r3, r0
 800148a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800148e:	bfac      	ite	ge
 8001490:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001492:	81a3      	strhlt	r3, [r4, #12]
 8001494:	bd10      	pop	{r4, pc}

08001496 <__swrite>:
 8001496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800149a:	461f      	mov	r7, r3
 800149c:	898b      	ldrh	r3, [r1, #12]
 800149e:	05db      	lsls	r3, r3, #23
 80014a0:	4605      	mov	r5, r0
 80014a2:	460c      	mov	r4, r1
 80014a4:	4616      	mov	r6, r2
 80014a6:	d505      	bpl.n	80014b4 <__swrite+0x1e>
 80014a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014ac:	2302      	movs	r3, #2
 80014ae:	2200      	movs	r2, #0
 80014b0:	f000 f83c 	bl	800152c <_lseek_r>
 80014b4:	89a3      	ldrh	r3, [r4, #12]
 80014b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014be:	81a3      	strh	r3, [r4, #12]
 80014c0:	4632      	mov	r2, r6
 80014c2:	463b      	mov	r3, r7
 80014c4:	4628      	mov	r0, r5
 80014c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80014ca:	f000 b853 	b.w	8001574 <_write_r>

080014ce <__sseek>:
 80014ce:	b510      	push	{r4, lr}
 80014d0:	460c      	mov	r4, r1
 80014d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014d6:	f000 f829 	bl	800152c <_lseek_r>
 80014da:	1c43      	adds	r3, r0, #1
 80014dc:	89a3      	ldrh	r3, [r4, #12]
 80014de:	bf15      	itete	ne
 80014e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80014e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80014e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80014ea:	81a3      	strheq	r3, [r4, #12]
 80014ec:	bf18      	it	ne
 80014ee:	81a3      	strhne	r3, [r4, #12]
 80014f0:	bd10      	pop	{r4, pc}

080014f2 <__sclose>:
 80014f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014f6:	f000 b809 	b.w	800150c <_close_r>

080014fa <memset>:
 80014fa:	4402      	add	r2, r0
 80014fc:	4603      	mov	r3, r0
 80014fe:	4293      	cmp	r3, r2
 8001500:	d100      	bne.n	8001504 <memset+0xa>
 8001502:	4770      	bx	lr
 8001504:	f803 1b01 	strb.w	r1, [r3], #1
 8001508:	e7f9      	b.n	80014fe <memset+0x4>
	...

0800150c <_close_r>:
 800150c:	b538      	push	{r3, r4, r5, lr}
 800150e:	4d06      	ldr	r5, [pc, #24]	@ (8001528 <_close_r+0x1c>)
 8001510:	2300      	movs	r3, #0
 8001512:	4604      	mov	r4, r0
 8001514:	4608      	mov	r0, r1
 8001516:	602b      	str	r3, [r5, #0]
 8001518:	f7ff fe43 	bl	80011a2 <_close>
 800151c:	1c43      	adds	r3, r0, #1
 800151e:	d102      	bne.n	8001526 <_close_r+0x1a>
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	b103      	cbz	r3, 8001526 <_close_r+0x1a>
 8001524:	6023      	str	r3, [r4, #0]
 8001526:	bd38      	pop	{r3, r4, r5, pc}
 8001528:	200003d4 	.word	0x200003d4

0800152c <_lseek_r>:
 800152c:	b538      	push	{r3, r4, r5, lr}
 800152e:	4d07      	ldr	r5, [pc, #28]	@ (800154c <_lseek_r+0x20>)
 8001530:	4604      	mov	r4, r0
 8001532:	4608      	mov	r0, r1
 8001534:	4611      	mov	r1, r2
 8001536:	2200      	movs	r2, #0
 8001538:	602a      	str	r2, [r5, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	f7ff fe58 	bl	80011f0 <_lseek>
 8001540:	1c43      	adds	r3, r0, #1
 8001542:	d102      	bne.n	800154a <_lseek_r+0x1e>
 8001544:	682b      	ldr	r3, [r5, #0]
 8001546:	b103      	cbz	r3, 800154a <_lseek_r+0x1e>
 8001548:	6023      	str	r3, [r4, #0]
 800154a:	bd38      	pop	{r3, r4, r5, pc}
 800154c:	200003d4 	.word	0x200003d4

08001550 <_read_r>:
 8001550:	b538      	push	{r3, r4, r5, lr}
 8001552:	4d07      	ldr	r5, [pc, #28]	@ (8001570 <_read_r+0x20>)
 8001554:	4604      	mov	r4, r0
 8001556:	4608      	mov	r0, r1
 8001558:	4611      	mov	r1, r2
 800155a:	2200      	movs	r2, #0
 800155c:	602a      	str	r2, [r5, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	f7ff fde6 	bl	8001130 <_read>
 8001564:	1c43      	adds	r3, r0, #1
 8001566:	d102      	bne.n	800156e <_read_r+0x1e>
 8001568:	682b      	ldr	r3, [r5, #0]
 800156a:	b103      	cbz	r3, 800156e <_read_r+0x1e>
 800156c:	6023      	str	r3, [r4, #0]
 800156e:	bd38      	pop	{r3, r4, r5, pc}
 8001570:	200003d4 	.word	0x200003d4

08001574 <_write_r>:
 8001574:	b538      	push	{r3, r4, r5, lr}
 8001576:	4d07      	ldr	r5, [pc, #28]	@ (8001594 <_write_r+0x20>)
 8001578:	4604      	mov	r4, r0
 800157a:	4608      	mov	r0, r1
 800157c:	4611      	mov	r1, r2
 800157e:	2200      	movs	r2, #0
 8001580:	602a      	str	r2, [r5, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	f7ff fdf1 	bl	800116a <_write>
 8001588:	1c43      	adds	r3, r0, #1
 800158a:	d102      	bne.n	8001592 <_write_r+0x1e>
 800158c:	682b      	ldr	r3, [r5, #0]
 800158e:	b103      	cbz	r3, 8001592 <_write_r+0x1e>
 8001590:	6023      	str	r3, [r4, #0]
 8001592:	bd38      	pop	{r3, r4, r5, pc}
 8001594:	200003d4 	.word	0x200003d4

08001598 <__errno>:
 8001598:	4b01      	ldr	r3, [pc, #4]	@ (80015a0 <__errno+0x8>)
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	2000000c 	.word	0x2000000c

080015a4 <__libc_init_array>:
 80015a4:	b570      	push	{r4, r5, r6, lr}
 80015a6:	4d0d      	ldr	r5, [pc, #52]	@ (80015dc <__libc_init_array+0x38>)
 80015a8:	4c0d      	ldr	r4, [pc, #52]	@ (80015e0 <__libc_init_array+0x3c>)
 80015aa:	1b64      	subs	r4, r4, r5
 80015ac:	10a4      	asrs	r4, r4, #2
 80015ae:	2600      	movs	r6, #0
 80015b0:	42a6      	cmp	r6, r4
 80015b2:	d109      	bne.n	80015c8 <__libc_init_array+0x24>
 80015b4:	4d0b      	ldr	r5, [pc, #44]	@ (80015e4 <__libc_init_array+0x40>)
 80015b6:	4c0c      	ldr	r4, [pc, #48]	@ (80015e8 <__libc_init_array+0x44>)
 80015b8:	f000 fdb8 	bl	800212c <_init>
 80015bc:	1b64      	subs	r4, r4, r5
 80015be:	10a4      	asrs	r4, r4, #2
 80015c0:	2600      	movs	r6, #0
 80015c2:	42a6      	cmp	r6, r4
 80015c4:	d105      	bne.n	80015d2 <__libc_init_array+0x2e>
 80015c6:	bd70      	pop	{r4, r5, r6, pc}
 80015c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80015cc:	4798      	blx	r3
 80015ce:	3601      	adds	r6, #1
 80015d0:	e7ee      	b.n	80015b0 <__libc_init_array+0xc>
 80015d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80015d6:	4798      	blx	r3
 80015d8:	3601      	adds	r6, #1
 80015da:	e7f2      	b.n	80015c2 <__libc_init_array+0x1e>
 80015dc:	08002190 	.word	0x08002190
 80015e0:	08002190 	.word	0x08002190
 80015e4:	08002190 	.word	0x08002190
 80015e8:	08002194 	.word	0x08002194

080015ec <__retarget_lock_init_recursive>:
 80015ec:	4770      	bx	lr

080015ee <__retarget_lock_acquire_recursive>:
 80015ee:	4770      	bx	lr

080015f0 <__retarget_lock_release_recursive>:
 80015f0:	4770      	bx	lr
	...

080015f4 <_free_r>:
 80015f4:	b538      	push	{r3, r4, r5, lr}
 80015f6:	4605      	mov	r5, r0
 80015f8:	2900      	cmp	r1, #0
 80015fa:	d041      	beq.n	8001680 <_free_r+0x8c>
 80015fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001600:	1f0c      	subs	r4, r1, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	bfb8      	it	lt
 8001606:	18e4      	addlt	r4, r4, r3
 8001608:	f000 f8e0 	bl	80017cc <__malloc_lock>
 800160c:	4a1d      	ldr	r2, [pc, #116]	@ (8001684 <_free_r+0x90>)
 800160e:	6813      	ldr	r3, [r2, #0]
 8001610:	b933      	cbnz	r3, 8001620 <_free_r+0x2c>
 8001612:	6063      	str	r3, [r4, #4]
 8001614:	6014      	str	r4, [r2, #0]
 8001616:	4628      	mov	r0, r5
 8001618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800161c:	f000 b8dc 	b.w	80017d8 <__malloc_unlock>
 8001620:	42a3      	cmp	r3, r4
 8001622:	d908      	bls.n	8001636 <_free_r+0x42>
 8001624:	6820      	ldr	r0, [r4, #0]
 8001626:	1821      	adds	r1, r4, r0
 8001628:	428b      	cmp	r3, r1
 800162a:	bf01      	itttt	eq
 800162c:	6819      	ldreq	r1, [r3, #0]
 800162e:	685b      	ldreq	r3, [r3, #4]
 8001630:	1809      	addeq	r1, r1, r0
 8001632:	6021      	streq	r1, [r4, #0]
 8001634:	e7ed      	b.n	8001612 <_free_r+0x1e>
 8001636:	461a      	mov	r2, r3
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	b10b      	cbz	r3, 8001640 <_free_r+0x4c>
 800163c:	42a3      	cmp	r3, r4
 800163e:	d9fa      	bls.n	8001636 <_free_r+0x42>
 8001640:	6811      	ldr	r1, [r2, #0]
 8001642:	1850      	adds	r0, r2, r1
 8001644:	42a0      	cmp	r0, r4
 8001646:	d10b      	bne.n	8001660 <_free_r+0x6c>
 8001648:	6820      	ldr	r0, [r4, #0]
 800164a:	4401      	add	r1, r0
 800164c:	1850      	adds	r0, r2, r1
 800164e:	4283      	cmp	r3, r0
 8001650:	6011      	str	r1, [r2, #0]
 8001652:	d1e0      	bne.n	8001616 <_free_r+0x22>
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	6053      	str	r3, [r2, #4]
 800165a:	4408      	add	r0, r1
 800165c:	6010      	str	r0, [r2, #0]
 800165e:	e7da      	b.n	8001616 <_free_r+0x22>
 8001660:	d902      	bls.n	8001668 <_free_r+0x74>
 8001662:	230c      	movs	r3, #12
 8001664:	602b      	str	r3, [r5, #0]
 8001666:	e7d6      	b.n	8001616 <_free_r+0x22>
 8001668:	6820      	ldr	r0, [r4, #0]
 800166a:	1821      	adds	r1, r4, r0
 800166c:	428b      	cmp	r3, r1
 800166e:	bf04      	itt	eq
 8001670:	6819      	ldreq	r1, [r3, #0]
 8001672:	685b      	ldreq	r3, [r3, #4]
 8001674:	6063      	str	r3, [r4, #4]
 8001676:	bf04      	itt	eq
 8001678:	1809      	addeq	r1, r1, r0
 800167a:	6021      	streq	r1, [r4, #0]
 800167c:	6054      	str	r4, [r2, #4]
 800167e:	e7ca      	b.n	8001616 <_free_r+0x22>
 8001680:	bd38      	pop	{r3, r4, r5, pc}
 8001682:	bf00      	nop
 8001684:	200003e0 	.word	0x200003e0

08001688 <sbrk_aligned>:
 8001688:	b570      	push	{r4, r5, r6, lr}
 800168a:	4e0f      	ldr	r6, [pc, #60]	@ (80016c8 <sbrk_aligned+0x40>)
 800168c:	460c      	mov	r4, r1
 800168e:	6831      	ldr	r1, [r6, #0]
 8001690:	4605      	mov	r5, r0
 8001692:	b911      	cbnz	r1, 800169a <sbrk_aligned+0x12>
 8001694:	f000 fcb6 	bl	8002004 <_sbrk_r>
 8001698:	6030      	str	r0, [r6, #0]
 800169a:	4621      	mov	r1, r4
 800169c:	4628      	mov	r0, r5
 800169e:	f000 fcb1 	bl	8002004 <_sbrk_r>
 80016a2:	1c43      	adds	r3, r0, #1
 80016a4:	d103      	bne.n	80016ae <sbrk_aligned+0x26>
 80016a6:	f04f 34ff 	mov.w	r4, #4294967295
 80016aa:	4620      	mov	r0, r4
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
 80016ae:	1cc4      	adds	r4, r0, #3
 80016b0:	f024 0403 	bic.w	r4, r4, #3
 80016b4:	42a0      	cmp	r0, r4
 80016b6:	d0f8      	beq.n	80016aa <sbrk_aligned+0x22>
 80016b8:	1a21      	subs	r1, r4, r0
 80016ba:	4628      	mov	r0, r5
 80016bc:	f000 fca2 	bl	8002004 <_sbrk_r>
 80016c0:	3001      	adds	r0, #1
 80016c2:	d1f2      	bne.n	80016aa <sbrk_aligned+0x22>
 80016c4:	e7ef      	b.n	80016a6 <sbrk_aligned+0x1e>
 80016c6:	bf00      	nop
 80016c8:	200003dc 	.word	0x200003dc

080016cc <_malloc_r>:
 80016cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016d0:	1ccd      	adds	r5, r1, #3
 80016d2:	f025 0503 	bic.w	r5, r5, #3
 80016d6:	3508      	adds	r5, #8
 80016d8:	2d0c      	cmp	r5, #12
 80016da:	bf38      	it	cc
 80016dc:	250c      	movcc	r5, #12
 80016de:	2d00      	cmp	r5, #0
 80016e0:	4606      	mov	r6, r0
 80016e2:	db01      	blt.n	80016e8 <_malloc_r+0x1c>
 80016e4:	42a9      	cmp	r1, r5
 80016e6:	d904      	bls.n	80016f2 <_malloc_r+0x26>
 80016e8:	230c      	movs	r3, #12
 80016ea:	6033      	str	r3, [r6, #0]
 80016ec:	2000      	movs	r0, #0
 80016ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80017c8 <_malloc_r+0xfc>
 80016f6:	f000 f869 	bl	80017cc <__malloc_lock>
 80016fa:	f8d8 3000 	ldr.w	r3, [r8]
 80016fe:	461c      	mov	r4, r3
 8001700:	bb44      	cbnz	r4, 8001754 <_malloc_r+0x88>
 8001702:	4629      	mov	r1, r5
 8001704:	4630      	mov	r0, r6
 8001706:	f7ff ffbf 	bl	8001688 <sbrk_aligned>
 800170a:	1c43      	adds	r3, r0, #1
 800170c:	4604      	mov	r4, r0
 800170e:	d158      	bne.n	80017c2 <_malloc_r+0xf6>
 8001710:	f8d8 4000 	ldr.w	r4, [r8]
 8001714:	4627      	mov	r7, r4
 8001716:	2f00      	cmp	r7, #0
 8001718:	d143      	bne.n	80017a2 <_malloc_r+0xd6>
 800171a:	2c00      	cmp	r4, #0
 800171c:	d04b      	beq.n	80017b6 <_malloc_r+0xea>
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	4639      	mov	r1, r7
 8001722:	4630      	mov	r0, r6
 8001724:	eb04 0903 	add.w	r9, r4, r3
 8001728:	f000 fc6c 	bl	8002004 <_sbrk_r>
 800172c:	4581      	cmp	r9, r0
 800172e:	d142      	bne.n	80017b6 <_malloc_r+0xea>
 8001730:	6821      	ldr	r1, [r4, #0]
 8001732:	1a6d      	subs	r5, r5, r1
 8001734:	4629      	mov	r1, r5
 8001736:	4630      	mov	r0, r6
 8001738:	f7ff ffa6 	bl	8001688 <sbrk_aligned>
 800173c:	3001      	adds	r0, #1
 800173e:	d03a      	beq.n	80017b6 <_malloc_r+0xea>
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	442b      	add	r3, r5
 8001744:	6023      	str	r3, [r4, #0]
 8001746:	f8d8 3000 	ldr.w	r3, [r8]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	bb62      	cbnz	r2, 80017a8 <_malloc_r+0xdc>
 800174e:	f8c8 7000 	str.w	r7, [r8]
 8001752:	e00f      	b.n	8001774 <_malloc_r+0xa8>
 8001754:	6822      	ldr	r2, [r4, #0]
 8001756:	1b52      	subs	r2, r2, r5
 8001758:	d420      	bmi.n	800179c <_malloc_r+0xd0>
 800175a:	2a0b      	cmp	r2, #11
 800175c:	d917      	bls.n	800178e <_malloc_r+0xc2>
 800175e:	1961      	adds	r1, r4, r5
 8001760:	42a3      	cmp	r3, r4
 8001762:	6025      	str	r5, [r4, #0]
 8001764:	bf18      	it	ne
 8001766:	6059      	strne	r1, [r3, #4]
 8001768:	6863      	ldr	r3, [r4, #4]
 800176a:	bf08      	it	eq
 800176c:	f8c8 1000 	streq.w	r1, [r8]
 8001770:	5162      	str	r2, [r4, r5]
 8001772:	604b      	str	r3, [r1, #4]
 8001774:	4630      	mov	r0, r6
 8001776:	f000 f82f 	bl	80017d8 <__malloc_unlock>
 800177a:	f104 000b 	add.w	r0, r4, #11
 800177e:	1d23      	adds	r3, r4, #4
 8001780:	f020 0007 	bic.w	r0, r0, #7
 8001784:	1ac2      	subs	r2, r0, r3
 8001786:	bf1c      	itt	ne
 8001788:	1a1b      	subne	r3, r3, r0
 800178a:	50a3      	strne	r3, [r4, r2]
 800178c:	e7af      	b.n	80016ee <_malloc_r+0x22>
 800178e:	6862      	ldr	r2, [r4, #4]
 8001790:	42a3      	cmp	r3, r4
 8001792:	bf0c      	ite	eq
 8001794:	f8c8 2000 	streq.w	r2, [r8]
 8001798:	605a      	strne	r2, [r3, #4]
 800179a:	e7eb      	b.n	8001774 <_malloc_r+0xa8>
 800179c:	4623      	mov	r3, r4
 800179e:	6864      	ldr	r4, [r4, #4]
 80017a0:	e7ae      	b.n	8001700 <_malloc_r+0x34>
 80017a2:	463c      	mov	r4, r7
 80017a4:	687f      	ldr	r7, [r7, #4]
 80017a6:	e7b6      	b.n	8001716 <_malloc_r+0x4a>
 80017a8:	461a      	mov	r2, r3
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	42a3      	cmp	r3, r4
 80017ae:	d1fb      	bne.n	80017a8 <_malloc_r+0xdc>
 80017b0:	2300      	movs	r3, #0
 80017b2:	6053      	str	r3, [r2, #4]
 80017b4:	e7de      	b.n	8001774 <_malloc_r+0xa8>
 80017b6:	230c      	movs	r3, #12
 80017b8:	6033      	str	r3, [r6, #0]
 80017ba:	4630      	mov	r0, r6
 80017bc:	f000 f80c 	bl	80017d8 <__malloc_unlock>
 80017c0:	e794      	b.n	80016ec <_malloc_r+0x20>
 80017c2:	6005      	str	r5, [r0, #0]
 80017c4:	e7d6      	b.n	8001774 <_malloc_r+0xa8>
 80017c6:	bf00      	nop
 80017c8:	200003e0 	.word	0x200003e0

080017cc <__malloc_lock>:
 80017cc:	4801      	ldr	r0, [pc, #4]	@ (80017d4 <__malloc_lock+0x8>)
 80017ce:	f7ff bf0e 	b.w	80015ee <__retarget_lock_acquire_recursive>
 80017d2:	bf00      	nop
 80017d4:	200003d8 	.word	0x200003d8

080017d8 <__malloc_unlock>:
 80017d8:	4801      	ldr	r0, [pc, #4]	@ (80017e0 <__malloc_unlock+0x8>)
 80017da:	f7ff bf09 	b.w	80015f0 <__retarget_lock_release_recursive>
 80017de:	bf00      	nop
 80017e0:	200003d8 	.word	0x200003d8

080017e4 <__sfputc_r>:
 80017e4:	6893      	ldr	r3, [r2, #8]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	b410      	push	{r4}
 80017ec:	6093      	str	r3, [r2, #8]
 80017ee:	da08      	bge.n	8001802 <__sfputc_r+0x1e>
 80017f0:	6994      	ldr	r4, [r2, #24]
 80017f2:	42a3      	cmp	r3, r4
 80017f4:	db01      	blt.n	80017fa <__sfputc_r+0x16>
 80017f6:	290a      	cmp	r1, #10
 80017f8:	d103      	bne.n	8001802 <__sfputc_r+0x1e>
 80017fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017fe:	f000 bb6d 	b.w	8001edc <__swbuf_r>
 8001802:	6813      	ldr	r3, [r2, #0]
 8001804:	1c58      	adds	r0, r3, #1
 8001806:	6010      	str	r0, [r2, #0]
 8001808:	7019      	strb	r1, [r3, #0]
 800180a:	4608      	mov	r0, r1
 800180c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001810:	4770      	bx	lr

08001812 <__sfputs_r>:
 8001812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001814:	4606      	mov	r6, r0
 8001816:	460f      	mov	r7, r1
 8001818:	4614      	mov	r4, r2
 800181a:	18d5      	adds	r5, r2, r3
 800181c:	42ac      	cmp	r4, r5
 800181e:	d101      	bne.n	8001824 <__sfputs_r+0x12>
 8001820:	2000      	movs	r0, #0
 8001822:	e007      	b.n	8001834 <__sfputs_r+0x22>
 8001824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001828:	463a      	mov	r2, r7
 800182a:	4630      	mov	r0, r6
 800182c:	f7ff ffda 	bl	80017e4 <__sfputc_r>
 8001830:	1c43      	adds	r3, r0, #1
 8001832:	d1f3      	bne.n	800181c <__sfputs_r+0xa>
 8001834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001838 <_vfiprintf_r>:
 8001838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800183c:	460d      	mov	r5, r1
 800183e:	b09d      	sub	sp, #116	@ 0x74
 8001840:	4614      	mov	r4, r2
 8001842:	4698      	mov	r8, r3
 8001844:	4606      	mov	r6, r0
 8001846:	b118      	cbz	r0, 8001850 <_vfiprintf_r+0x18>
 8001848:	6a03      	ldr	r3, [r0, #32]
 800184a:	b90b      	cbnz	r3, 8001850 <_vfiprintf_r+0x18>
 800184c:	f7ff fdca 	bl	80013e4 <__sinit>
 8001850:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001852:	07d9      	lsls	r1, r3, #31
 8001854:	d405      	bmi.n	8001862 <_vfiprintf_r+0x2a>
 8001856:	89ab      	ldrh	r3, [r5, #12]
 8001858:	059a      	lsls	r2, r3, #22
 800185a:	d402      	bmi.n	8001862 <_vfiprintf_r+0x2a>
 800185c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800185e:	f7ff fec6 	bl	80015ee <__retarget_lock_acquire_recursive>
 8001862:	89ab      	ldrh	r3, [r5, #12]
 8001864:	071b      	lsls	r3, r3, #28
 8001866:	d501      	bpl.n	800186c <_vfiprintf_r+0x34>
 8001868:	692b      	ldr	r3, [r5, #16]
 800186a:	b99b      	cbnz	r3, 8001894 <_vfiprintf_r+0x5c>
 800186c:	4629      	mov	r1, r5
 800186e:	4630      	mov	r0, r6
 8001870:	f000 fb72 	bl	8001f58 <__swsetup_r>
 8001874:	b170      	cbz	r0, 8001894 <_vfiprintf_r+0x5c>
 8001876:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001878:	07dc      	lsls	r4, r3, #31
 800187a:	d504      	bpl.n	8001886 <_vfiprintf_r+0x4e>
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	b01d      	add	sp, #116	@ 0x74
 8001882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001886:	89ab      	ldrh	r3, [r5, #12]
 8001888:	0598      	lsls	r0, r3, #22
 800188a:	d4f7      	bmi.n	800187c <_vfiprintf_r+0x44>
 800188c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800188e:	f7ff feaf 	bl	80015f0 <__retarget_lock_release_recursive>
 8001892:	e7f3      	b.n	800187c <_vfiprintf_r+0x44>
 8001894:	2300      	movs	r3, #0
 8001896:	9309      	str	r3, [sp, #36]	@ 0x24
 8001898:	2320      	movs	r3, #32
 800189a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800189e:	f8cd 800c 	str.w	r8, [sp, #12]
 80018a2:	2330      	movs	r3, #48	@ 0x30
 80018a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001a54 <_vfiprintf_r+0x21c>
 80018a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80018ac:	f04f 0901 	mov.w	r9, #1
 80018b0:	4623      	mov	r3, r4
 80018b2:	469a      	mov	sl, r3
 80018b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018b8:	b10a      	cbz	r2, 80018be <_vfiprintf_r+0x86>
 80018ba:	2a25      	cmp	r2, #37	@ 0x25
 80018bc:	d1f9      	bne.n	80018b2 <_vfiprintf_r+0x7a>
 80018be:	ebba 0b04 	subs.w	fp, sl, r4
 80018c2:	d00b      	beq.n	80018dc <_vfiprintf_r+0xa4>
 80018c4:	465b      	mov	r3, fp
 80018c6:	4622      	mov	r2, r4
 80018c8:	4629      	mov	r1, r5
 80018ca:	4630      	mov	r0, r6
 80018cc:	f7ff ffa1 	bl	8001812 <__sfputs_r>
 80018d0:	3001      	adds	r0, #1
 80018d2:	f000 80a7 	beq.w	8001a24 <_vfiprintf_r+0x1ec>
 80018d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80018d8:	445a      	add	r2, fp
 80018da:	9209      	str	r2, [sp, #36]	@ 0x24
 80018dc:	f89a 3000 	ldrb.w	r3, [sl]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 809f 	beq.w	8001a24 <_vfiprintf_r+0x1ec>
 80018e6:	2300      	movs	r3, #0
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018f0:	f10a 0a01 	add.w	sl, sl, #1
 80018f4:	9304      	str	r3, [sp, #16]
 80018f6:	9307      	str	r3, [sp, #28]
 80018f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80018fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80018fe:	4654      	mov	r4, sl
 8001900:	2205      	movs	r2, #5
 8001902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001906:	4853      	ldr	r0, [pc, #332]	@ (8001a54 <_vfiprintf_r+0x21c>)
 8001908:	f7fe fc62 	bl	80001d0 <memchr>
 800190c:	9a04      	ldr	r2, [sp, #16]
 800190e:	b9d8      	cbnz	r0, 8001948 <_vfiprintf_r+0x110>
 8001910:	06d1      	lsls	r1, r2, #27
 8001912:	bf44      	itt	mi
 8001914:	2320      	movmi	r3, #32
 8001916:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800191a:	0713      	lsls	r3, r2, #28
 800191c:	bf44      	itt	mi
 800191e:	232b      	movmi	r3, #43	@ 0x2b
 8001920:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001924:	f89a 3000 	ldrb.w	r3, [sl]
 8001928:	2b2a      	cmp	r3, #42	@ 0x2a
 800192a:	d015      	beq.n	8001958 <_vfiprintf_r+0x120>
 800192c:	9a07      	ldr	r2, [sp, #28]
 800192e:	4654      	mov	r4, sl
 8001930:	2000      	movs	r0, #0
 8001932:	f04f 0c0a 	mov.w	ip, #10
 8001936:	4621      	mov	r1, r4
 8001938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800193c:	3b30      	subs	r3, #48	@ 0x30
 800193e:	2b09      	cmp	r3, #9
 8001940:	d94b      	bls.n	80019da <_vfiprintf_r+0x1a2>
 8001942:	b1b0      	cbz	r0, 8001972 <_vfiprintf_r+0x13a>
 8001944:	9207      	str	r2, [sp, #28]
 8001946:	e014      	b.n	8001972 <_vfiprintf_r+0x13a>
 8001948:	eba0 0308 	sub.w	r3, r0, r8
 800194c:	fa09 f303 	lsl.w	r3, r9, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	9304      	str	r3, [sp, #16]
 8001954:	46a2      	mov	sl, r4
 8001956:	e7d2      	b.n	80018fe <_vfiprintf_r+0xc6>
 8001958:	9b03      	ldr	r3, [sp, #12]
 800195a:	1d19      	adds	r1, r3, #4
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	9103      	str	r1, [sp, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	bfbb      	ittet	lt
 8001964:	425b      	neglt	r3, r3
 8001966:	f042 0202 	orrlt.w	r2, r2, #2
 800196a:	9307      	strge	r3, [sp, #28]
 800196c:	9307      	strlt	r3, [sp, #28]
 800196e:	bfb8      	it	lt
 8001970:	9204      	strlt	r2, [sp, #16]
 8001972:	7823      	ldrb	r3, [r4, #0]
 8001974:	2b2e      	cmp	r3, #46	@ 0x2e
 8001976:	d10a      	bne.n	800198e <_vfiprintf_r+0x156>
 8001978:	7863      	ldrb	r3, [r4, #1]
 800197a:	2b2a      	cmp	r3, #42	@ 0x2a
 800197c:	d132      	bne.n	80019e4 <_vfiprintf_r+0x1ac>
 800197e:	9b03      	ldr	r3, [sp, #12]
 8001980:	1d1a      	adds	r2, r3, #4
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	9203      	str	r2, [sp, #12]
 8001986:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800198a:	3402      	adds	r4, #2
 800198c:	9305      	str	r3, [sp, #20]
 800198e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001a64 <_vfiprintf_r+0x22c>
 8001992:	7821      	ldrb	r1, [r4, #0]
 8001994:	2203      	movs	r2, #3
 8001996:	4650      	mov	r0, sl
 8001998:	f7fe fc1a 	bl	80001d0 <memchr>
 800199c:	b138      	cbz	r0, 80019ae <_vfiprintf_r+0x176>
 800199e:	9b04      	ldr	r3, [sp, #16]
 80019a0:	eba0 000a 	sub.w	r0, r0, sl
 80019a4:	2240      	movs	r2, #64	@ 0x40
 80019a6:	4082      	lsls	r2, r0
 80019a8:	4313      	orrs	r3, r2
 80019aa:	3401      	adds	r4, #1
 80019ac:	9304      	str	r3, [sp, #16]
 80019ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019b2:	4829      	ldr	r0, [pc, #164]	@ (8001a58 <_vfiprintf_r+0x220>)
 80019b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80019b8:	2206      	movs	r2, #6
 80019ba:	f7fe fc09 	bl	80001d0 <memchr>
 80019be:	2800      	cmp	r0, #0
 80019c0:	d03f      	beq.n	8001a42 <_vfiprintf_r+0x20a>
 80019c2:	4b26      	ldr	r3, [pc, #152]	@ (8001a5c <_vfiprintf_r+0x224>)
 80019c4:	bb1b      	cbnz	r3, 8001a0e <_vfiprintf_r+0x1d6>
 80019c6:	9b03      	ldr	r3, [sp, #12]
 80019c8:	3307      	adds	r3, #7
 80019ca:	f023 0307 	bic.w	r3, r3, #7
 80019ce:	3308      	adds	r3, #8
 80019d0:	9303      	str	r3, [sp, #12]
 80019d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80019d4:	443b      	add	r3, r7
 80019d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80019d8:	e76a      	b.n	80018b0 <_vfiprintf_r+0x78>
 80019da:	fb0c 3202 	mla	r2, ip, r2, r3
 80019de:	460c      	mov	r4, r1
 80019e0:	2001      	movs	r0, #1
 80019e2:	e7a8      	b.n	8001936 <_vfiprintf_r+0xfe>
 80019e4:	2300      	movs	r3, #0
 80019e6:	3401      	adds	r4, #1
 80019e8:	9305      	str	r3, [sp, #20]
 80019ea:	4619      	mov	r1, r3
 80019ec:	f04f 0c0a 	mov.w	ip, #10
 80019f0:	4620      	mov	r0, r4
 80019f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019f6:	3a30      	subs	r2, #48	@ 0x30
 80019f8:	2a09      	cmp	r2, #9
 80019fa:	d903      	bls.n	8001a04 <_vfiprintf_r+0x1cc>
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0c6      	beq.n	800198e <_vfiprintf_r+0x156>
 8001a00:	9105      	str	r1, [sp, #20]
 8001a02:	e7c4      	b.n	800198e <_vfiprintf_r+0x156>
 8001a04:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a08:	4604      	mov	r4, r0
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e7f0      	b.n	80019f0 <_vfiprintf_r+0x1b8>
 8001a0e:	ab03      	add	r3, sp, #12
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	462a      	mov	r2, r5
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <_vfiprintf_r+0x228>)
 8001a16:	a904      	add	r1, sp, #16
 8001a18:	4630      	mov	r0, r6
 8001a1a:	f3af 8000 	nop.w
 8001a1e:	4607      	mov	r7, r0
 8001a20:	1c78      	adds	r0, r7, #1
 8001a22:	d1d6      	bne.n	80019d2 <_vfiprintf_r+0x19a>
 8001a24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001a26:	07d9      	lsls	r1, r3, #31
 8001a28:	d405      	bmi.n	8001a36 <_vfiprintf_r+0x1fe>
 8001a2a:	89ab      	ldrh	r3, [r5, #12]
 8001a2c:	059a      	lsls	r2, r3, #22
 8001a2e:	d402      	bmi.n	8001a36 <_vfiprintf_r+0x1fe>
 8001a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001a32:	f7ff fddd 	bl	80015f0 <__retarget_lock_release_recursive>
 8001a36:	89ab      	ldrh	r3, [r5, #12]
 8001a38:	065b      	lsls	r3, r3, #25
 8001a3a:	f53f af1f 	bmi.w	800187c <_vfiprintf_r+0x44>
 8001a3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001a40:	e71e      	b.n	8001880 <_vfiprintf_r+0x48>
 8001a42:	ab03      	add	r3, sp, #12
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	462a      	mov	r2, r5
 8001a48:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <_vfiprintf_r+0x228>)
 8001a4a:	a904      	add	r1, sp, #16
 8001a4c:	4630      	mov	r0, r6
 8001a4e:	f000 f879 	bl	8001b44 <_printf_i>
 8001a52:	e7e4      	b.n	8001a1e <_vfiprintf_r+0x1e6>
 8001a54:	08002154 	.word	0x08002154
 8001a58:	0800215e 	.word	0x0800215e
 8001a5c:	00000000 	.word	0x00000000
 8001a60:	08001813 	.word	0x08001813
 8001a64:	0800215a 	.word	0x0800215a

08001a68 <_printf_common>:
 8001a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a6c:	4616      	mov	r6, r2
 8001a6e:	4698      	mov	r8, r3
 8001a70:	688a      	ldr	r2, [r1, #8]
 8001a72:	690b      	ldr	r3, [r1, #16]
 8001a74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	bfb8      	it	lt
 8001a7c:	4613      	movlt	r3, r2
 8001a7e:	6033      	str	r3, [r6, #0]
 8001a80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001a84:	4607      	mov	r7, r0
 8001a86:	460c      	mov	r4, r1
 8001a88:	b10a      	cbz	r2, 8001a8e <_printf_common+0x26>
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	6033      	str	r3, [r6, #0]
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	0699      	lsls	r1, r3, #26
 8001a92:	bf42      	ittt	mi
 8001a94:	6833      	ldrmi	r3, [r6, #0]
 8001a96:	3302      	addmi	r3, #2
 8001a98:	6033      	strmi	r3, [r6, #0]
 8001a9a:	6825      	ldr	r5, [r4, #0]
 8001a9c:	f015 0506 	ands.w	r5, r5, #6
 8001aa0:	d106      	bne.n	8001ab0 <_printf_common+0x48>
 8001aa2:	f104 0a19 	add.w	sl, r4, #25
 8001aa6:	68e3      	ldr	r3, [r4, #12]
 8001aa8:	6832      	ldr	r2, [r6, #0]
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	42ab      	cmp	r3, r5
 8001aae:	dc26      	bgt.n	8001afe <_printf_common+0x96>
 8001ab0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001ab4:	6822      	ldr	r2, [r4, #0]
 8001ab6:	3b00      	subs	r3, #0
 8001ab8:	bf18      	it	ne
 8001aba:	2301      	movne	r3, #1
 8001abc:	0692      	lsls	r2, r2, #26
 8001abe:	d42b      	bmi.n	8001b18 <_printf_common+0xb0>
 8001ac0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001ac4:	4641      	mov	r1, r8
 8001ac6:	4638      	mov	r0, r7
 8001ac8:	47c8      	blx	r9
 8001aca:	3001      	adds	r0, #1
 8001acc:	d01e      	beq.n	8001b0c <_printf_common+0xa4>
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	6922      	ldr	r2, [r4, #16]
 8001ad2:	f003 0306 	and.w	r3, r3, #6
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf02      	ittt	eq
 8001ada:	68e5      	ldreq	r5, [r4, #12]
 8001adc:	6833      	ldreq	r3, [r6, #0]
 8001ade:	1aed      	subeq	r5, r5, r3
 8001ae0:	68a3      	ldr	r3, [r4, #8]
 8001ae2:	bf0c      	ite	eq
 8001ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ae8:	2500      	movne	r5, #0
 8001aea:	4293      	cmp	r3, r2
 8001aec:	bfc4      	itt	gt
 8001aee:	1a9b      	subgt	r3, r3, r2
 8001af0:	18ed      	addgt	r5, r5, r3
 8001af2:	2600      	movs	r6, #0
 8001af4:	341a      	adds	r4, #26
 8001af6:	42b5      	cmp	r5, r6
 8001af8:	d11a      	bne.n	8001b30 <_printf_common+0xc8>
 8001afa:	2000      	movs	r0, #0
 8001afc:	e008      	b.n	8001b10 <_printf_common+0xa8>
 8001afe:	2301      	movs	r3, #1
 8001b00:	4652      	mov	r2, sl
 8001b02:	4641      	mov	r1, r8
 8001b04:	4638      	mov	r0, r7
 8001b06:	47c8      	blx	r9
 8001b08:	3001      	adds	r0, #1
 8001b0a:	d103      	bne.n	8001b14 <_printf_common+0xac>
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b14:	3501      	adds	r5, #1
 8001b16:	e7c6      	b.n	8001aa6 <_printf_common+0x3e>
 8001b18:	18e1      	adds	r1, r4, r3
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	2030      	movs	r0, #48	@ 0x30
 8001b1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001b22:	4422      	add	r2, r4
 8001b24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001b28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	e7c7      	b.n	8001ac0 <_printf_common+0x58>
 8001b30:	2301      	movs	r3, #1
 8001b32:	4622      	mov	r2, r4
 8001b34:	4641      	mov	r1, r8
 8001b36:	4638      	mov	r0, r7
 8001b38:	47c8      	blx	r9
 8001b3a:	3001      	adds	r0, #1
 8001b3c:	d0e6      	beq.n	8001b0c <_printf_common+0xa4>
 8001b3e:	3601      	adds	r6, #1
 8001b40:	e7d9      	b.n	8001af6 <_printf_common+0x8e>
	...

08001b44 <_printf_i>:
 8001b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b48:	7e0f      	ldrb	r7, [r1, #24]
 8001b4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001b4c:	2f78      	cmp	r7, #120	@ 0x78
 8001b4e:	4691      	mov	r9, r2
 8001b50:	4680      	mov	r8, r0
 8001b52:	460c      	mov	r4, r1
 8001b54:	469a      	mov	sl, r3
 8001b56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001b5a:	d807      	bhi.n	8001b6c <_printf_i+0x28>
 8001b5c:	2f62      	cmp	r7, #98	@ 0x62
 8001b5e:	d80a      	bhi.n	8001b76 <_printf_i+0x32>
 8001b60:	2f00      	cmp	r7, #0
 8001b62:	f000 80d2 	beq.w	8001d0a <_printf_i+0x1c6>
 8001b66:	2f58      	cmp	r7, #88	@ 0x58
 8001b68:	f000 80b9 	beq.w	8001cde <_printf_i+0x19a>
 8001b6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001b74:	e03a      	b.n	8001bec <_printf_i+0xa8>
 8001b76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001b7a:	2b15      	cmp	r3, #21
 8001b7c:	d8f6      	bhi.n	8001b6c <_printf_i+0x28>
 8001b7e:	a101      	add	r1, pc, #4	@ (adr r1, 8001b84 <_printf_i+0x40>)
 8001b80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b84:	08001bdd 	.word	0x08001bdd
 8001b88:	08001bf1 	.word	0x08001bf1
 8001b8c:	08001b6d 	.word	0x08001b6d
 8001b90:	08001b6d 	.word	0x08001b6d
 8001b94:	08001b6d 	.word	0x08001b6d
 8001b98:	08001b6d 	.word	0x08001b6d
 8001b9c:	08001bf1 	.word	0x08001bf1
 8001ba0:	08001b6d 	.word	0x08001b6d
 8001ba4:	08001b6d 	.word	0x08001b6d
 8001ba8:	08001b6d 	.word	0x08001b6d
 8001bac:	08001b6d 	.word	0x08001b6d
 8001bb0:	08001cf1 	.word	0x08001cf1
 8001bb4:	08001c1b 	.word	0x08001c1b
 8001bb8:	08001cab 	.word	0x08001cab
 8001bbc:	08001b6d 	.word	0x08001b6d
 8001bc0:	08001b6d 	.word	0x08001b6d
 8001bc4:	08001d13 	.word	0x08001d13
 8001bc8:	08001b6d 	.word	0x08001b6d
 8001bcc:	08001c1b 	.word	0x08001c1b
 8001bd0:	08001b6d 	.word	0x08001b6d
 8001bd4:	08001b6d 	.word	0x08001b6d
 8001bd8:	08001cb3 	.word	0x08001cb3
 8001bdc:	6833      	ldr	r3, [r6, #0]
 8001bde:	1d1a      	adds	r2, r3, #4
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6032      	str	r2, [r6, #0]
 8001be4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001be8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001bec:	2301      	movs	r3, #1
 8001bee:	e09d      	b.n	8001d2c <_printf_i+0x1e8>
 8001bf0:	6833      	ldr	r3, [r6, #0]
 8001bf2:	6820      	ldr	r0, [r4, #0]
 8001bf4:	1d19      	adds	r1, r3, #4
 8001bf6:	6031      	str	r1, [r6, #0]
 8001bf8:	0606      	lsls	r6, r0, #24
 8001bfa:	d501      	bpl.n	8001c00 <_printf_i+0xbc>
 8001bfc:	681d      	ldr	r5, [r3, #0]
 8001bfe:	e003      	b.n	8001c08 <_printf_i+0xc4>
 8001c00:	0645      	lsls	r5, r0, #25
 8001c02:	d5fb      	bpl.n	8001bfc <_printf_i+0xb8>
 8001c04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001c08:	2d00      	cmp	r5, #0
 8001c0a:	da03      	bge.n	8001c14 <_printf_i+0xd0>
 8001c0c:	232d      	movs	r3, #45	@ 0x2d
 8001c0e:	426d      	negs	r5, r5
 8001c10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c14:	4859      	ldr	r0, [pc, #356]	@ (8001d7c <_printf_i+0x238>)
 8001c16:	230a      	movs	r3, #10
 8001c18:	e011      	b.n	8001c3e <_printf_i+0xfa>
 8001c1a:	6821      	ldr	r1, [r4, #0]
 8001c1c:	6833      	ldr	r3, [r6, #0]
 8001c1e:	0608      	lsls	r0, r1, #24
 8001c20:	f853 5b04 	ldr.w	r5, [r3], #4
 8001c24:	d402      	bmi.n	8001c2c <_printf_i+0xe8>
 8001c26:	0649      	lsls	r1, r1, #25
 8001c28:	bf48      	it	mi
 8001c2a:	b2ad      	uxthmi	r5, r5
 8001c2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8001c2e:	4853      	ldr	r0, [pc, #332]	@ (8001d7c <_printf_i+0x238>)
 8001c30:	6033      	str	r3, [r6, #0]
 8001c32:	bf14      	ite	ne
 8001c34:	230a      	movne	r3, #10
 8001c36:	2308      	moveq	r3, #8
 8001c38:	2100      	movs	r1, #0
 8001c3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001c3e:	6866      	ldr	r6, [r4, #4]
 8001c40:	60a6      	str	r6, [r4, #8]
 8001c42:	2e00      	cmp	r6, #0
 8001c44:	bfa2      	ittt	ge
 8001c46:	6821      	ldrge	r1, [r4, #0]
 8001c48:	f021 0104 	bicge.w	r1, r1, #4
 8001c4c:	6021      	strge	r1, [r4, #0]
 8001c4e:	b90d      	cbnz	r5, 8001c54 <_printf_i+0x110>
 8001c50:	2e00      	cmp	r6, #0
 8001c52:	d04b      	beq.n	8001cec <_printf_i+0x1a8>
 8001c54:	4616      	mov	r6, r2
 8001c56:	fbb5 f1f3 	udiv	r1, r5, r3
 8001c5a:	fb03 5711 	mls	r7, r3, r1, r5
 8001c5e:	5dc7      	ldrb	r7, [r0, r7]
 8001c60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001c64:	462f      	mov	r7, r5
 8001c66:	42bb      	cmp	r3, r7
 8001c68:	460d      	mov	r5, r1
 8001c6a:	d9f4      	bls.n	8001c56 <_printf_i+0x112>
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d10b      	bne.n	8001c88 <_printf_i+0x144>
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	07df      	lsls	r7, r3, #31
 8001c74:	d508      	bpl.n	8001c88 <_printf_i+0x144>
 8001c76:	6923      	ldr	r3, [r4, #16]
 8001c78:	6861      	ldr	r1, [r4, #4]
 8001c7a:	4299      	cmp	r1, r3
 8001c7c:	bfde      	ittt	le
 8001c7e:	2330      	movle	r3, #48	@ 0x30
 8001c80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001c84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001c88:	1b92      	subs	r2, r2, r6
 8001c8a:	6122      	str	r2, [r4, #16]
 8001c8c:	f8cd a000 	str.w	sl, [sp]
 8001c90:	464b      	mov	r3, r9
 8001c92:	aa03      	add	r2, sp, #12
 8001c94:	4621      	mov	r1, r4
 8001c96:	4640      	mov	r0, r8
 8001c98:	f7ff fee6 	bl	8001a68 <_printf_common>
 8001c9c:	3001      	adds	r0, #1
 8001c9e:	d14a      	bne.n	8001d36 <_printf_i+0x1f2>
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	b004      	add	sp, #16
 8001ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	f043 0320 	orr.w	r3, r3, #32
 8001cb0:	6023      	str	r3, [r4, #0]
 8001cb2:	4833      	ldr	r0, [pc, #204]	@ (8001d80 <_printf_i+0x23c>)
 8001cb4:	2778      	movs	r7, #120	@ 0x78
 8001cb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001cba:	6823      	ldr	r3, [r4, #0]
 8001cbc:	6831      	ldr	r1, [r6, #0]
 8001cbe:	061f      	lsls	r7, r3, #24
 8001cc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8001cc4:	d402      	bmi.n	8001ccc <_printf_i+0x188>
 8001cc6:	065f      	lsls	r7, r3, #25
 8001cc8:	bf48      	it	mi
 8001cca:	b2ad      	uxthmi	r5, r5
 8001ccc:	6031      	str	r1, [r6, #0]
 8001cce:	07d9      	lsls	r1, r3, #31
 8001cd0:	bf44      	itt	mi
 8001cd2:	f043 0320 	orrmi.w	r3, r3, #32
 8001cd6:	6023      	strmi	r3, [r4, #0]
 8001cd8:	b11d      	cbz	r5, 8001ce2 <_printf_i+0x19e>
 8001cda:	2310      	movs	r3, #16
 8001cdc:	e7ac      	b.n	8001c38 <_printf_i+0xf4>
 8001cde:	4827      	ldr	r0, [pc, #156]	@ (8001d7c <_printf_i+0x238>)
 8001ce0:	e7e9      	b.n	8001cb6 <_printf_i+0x172>
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	f023 0320 	bic.w	r3, r3, #32
 8001ce8:	6023      	str	r3, [r4, #0]
 8001cea:	e7f6      	b.n	8001cda <_printf_i+0x196>
 8001cec:	4616      	mov	r6, r2
 8001cee:	e7bd      	b.n	8001c6c <_printf_i+0x128>
 8001cf0:	6833      	ldr	r3, [r6, #0]
 8001cf2:	6825      	ldr	r5, [r4, #0]
 8001cf4:	6961      	ldr	r1, [r4, #20]
 8001cf6:	1d18      	adds	r0, r3, #4
 8001cf8:	6030      	str	r0, [r6, #0]
 8001cfa:	062e      	lsls	r6, r5, #24
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	d501      	bpl.n	8001d04 <_printf_i+0x1c0>
 8001d00:	6019      	str	r1, [r3, #0]
 8001d02:	e002      	b.n	8001d0a <_printf_i+0x1c6>
 8001d04:	0668      	lsls	r0, r5, #25
 8001d06:	d5fb      	bpl.n	8001d00 <_printf_i+0x1bc>
 8001d08:	8019      	strh	r1, [r3, #0]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	6123      	str	r3, [r4, #16]
 8001d0e:	4616      	mov	r6, r2
 8001d10:	e7bc      	b.n	8001c8c <_printf_i+0x148>
 8001d12:	6833      	ldr	r3, [r6, #0]
 8001d14:	1d1a      	adds	r2, r3, #4
 8001d16:	6032      	str	r2, [r6, #0]
 8001d18:	681e      	ldr	r6, [r3, #0]
 8001d1a:	6862      	ldr	r2, [r4, #4]
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4630      	mov	r0, r6
 8001d20:	f7fe fa56 	bl	80001d0 <memchr>
 8001d24:	b108      	cbz	r0, 8001d2a <_printf_i+0x1e6>
 8001d26:	1b80      	subs	r0, r0, r6
 8001d28:	6060      	str	r0, [r4, #4]
 8001d2a:	6863      	ldr	r3, [r4, #4]
 8001d2c:	6123      	str	r3, [r4, #16]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d34:	e7aa      	b.n	8001c8c <_printf_i+0x148>
 8001d36:	6923      	ldr	r3, [r4, #16]
 8001d38:	4632      	mov	r2, r6
 8001d3a:	4649      	mov	r1, r9
 8001d3c:	4640      	mov	r0, r8
 8001d3e:	47d0      	blx	sl
 8001d40:	3001      	adds	r0, #1
 8001d42:	d0ad      	beq.n	8001ca0 <_printf_i+0x15c>
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	079b      	lsls	r3, r3, #30
 8001d48:	d413      	bmi.n	8001d72 <_printf_i+0x22e>
 8001d4a:	68e0      	ldr	r0, [r4, #12]
 8001d4c:	9b03      	ldr	r3, [sp, #12]
 8001d4e:	4298      	cmp	r0, r3
 8001d50:	bfb8      	it	lt
 8001d52:	4618      	movlt	r0, r3
 8001d54:	e7a6      	b.n	8001ca4 <_printf_i+0x160>
 8001d56:	2301      	movs	r3, #1
 8001d58:	4632      	mov	r2, r6
 8001d5a:	4649      	mov	r1, r9
 8001d5c:	4640      	mov	r0, r8
 8001d5e:	47d0      	blx	sl
 8001d60:	3001      	adds	r0, #1
 8001d62:	d09d      	beq.n	8001ca0 <_printf_i+0x15c>
 8001d64:	3501      	adds	r5, #1
 8001d66:	68e3      	ldr	r3, [r4, #12]
 8001d68:	9903      	ldr	r1, [sp, #12]
 8001d6a:	1a5b      	subs	r3, r3, r1
 8001d6c:	42ab      	cmp	r3, r5
 8001d6e:	dcf2      	bgt.n	8001d56 <_printf_i+0x212>
 8001d70:	e7eb      	b.n	8001d4a <_printf_i+0x206>
 8001d72:	2500      	movs	r5, #0
 8001d74:	f104 0619 	add.w	r6, r4, #25
 8001d78:	e7f5      	b.n	8001d66 <_printf_i+0x222>
 8001d7a:	bf00      	nop
 8001d7c:	08002165 	.word	0x08002165
 8001d80:	08002176 	.word	0x08002176

08001d84 <__sflush_r>:
 8001d84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d8c:	0716      	lsls	r6, r2, #28
 8001d8e:	4605      	mov	r5, r0
 8001d90:	460c      	mov	r4, r1
 8001d92:	d454      	bmi.n	8001e3e <__sflush_r+0xba>
 8001d94:	684b      	ldr	r3, [r1, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	dc02      	bgt.n	8001da0 <__sflush_r+0x1c>
 8001d9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	dd48      	ble.n	8001e32 <__sflush_r+0xae>
 8001da0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001da2:	2e00      	cmp	r6, #0
 8001da4:	d045      	beq.n	8001e32 <__sflush_r+0xae>
 8001da6:	2300      	movs	r3, #0
 8001da8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001dac:	682f      	ldr	r7, [r5, #0]
 8001dae:	6a21      	ldr	r1, [r4, #32]
 8001db0:	602b      	str	r3, [r5, #0]
 8001db2:	d030      	beq.n	8001e16 <__sflush_r+0x92>
 8001db4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001db6:	89a3      	ldrh	r3, [r4, #12]
 8001db8:	0759      	lsls	r1, r3, #29
 8001dba:	d505      	bpl.n	8001dc8 <__sflush_r+0x44>
 8001dbc:	6863      	ldr	r3, [r4, #4]
 8001dbe:	1ad2      	subs	r2, r2, r3
 8001dc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001dc2:	b10b      	cbz	r3, 8001dc8 <__sflush_r+0x44>
 8001dc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001dc6:	1ad2      	subs	r2, r2, r3
 8001dc8:	2300      	movs	r3, #0
 8001dca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001dcc:	6a21      	ldr	r1, [r4, #32]
 8001dce:	4628      	mov	r0, r5
 8001dd0:	47b0      	blx	r6
 8001dd2:	1c43      	adds	r3, r0, #1
 8001dd4:	89a3      	ldrh	r3, [r4, #12]
 8001dd6:	d106      	bne.n	8001de6 <__sflush_r+0x62>
 8001dd8:	6829      	ldr	r1, [r5, #0]
 8001dda:	291d      	cmp	r1, #29
 8001ddc:	d82b      	bhi.n	8001e36 <__sflush_r+0xb2>
 8001dde:	4a2a      	ldr	r2, [pc, #168]	@ (8001e88 <__sflush_r+0x104>)
 8001de0:	410a      	asrs	r2, r1
 8001de2:	07d6      	lsls	r6, r2, #31
 8001de4:	d427      	bmi.n	8001e36 <__sflush_r+0xb2>
 8001de6:	2200      	movs	r2, #0
 8001de8:	6062      	str	r2, [r4, #4]
 8001dea:	04d9      	lsls	r1, r3, #19
 8001dec:	6922      	ldr	r2, [r4, #16]
 8001dee:	6022      	str	r2, [r4, #0]
 8001df0:	d504      	bpl.n	8001dfc <__sflush_r+0x78>
 8001df2:	1c42      	adds	r2, r0, #1
 8001df4:	d101      	bne.n	8001dfa <__sflush_r+0x76>
 8001df6:	682b      	ldr	r3, [r5, #0]
 8001df8:	b903      	cbnz	r3, 8001dfc <__sflush_r+0x78>
 8001dfa:	6560      	str	r0, [r4, #84]	@ 0x54
 8001dfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001dfe:	602f      	str	r7, [r5, #0]
 8001e00:	b1b9      	cbz	r1, 8001e32 <__sflush_r+0xae>
 8001e02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001e06:	4299      	cmp	r1, r3
 8001e08:	d002      	beq.n	8001e10 <__sflush_r+0x8c>
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	f7ff fbf2 	bl	80015f4 <_free_r>
 8001e10:	2300      	movs	r3, #0
 8001e12:	6363      	str	r3, [r4, #52]	@ 0x34
 8001e14:	e00d      	b.n	8001e32 <__sflush_r+0xae>
 8001e16:	2301      	movs	r3, #1
 8001e18:	4628      	mov	r0, r5
 8001e1a:	47b0      	blx	r6
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	1c50      	adds	r0, r2, #1
 8001e20:	d1c9      	bne.n	8001db6 <__sflush_r+0x32>
 8001e22:	682b      	ldr	r3, [r5, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0c6      	beq.n	8001db6 <__sflush_r+0x32>
 8001e28:	2b1d      	cmp	r3, #29
 8001e2a:	d001      	beq.n	8001e30 <__sflush_r+0xac>
 8001e2c:	2b16      	cmp	r3, #22
 8001e2e:	d11e      	bne.n	8001e6e <__sflush_r+0xea>
 8001e30:	602f      	str	r7, [r5, #0]
 8001e32:	2000      	movs	r0, #0
 8001e34:	e022      	b.n	8001e7c <__sflush_r+0xf8>
 8001e36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e3a:	b21b      	sxth	r3, r3
 8001e3c:	e01b      	b.n	8001e76 <__sflush_r+0xf2>
 8001e3e:	690f      	ldr	r7, [r1, #16]
 8001e40:	2f00      	cmp	r7, #0
 8001e42:	d0f6      	beq.n	8001e32 <__sflush_r+0xae>
 8001e44:	0793      	lsls	r3, r2, #30
 8001e46:	680e      	ldr	r6, [r1, #0]
 8001e48:	bf08      	it	eq
 8001e4a:	694b      	ldreq	r3, [r1, #20]
 8001e4c:	600f      	str	r7, [r1, #0]
 8001e4e:	bf18      	it	ne
 8001e50:	2300      	movne	r3, #0
 8001e52:	eba6 0807 	sub.w	r8, r6, r7
 8001e56:	608b      	str	r3, [r1, #8]
 8001e58:	f1b8 0f00 	cmp.w	r8, #0
 8001e5c:	dde9      	ble.n	8001e32 <__sflush_r+0xae>
 8001e5e:	6a21      	ldr	r1, [r4, #32]
 8001e60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001e62:	4643      	mov	r3, r8
 8001e64:	463a      	mov	r2, r7
 8001e66:	4628      	mov	r0, r5
 8001e68:	47b0      	blx	r6
 8001e6a:	2800      	cmp	r0, #0
 8001e6c:	dc08      	bgt.n	8001e80 <__sflush_r+0xfc>
 8001e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e76:	81a3      	strh	r3, [r4, #12]
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e80:	4407      	add	r7, r0
 8001e82:	eba8 0800 	sub.w	r8, r8, r0
 8001e86:	e7e7      	b.n	8001e58 <__sflush_r+0xd4>
 8001e88:	dfbffffe 	.word	0xdfbffffe

08001e8c <_fflush_r>:
 8001e8c:	b538      	push	{r3, r4, r5, lr}
 8001e8e:	690b      	ldr	r3, [r1, #16]
 8001e90:	4605      	mov	r5, r0
 8001e92:	460c      	mov	r4, r1
 8001e94:	b913      	cbnz	r3, 8001e9c <_fflush_r+0x10>
 8001e96:	2500      	movs	r5, #0
 8001e98:	4628      	mov	r0, r5
 8001e9a:	bd38      	pop	{r3, r4, r5, pc}
 8001e9c:	b118      	cbz	r0, 8001ea6 <_fflush_r+0x1a>
 8001e9e:	6a03      	ldr	r3, [r0, #32]
 8001ea0:	b90b      	cbnz	r3, 8001ea6 <_fflush_r+0x1a>
 8001ea2:	f7ff fa9f 	bl	80013e4 <__sinit>
 8001ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f3      	beq.n	8001e96 <_fflush_r+0xa>
 8001eae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001eb0:	07d0      	lsls	r0, r2, #31
 8001eb2:	d404      	bmi.n	8001ebe <_fflush_r+0x32>
 8001eb4:	0599      	lsls	r1, r3, #22
 8001eb6:	d402      	bmi.n	8001ebe <_fflush_r+0x32>
 8001eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001eba:	f7ff fb98 	bl	80015ee <__retarget_lock_acquire_recursive>
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	f7ff ff5f 	bl	8001d84 <__sflush_r>
 8001ec6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001ec8:	07da      	lsls	r2, r3, #31
 8001eca:	4605      	mov	r5, r0
 8001ecc:	d4e4      	bmi.n	8001e98 <_fflush_r+0xc>
 8001ece:	89a3      	ldrh	r3, [r4, #12]
 8001ed0:	059b      	lsls	r3, r3, #22
 8001ed2:	d4e1      	bmi.n	8001e98 <_fflush_r+0xc>
 8001ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ed6:	f7ff fb8b 	bl	80015f0 <__retarget_lock_release_recursive>
 8001eda:	e7dd      	b.n	8001e98 <_fflush_r+0xc>

08001edc <__swbuf_r>:
 8001edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ede:	460e      	mov	r6, r1
 8001ee0:	4614      	mov	r4, r2
 8001ee2:	4605      	mov	r5, r0
 8001ee4:	b118      	cbz	r0, 8001eee <__swbuf_r+0x12>
 8001ee6:	6a03      	ldr	r3, [r0, #32]
 8001ee8:	b90b      	cbnz	r3, 8001eee <__swbuf_r+0x12>
 8001eea:	f7ff fa7b 	bl	80013e4 <__sinit>
 8001eee:	69a3      	ldr	r3, [r4, #24]
 8001ef0:	60a3      	str	r3, [r4, #8]
 8001ef2:	89a3      	ldrh	r3, [r4, #12]
 8001ef4:	071a      	lsls	r2, r3, #28
 8001ef6:	d501      	bpl.n	8001efc <__swbuf_r+0x20>
 8001ef8:	6923      	ldr	r3, [r4, #16]
 8001efa:	b943      	cbnz	r3, 8001f0e <__swbuf_r+0x32>
 8001efc:	4621      	mov	r1, r4
 8001efe:	4628      	mov	r0, r5
 8001f00:	f000 f82a 	bl	8001f58 <__swsetup_r>
 8001f04:	b118      	cbz	r0, 8001f0e <__swbuf_r+0x32>
 8001f06:	f04f 37ff 	mov.w	r7, #4294967295
 8001f0a:	4638      	mov	r0, r7
 8001f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	6922      	ldr	r2, [r4, #16]
 8001f12:	1a98      	subs	r0, r3, r2
 8001f14:	6963      	ldr	r3, [r4, #20]
 8001f16:	b2f6      	uxtb	r6, r6
 8001f18:	4283      	cmp	r3, r0
 8001f1a:	4637      	mov	r7, r6
 8001f1c:	dc05      	bgt.n	8001f2a <__swbuf_r+0x4e>
 8001f1e:	4621      	mov	r1, r4
 8001f20:	4628      	mov	r0, r5
 8001f22:	f7ff ffb3 	bl	8001e8c <_fflush_r>
 8001f26:	2800      	cmp	r0, #0
 8001f28:	d1ed      	bne.n	8001f06 <__swbuf_r+0x2a>
 8001f2a:	68a3      	ldr	r3, [r4, #8]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	60a3      	str	r3, [r4, #8]
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	6022      	str	r2, [r4, #0]
 8001f36:	701e      	strb	r6, [r3, #0]
 8001f38:	6962      	ldr	r2, [r4, #20]
 8001f3a:	1c43      	adds	r3, r0, #1
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d004      	beq.n	8001f4a <__swbuf_r+0x6e>
 8001f40:	89a3      	ldrh	r3, [r4, #12]
 8001f42:	07db      	lsls	r3, r3, #31
 8001f44:	d5e1      	bpl.n	8001f0a <__swbuf_r+0x2e>
 8001f46:	2e0a      	cmp	r6, #10
 8001f48:	d1df      	bne.n	8001f0a <__swbuf_r+0x2e>
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	4628      	mov	r0, r5
 8001f4e:	f7ff ff9d 	bl	8001e8c <_fflush_r>
 8001f52:	2800      	cmp	r0, #0
 8001f54:	d0d9      	beq.n	8001f0a <__swbuf_r+0x2e>
 8001f56:	e7d6      	b.n	8001f06 <__swbuf_r+0x2a>

08001f58 <__swsetup_r>:
 8001f58:	b538      	push	{r3, r4, r5, lr}
 8001f5a:	4b29      	ldr	r3, [pc, #164]	@ (8002000 <__swsetup_r+0xa8>)
 8001f5c:	4605      	mov	r5, r0
 8001f5e:	6818      	ldr	r0, [r3, #0]
 8001f60:	460c      	mov	r4, r1
 8001f62:	b118      	cbz	r0, 8001f6c <__swsetup_r+0x14>
 8001f64:	6a03      	ldr	r3, [r0, #32]
 8001f66:	b90b      	cbnz	r3, 8001f6c <__swsetup_r+0x14>
 8001f68:	f7ff fa3c 	bl	80013e4 <__sinit>
 8001f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f70:	0719      	lsls	r1, r3, #28
 8001f72:	d422      	bmi.n	8001fba <__swsetup_r+0x62>
 8001f74:	06da      	lsls	r2, r3, #27
 8001f76:	d407      	bmi.n	8001f88 <__swsetup_r+0x30>
 8001f78:	2209      	movs	r2, #9
 8001f7a:	602a      	str	r2, [r5, #0]
 8001f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f80:	81a3      	strh	r3, [r4, #12]
 8001f82:	f04f 30ff 	mov.w	r0, #4294967295
 8001f86:	e033      	b.n	8001ff0 <__swsetup_r+0x98>
 8001f88:	0758      	lsls	r0, r3, #29
 8001f8a:	d512      	bpl.n	8001fb2 <__swsetup_r+0x5a>
 8001f8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001f8e:	b141      	cbz	r1, 8001fa2 <__swsetup_r+0x4a>
 8001f90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001f94:	4299      	cmp	r1, r3
 8001f96:	d002      	beq.n	8001f9e <__swsetup_r+0x46>
 8001f98:	4628      	mov	r0, r5
 8001f9a:	f7ff fb2b 	bl	80015f4 <_free_r>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8001fa2:	89a3      	ldrh	r3, [r4, #12]
 8001fa4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001fa8:	81a3      	strh	r3, [r4, #12]
 8001faa:	2300      	movs	r3, #0
 8001fac:	6063      	str	r3, [r4, #4]
 8001fae:	6923      	ldr	r3, [r4, #16]
 8001fb0:	6023      	str	r3, [r4, #0]
 8001fb2:	89a3      	ldrh	r3, [r4, #12]
 8001fb4:	f043 0308 	orr.w	r3, r3, #8
 8001fb8:	81a3      	strh	r3, [r4, #12]
 8001fba:	6923      	ldr	r3, [r4, #16]
 8001fbc:	b94b      	cbnz	r3, 8001fd2 <__swsetup_r+0x7a>
 8001fbe:	89a3      	ldrh	r3, [r4, #12]
 8001fc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fc8:	d003      	beq.n	8001fd2 <__swsetup_r+0x7a>
 8001fca:	4621      	mov	r1, r4
 8001fcc:	4628      	mov	r0, r5
 8001fce:	f000 f84f 	bl	8002070 <__smakebuf_r>
 8001fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fd6:	f013 0201 	ands.w	r2, r3, #1
 8001fda:	d00a      	beq.n	8001ff2 <__swsetup_r+0x9a>
 8001fdc:	2200      	movs	r2, #0
 8001fde:	60a2      	str	r2, [r4, #8]
 8001fe0:	6962      	ldr	r2, [r4, #20]
 8001fe2:	4252      	negs	r2, r2
 8001fe4:	61a2      	str	r2, [r4, #24]
 8001fe6:	6922      	ldr	r2, [r4, #16]
 8001fe8:	b942      	cbnz	r2, 8001ffc <__swsetup_r+0xa4>
 8001fea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001fee:	d1c5      	bne.n	8001f7c <__swsetup_r+0x24>
 8001ff0:	bd38      	pop	{r3, r4, r5, pc}
 8001ff2:	0799      	lsls	r1, r3, #30
 8001ff4:	bf58      	it	pl
 8001ff6:	6962      	ldrpl	r2, [r4, #20]
 8001ff8:	60a2      	str	r2, [r4, #8]
 8001ffa:	e7f4      	b.n	8001fe6 <__swsetup_r+0x8e>
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	e7f7      	b.n	8001ff0 <__swsetup_r+0x98>
 8002000:	2000000c 	.word	0x2000000c

08002004 <_sbrk_r>:
 8002004:	b538      	push	{r3, r4, r5, lr}
 8002006:	4d06      	ldr	r5, [pc, #24]	@ (8002020 <_sbrk_r+0x1c>)
 8002008:	2300      	movs	r3, #0
 800200a:	4604      	mov	r4, r0
 800200c:	4608      	mov	r0, r1
 800200e:	602b      	str	r3, [r5, #0]
 8002010:	f7ff f8fc 	bl	800120c <_sbrk>
 8002014:	1c43      	adds	r3, r0, #1
 8002016:	d102      	bne.n	800201e <_sbrk_r+0x1a>
 8002018:	682b      	ldr	r3, [r5, #0]
 800201a:	b103      	cbz	r3, 800201e <_sbrk_r+0x1a>
 800201c:	6023      	str	r3, [r4, #0]
 800201e:	bd38      	pop	{r3, r4, r5, pc}
 8002020:	200003d4 	.word	0x200003d4

08002024 <__swhatbuf_r>:
 8002024:	b570      	push	{r4, r5, r6, lr}
 8002026:	460c      	mov	r4, r1
 8002028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800202c:	2900      	cmp	r1, #0
 800202e:	b096      	sub	sp, #88	@ 0x58
 8002030:	4615      	mov	r5, r2
 8002032:	461e      	mov	r6, r3
 8002034:	da0d      	bge.n	8002052 <__swhatbuf_r+0x2e>
 8002036:	89a3      	ldrh	r3, [r4, #12]
 8002038:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800203c:	f04f 0100 	mov.w	r1, #0
 8002040:	bf14      	ite	ne
 8002042:	2340      	movne	r3, #64	@ 0x40
 8002044:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002048:	2000      	movs	r0, #0
 800204a:	6031      	str	r1, [r6, #0]
 800204c:	602b      	str	r3, [r5, #0]
 800204e:	b016      	add	sp, #88	@ 0x58
 8002050:	bd70      	pop	{r4, r5, r6, pc}
 8002052:	466a      	mov	r2, sp
 8002054:	f000 f848 	bl	80020e8 <_fstat_r>
 8002058:	2800      	cmp	r0, #0
 800205a:	dbec      	blt.n	8002036 <__swhatbuf_r+0x12>
 800205c:	9901      	ldr	r1, [sp, #4]
 800205e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002062:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002066:	4259      	negs	r1, r3
 8002068:	4159      	adcs	r1, r3
 800206a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800206e:	e7eb      	b.n	8002048 <__swhatbuf_r+0x24>

08002070 <__smakebuf_r>:
 8002070:	898b      	ldrh	r3, [r1, #12]
 8002072:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002074:	079d      	lsls	r5, r3, #30
 8002076:	4606      	mov	r6, r0
 8002078:	460c      	mov	r4, r1
 800207a:	d507      	bpl.n	800208c <__smakebuf_r+0x1c>
 800207c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002080:	6023      	str	r3, [r4, #0]
 8002082:	6123      	str	r3, [r4, #16]
 8002084:	2301      	movs	r3, #1
 8002086:	6163      	str	r3, [r4, #20]
 8002088:	b003      	add	sp, #12
 800208a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800208c:	ab01      	add	r3, sp, #4
 800208e:	466a      	mov	r2, sp
 8002090:	f7ff ffc8 	bl	8002024 <__swhatbuf_r>
 8002094:	9f00      	ldr	r7, [sp, #0]
 8002096:	4605      	mov	r5, r0
 8002098:	4639      	mov	r1, r7
 800209a:	4630      	mov	r0, r6
 800209c:	f7ff fb16 	bl	80016cc <_malloc_r>
 80020a0:	b948      	cbnz	r0, 80020b6 <__smakebuf_r+0x46>
 80020a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020a6:	059a      	lsls	r2, r3, #22
 80020a8:	d4ee      	bmi.n	8002088 <__smakebuf_r+0x18>
 80020aa:	f023 0303 	bic.w	r3, r3, #3
 80020ae:	f043 0302 	orr.w	r3, r3, #2
 80020b2:	81a3      	strh	r3, [r4, #12]
 80020b4:	e7e2      	b.n	800207c <__smakebuf_r+0xc>
 80020b6:	89a3      	ldrh	r3, [r4, #12]
 80020b8:	6020      	str	r0, [r4, #0]
 80020ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020be:	81a3      	strh	r3, [r4, #12]
 80020c0:	9b01      	ldr	r3, [sp, #4]
 80020c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80020c6:	b15b      	cbz	r3, 80020e0 <__smakebuf_r+0x70>
 80020c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020cc:	4630      	mov	r0, r6
 80020ce:	f000 f81d 	bl	800210c <_isatty_r>
 80020d2:	b128      	cbz	r0, 80020e0 <__smakebuf_r+0x70>
 80020d4:	89a3      	ldrh	r3, [r4, #12]
 80020d6:	f023 0303 	bic.w	r3, r3, #3
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	81a3      	strh	r3, [r4, #12]
 80020e0:	89a3      	ldrh	r3, [r4, #12]
 80020e2:	431d      	orrs	r5, r3
 80020e4:	81a5      	strh	r5, [r4, #12]
 80020e6:	e7cf      	b.n	8002088 <__smakebuf_r+0x18>

080020e8 <_fstat_r>:
 80020e8:	b538      	push	{r3, r4, r5, lr}
 80020ea:	4d07      	ldr	r5, [pc, #28]	@ (8002108 <_fstat_r+0x20>)
 80020ec:	2300      	movs	r3, #0
 80020ee:	4604      	mov	r4, r0
 80020f0:	4608      	mov	r0, r1
 80020f2:	4611      	mov	r1, r2
 80020f4:	602b      	str	r3, [r5, #0]
 80020f6:	f7ff f860 	bl	80011ba <_fstat>
 80020fa:	1c43      	adds	r3, r0, #1
 80020fc:	d102      	bne.n	8002104 <_fstat_r+0x1c>
 80020fe:	682b      	ldr	r3, [r5, #0]
 8002100:	b103      	cbz	r3, 8002104 <_fstat_r+0x1c>
 8002102:	6023      	str	r3, [r4, #0]
 8002104:	bd38      	pop	{r3, r4, r5, pc}
 8002106:	bf00      	nop
 8002108:	200003d4 	.word	0x200003d4

0800210c <_isatty_r>:
 800210c:	b538      	push	{r3, r4, r5, lr}
 800210e:	4d06      	ldr	r5, [pc, #24]	@ (8002128 <_isatty_r+0x1c>)
 8002110:	2300      	movs	r3, #0
 8002112:	4604      	mov	r4, r0
 8002114:	4608      	mov	r0, r1
 8002116:	602b      	str	r3, [r5, #0]
 8002118:	f7ff f85f 	bl	80011da <_isatty>
 800211c:	1c43      	adds	r3, r0, #1
 800211e:	d102      	bne.n	8002126 <_isatty_r+0x1a>
 8002120:	682b      	ldr	r3, [r5, #0]
 8002122:	b103      	cbz	r3, 8002126 <_isatty_r+0x1a>
 8002124:	6023      	str	r3, [r4, #0]
 8002126:	bd38      	pop	{r3, r4, r5, pc}
 8002128:	200003d4 	.word	0x200003d4

0800212c <_init>:
 800212c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212e:	bf00      	nop
 8002130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002132:	bc08      	pop	{r3}
 8002134:	469e      	mov	lr, r3
 8002136:	4770      	bx	lr

08002138 <_fini>:
 8002138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213a:	bf00      	nop
 800213c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213e:	bc08      	pop	{r3}
 8002140:	469e      	mov	lr, r3
 8002142:	4770      	bx	lr
