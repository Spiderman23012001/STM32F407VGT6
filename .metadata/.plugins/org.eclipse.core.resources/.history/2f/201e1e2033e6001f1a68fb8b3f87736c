/*
 * stm32f407xx_gpio_driver.c
 *
 *  Created on: Feb 8, 2025
 *      Author: Rambo
 */

#include "stm32f407xx_gpio_driver.h"

/*
 * Peripheral clock setup
 */

/**
 * @brief  Controls the clock for the GPIO peripheral.
 * @param  pGPIOx: Base address of GPIO (e.g., GPIOA).
 * @param  EnOrDi: ENABLE (1) to turn on, DISABLE (0) to turn off.
 * @retval None.
 * @note   This function must be called before configuring the GPIO registers.
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
    if(EnOrDi == ENABLE)
    {
    	if(pGPIOx == GPIOA)
    	{
    		GPIOA_PCLK_EN();
    	}else if(pGPIOx == GPIOB)
    	{
    		GPIOB_PCLK_EN();
    	}else if(pGPIOx == GPIOC)
    	{
    		GPIOC_PCLK_EN();
    	}else if(pGPIOx == GPIOD)
    	{
    		GPIOD_PCLK_EN();
    	}else if(pGPIOx == GPIOE)
    	{
    		GPIOE_PCLK_EN();
    	}else if(pGPIOx == GPIOF)
    	{
    		GPIOF_PCLK_EN();
    	}else if(pGPIOx == GPIOG)
    	{
    		GPIOG_PCLK_EN();
    	}else if(pGPIOx == GPIOH)
    	{
    		GPIOH_PCLK_EN();
    	}else if(pGPIOx == GPIOI)
    	{
    		GPIOI_PCLK_EN();
    	}
        
        
    }else
    {
        if(pGPIOx == GPIOA)
        {
            GPIOA_PCLK_DI();
        }else if(pGPIOx == GPIOB)
        {
            GPIOB_PCLK_DI();
        }else if(pGPIOx == GPIOC)
        {
            GPIOC_PCLK_DI();
        }else if(pGPIOx == GPIOD)
        {
            GPIOD_PCLK_DI();
        }else if(pGPIOx == GPIOE)
        {
            GPIOE_PCLK_DI();
        }else if(pGPIOx == GPIOF)
        {
            GPIOF_PCLK_DI();
        }else if(pGPIOx == GPIOG)
        {
            GPIOG_PCLK_DI();
        }else if(pGPIOx == GPIOH)
        {
            GPIOH_PCLK_DI();
        }else if(pGPIOx == GPIOI)
        {
            GPIOI_PCLK_DI();
        }

    }
}


/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
	uint8_t temp = 0;
    //1. config the mode of gpio pin
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
    {
    	// the non interrupt
    	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinMode));
    	pGPIOHandle->pGPIOx->MODER = temp;
    	temp = 0;
    }else
    {
    	// interrupt mode
    }
    //2. config the speed
    //3. config the pupd settings
    //4. config the optype
    //5. config the alt functionality
}
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx);

/*
 * Data Read and Write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber);
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx);
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value);
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value);
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber);

/*
 *  IRQ config and ISR Handling
 */
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t EnorDi);
void GPIO_IRQHandling(uint8_t PinNumber);


