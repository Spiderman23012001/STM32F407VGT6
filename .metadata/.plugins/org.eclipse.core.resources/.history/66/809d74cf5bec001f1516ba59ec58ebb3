/*
 * stm32f407xx_spi.c
 *
 *  Created on: Feb 14, 2025
 *      Author: Rambo
 */

#include "stm32f407xx_spi.h"
#include "stm32f407xx.h"
/*
 * Peripheral clock setup
 */
void SPI_PeriClockControl(SPI_RegDef_t *SPIx, uint8_t EnOrDi)   //EnOrDi: Enable or Disable
{
    if(EnOrDi == ENABLE)
    {
    	if(SPIx == SPI1)
    	{
    		SPI1_PCLK_EN();
    	}else if(SPIx == SPI2)
    	{
    		SPI2_PCLK_EN();
    	}else if(SPIx == SPI3)
    	{
    		SPI3_PCLK_EN();
    	}
    }else
    {
    	if(SPIx == SPI1)
		{
			SPI1_PCLK_DI();
		}else if(SPIx == SPI2)
		{
			SPI2_PCLK_DI();
		}else if(SPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
    }
}

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
	}else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}

//void SPI_SSIConfig(SPI_RegDef_t* pSPIx, uint8_t EnorDi)
//{
//	if(EnorDi == ENABLE)
//	{
//		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
//	}else
//	{
//		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
//
//}

/*
 * Init and De-init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
	// peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->SPIx, ENABLE);
	// let configure the SPI_CR1 register
	uint32_t temreg = 0;

	// 1. Configure the device mode
	temreg |= (pSPIHandle->SPIConfig.SPI_DeviceMode << 2);

	// 2. Configure the bus  config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
	{
		// BIDIMODE should be cleared
		temreg &= (1 << 15);
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
	{
		// BIDIMODE should be set
		temreg |= (1 << 15);

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
	{
		//BIDIMODE should be cleared
		temreg &= ~(1 << 15);
		//RXONLY bit must be set
		temreg |= (1 << 10);

	}
	// 3. Config the SPI serial clock speed (baud rate)
	temreg	|= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;

	// 4. Config the DFF
	temreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;

	// 5. Config the CPOL
	temreg |= pSPIHandle->SPIConfig.SPI_CPOL << 1;
	// 6. Config the CPHA
	temreg |= pSPIHandle->SPIConfig.SPI_CPHA << 0;

	// 7. Config the SSM
	temreg |= pSPIHandle->SPIConfig.SPI_SSM << 9;

	pSPIHandle->SPIx->CR1 = temreg;

}
void SPI_DeInit(SPI_RegDef_t *pSPIx)
{
	if(pSPIx == SPI1)
	{
		SPI1_REG_RESET();
	}else if(pSPIx == SPI2)
	{
		SPI2_REG_RESET();
	}else if(pSPIx == SPI3)
	{
		SPI3_REG_RESET();
	}
}



/*
 * Data Send and Receive
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t* pSPIx, uint8_t Flagname)
{
	if(pSPIx->SR & Flagname)
	{
		return FLAG_SET;
	}
	return FLAG_RESET;
}
void SPI_SendData(SPI_RegDef_t* pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
	while(Len > 0)
	{
		// 1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_SR_TXE) == FLAG_RESET);
		// 2. check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
		{
			// 16 bit DFF
			pSPIx->DR = *((uint16_t*)pTxBuffer);
			Len--;
			Len--;
			(uint16_t*)pTxBuffer++;

		}else
		{
			// 8 bit
			pSPIx->DR = *pTxBuffer;
			Len--;
			pTxBuffer++;
		}
	}
}
void SPI_ReceiveData(SPI_RegDef_t* pSPIx, uint8_t *pTxBuffer, uint32_t Len);


/*
 * IRQ Configuration and ISR handling
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi);
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority);
void SPI_IRQHandling(uint8_t PinNumber);
