/*
 * stm32f4xx.h
 *
 *  Created on: Feb 6, 2025
 *      Author: Rambo
 */

#ifndef INC_STM32F4XX_H_
#define INC_STM32F4XX_H_

#include<stdint.h>
#include <stdio.h>
#define __vo volatile

/*
 * base addresses of Flash and SRAM memories
 * */

#define FLASH_BASEADDR				0x08000000UL			// Flash memory bắt đầu từ 0x08000000
#define SRAM1_BASEADDR				0x20000000UL			// SRAM1 (bộ nhớ chính) bắt đầu từ 0x20000000
#define SRAM2_BASEADDR				0x2001C000UL
#define ROM_BASEADDR				0x1FFF0000UL			/* System memory */
#define SRAM						SRAM1_BASEADDR

/*
 * AHBx and APBx Bus Peripherals base addresses
 */

#define PERIPH_BASE					0x40000000U
#define APB1PERIPH_BASE				PERIPH_BASE
#define APB2PERIPH_BASE				0x40010000U
#define AHB1PERIPH_BASE				0x40020000U
#define AHB2PERIPH_BASE				0x50000000U

/*
 * Base address of peripherals which are hanging on AHB1 bus
 */

#define GPIOA_BASEADDR				(AHB1PERIPH_BASE + 0x0000)
#define GPIOB_BASEADDR				(AHB1PERIPH_BASE + 0x0400)
#define GPIOC_BASEADDR				(AHB1PERIPH_BASE + 0x0800)
#define GPIOD_BASEADDR				(AHB1PERIPH_BASE + 0x0C00)
#define GPIOE_BASEADDR				(AHB1PERIPH_BASE + 0x1000)
#define GPIOF_BASEADDR				(AHB1PERIPH_BASE + 0x1400)
#define GPIOG_BASEADDR				(AHB1PERIPH_BASE + 0x1800)
#define GPIOH_BASEADDR				(AHB1PERIPH_BASE + 0x1C00)
#define GPIOI_BASEADDR				(AHB1PERIPH_BASE + 0x2000)
#define GPIOJ_BASEADDR				(AHB1PERIPH_BASE + 0x2400)
#define GPIOK_BASEADDR				(AHB1PERIPH_BASE + 0x2800)
#define CRC_BASEADDR				(AHB1PERIPH_BASE + 0x3000)
#define RCC_BASEADDR				(AHB1PERIPH_BASE + 0x3800)
#define BKPSRAM_BASEADDR			(AHB1PERIPH_BASE + 0x4000)
#define DMA1_BASEADDR			    (AHB1PERIPH_BASE + 0x6000)
#define DMA2_BASEADDR			    (AHB1PERIPH_BASE + 0x6400)
#define ETHERNET_BASEADDR			(AHB1PERIPH_BASE + 0x8000)

/*
 * Base address of peripherals which are hanging on APB1 bus
 */

#define TIM2_BASEADDR                (APB1PERIPH_BASE + 0x0000)
#define TIM3_BASEADDR                (APB1PERIPH_BASE + 0x0400)
#define TIM4_BASEADDR                (APB1PERIPH_BASE + 0x0800)
#define TIM5_BASEADDR                (APB1PERIPH_BASE + 0x0C00)
#define TIM6_BASEADDR                (APB1PERIPH_BASE + 0x1000)
#define TIM7_BASEADDR                (APB1PERIPH_BASE + 0x1400)
#define TIM12_BASEADDR               (APB1PERIPH_BASE + 0x1800)
#define TIM13_BASEADDR               (APB1PERIPH_BASE + 0x1C00)
#define TIM14_BASEADDR               (APB1PERIPH_BASE + 0x2000)
#define WWDG_BASEADDR                (APB1PERIPH_BASE + 0x2C00)
#define IWDG_BASEADDR                (APB1PERIPH_BASE + 0x3000)
#define SPI2_BASEADDR                (APB1PERIPH_BASE + 0x3800)
#define SPI3_BASEADDR                (APB1PERIPH_BASE + 0x3C00)
#define USART2_BASEADDR              (APB1PERIPH_BASE + 0x4400)
#define USART3_BASEADDR              (APB1PERIPH_BASE + 0x4800)
#define UART4_BASEADDR               (APB1PERIPH_BASE + 0x4C00)
#define UART5_BASEADDR               (APB1PERIPH_BASE + 0x5000)
#define I2C1_BASEADDR                (APB1PERIPH_BASE + 0x5800)
#define I2C2_BASEADDR                (APB1PERIPH_BASE + 0x5C00)
#define I2C3_BASEADDR                (APB1PERIPH_BASE + 0x5400)
#define CAN1_BASEADDR                (APB1PERIPH_BASE + 0x6400)
#define CAN2_BASEADDR                (APB1PERIPH_BASE + 0x6800)
#define PWR_BASEADDR                 (APB1PERIPH_BASE + 0x7000)
#define DAC_BASEADDR                 (APB1PERIPH_BASE + 0x7400)
#define UART7_BASEADDR               (APB1PERIPH_BASE + 0x7800)
#define UART8_BASEADDR               (APB1PERIPH_BASE + 0x7C00)

/*
 * Base address of peripherals which are hanging on APB2 bus
 */

#define TIM1_BASEADDR                (APB2PERIPH_BASE + 0x0000)
#define TIM8_BASEADDR                (APB2PERIPH_BASE + 0x0400)
#define USART1_BASEADDR              (APB2PERIPH_BASE + 0x1000)
#define USART6_BASEADDR              (APB2PERIPH_BASE + 0x1400)
#define ADC1_ADC2_ADC3_BASEADDR      (APB2PERIPH_BASE + 0x2000)
#define SDIO_BASEADDR                (APB2PERIPH_BASE + 0x2C00)
#define SPI1_BASEADDR                (APB2PERIPH_BASE + 0x3000)
#define SPI4_BASEADDR                (APB2PERIPH_BASE + 0x3400)
#define SYSCFG_BASEADDR              (APB2PERIPH_BASE + 0x3800)
#define EXTI_BASEADDR                (APB2PERIPH_BASE + 0x3C00)
#define TIM9_BASEADDR                (APB2PERIPH_BASE + 0x4000)
#define TIM10_BASEADDR               (APB2PERIPH_BASE + 0x4400)
#define TIM11_BASEADDR               (APB2PERIPH_BASE + 0x4800)
#define SPI5_BASEADDR                (APB2PERIPH_BASE + 0x5000)
#define SPI6_BASEADDR                (APB2PERIPH_BASE + 0x5400)
#define SAI1_BASEADDR                (APB2PERIPH_BASE + 0x5800)
#define LCD_TFT_BASEADDR             (APB2PERIPH_BASE + 0x6800)

/*
 * Base address of peripherals which are hanging on AHB2 bus
 */

#define USB_OTG_FS_BASEADDR          (AHB2PERIPH_BASE + 0x0000)
#define DCMI_BASEADDR                (AHB2PERIPH_BASE + 0x50000)
#define CRYP_BASEADDR                (AHB2PERIPH_BASE + 0x60000)
#define HASH_BASEADDR                (AHB2PERIPH_BASE + 0x60400)
#define RNG_BASEADDR                 (AHB2PERIPH_BASE + 0x60800)

/*
 * Peripheral register definition struct for GPIO
 */

typedef struct {
    __vo uint32_t MODER;     // Mode register: định nghĩa chế độ hoạt động của từng chân (Input, Output, AF, Analog)
    __vo uint32_t OTYPER;    // Output type register: định nghĩa kiểu xuất (Push-Pull hoặc Open-Drain)
    __vo uint32_t OSPEEDR;   // Output speed register: cấu hình tốc độ chuyển đổi tín hiệu (slew rate)
    __vo uint32_t PUPDR;     // Pull-up/Pull-down register: kích hoạt điện trở pull-up hoặc pull-down
    __vo uint32_t IDR;       // Input data register: đọc giá trị của các chân GPIO
    __vo uint32_t ODR;       // Output data register: ghi giá trị để điều khiển các chân GPIO
    __vo uint32_t BSRR;      // Bit set/reset register: dùng để thay đổi trạng thái chân
    __vo uint32_t LCKR;
    __vo uint32_t AFR[2];    // Alternate function registers: AFR[0] cho chân 0-7, AFR[1] cho chân 8-15
} GPIO_RegDef_t;


/*
 * Peripheral register definition struct for RCC
 */

typedef struct {
	__vo uint32_t   CR;
	__vo uint32_t   PLLCFGR;
	__vo uint32_t   CFGR;
	__vo uint32_t   CIR;
	__vo uint32_t   AHB1RSTR;
	__vo uint32_t   AHB2RSTR;
	__vo uint32_t   AHB3RSTR;
	uint32_t        RESERVED0;
	__vo uint32_t   APB1RSTR;
	__vo uint32_t   APB2RSTR;
	uint32_t        RESERVED1[2];
	__vo uint32_t   AHB1ENR;
	__vo uint32_t   AHB2ENR;
	__vo uint32_t   AHB3ENR;
	uint32_t        RESERVED2;
	__vo uint32_t   APB1ENR;
	__vo uint32_t   APB2ENR;
	uint32_t        RESERVED3[2];
	__vo uint32_t   AHB1LPENR;
	__vo uint32_t   AHB2LPENR;
	__vo uint32_t   AHB3LPENR;
	uint32_t        RESERVED4;
	__vo uint32_t   APB1LPENR;
	__vo uint32_t   APB2LPENR;
	uint32_t        RESERVED5[2];
	__vo uint32_t   BDCR;
	__vo uint32_t   CSR;
	uint32_t        RESERVED6[2];
	__vo uint32_t   SSCGR;
	__vo uint32_t   PLLI2SCFGR;

}RCC_RegDef_t;

/*
 * Peripheral register definition struct for EXTI
 */
typedef struct
{
	__vo uint32_t IMR;
	__vo uint32_t EMR;
	__vo uint32_t RTSR;
	__vo uint32_t FTSR;
	__vo uint32_t SWIER;
	__vo uint32_t PR;

}EXTI_RegDef_t;

/*
 * Peripheral register definition struct for SYSCFG
 */
typedef struct
{
	__vo uint32_t MEMRMP;
	__vo uint32_t PMC;
	__vo uint32_t EXTICR[4];
	uint32_t REVERSED[3];
	__vo uint32_t CMPCR;

}SYSCFG_RegDef_t;



#define GPIOA           ((GPIO_RegDef_t*)GPIOA_BASEADDR)
#define GPIOB           ((GPIO_RegDef_t*)GPIOB_BASEADDR)
#define GPIOC           ((GPIO_RegDef_t*)GPIOC_BASEADDR)
#define GPIOD           ((GPIO_RegDef_t*)GPIOD_BASEADDR)
#define GPIOE           ((GPIO_RegDef_t*)GPIOE_BASEADDR)
#define GPIOF           ((GPIO_RegDef_t*)GPIOF_BASEADDR)
#define GPIOG           ((GPIO_RegDef_t*)GPIOG_BASEADDR)
#define GPIOH           ((GPIO_RegDef_t*)GPIOH_BASEADDR)
#define GPIOI           ((GPIO_RegDef_t*)GPIOI_BASEADDR)
#define GPIOJ           ((GPIO_RegDef_t*)GPIOJ_BASEADDR)
#define GPIOK           ((GPIO_RegDef_t*)GPIOK_BASEADDR)

#define RCC             ((RCC_RegDef_t*)RCC_BASEADDR)
#define EXTI            ((EXTI_RegDef_t*)EXTI_BASEADDR)
#define SYSCFG            ((SYSCFG_RegDef_t*)SYSCFG_BASEADDR)
/*
 * Clock enable macros for GPIOx peripherals
 */

#define GPIOA_PCLK_EN()        (RCC->AHB1ENR	|= (1<<0))
#define GPIOB_PCLK_EN()        (RCC->AHB1ENR	|= (1<<1))
#define GPIOC_PCLK_EN()        (RCC->AHB1ENR	|= (1<<2))
#define GPIOD_PCLK_EN()        (RCC->AHB1ENR	|= (1<<3))
#define GPIOE_PCLK_EN()        (RCC->AHB1ENR	|= (1<<4))
#define GPIOF_PCLK_EN()        (RCC->AHB1ENR	|= (1<<5))
#define GPIOG_PCLK_EN()        (RCC->AHB1ENR	|= (1<<6))
#define GPIOH_PCLK_EN()        (RCC->AHB1ENR	|= (1<<7))
#define GPIOI_PCLK_EN()        (RCC->AHB1ENR	|= (1<<8))

/*
 * Clock enable macros for I2Cx peripherals
 */
#define I2C1_PCLK_EN()           (RCC->APB1ENR	|= (1<<21))
#define I2C2_PCLK_EN()           (RCC->APB1ENR	|= (1<<22))
#define I2C3_PCLK_EN()           (RCC->APB1ENR	|= (1<<23))

/*
 * Clock enable macros for SPIx peripherals
 */
#define SPI1_PCLK_EN()           (RCC->APB2ENR	|= (1<<12))
#define SPI2_PCLK_EN()           (RCC->APB1ENR	|= (1<<14))
#define SPI3_PCLK_EN()           (RCC->APB1ENR	|= (1<<15))

/*
 * Clock enable macros for UARTx peripherals
 */
#define USART1_PCLK_EN()           (RCC->APB2ENR	|= (1<<4))
#define USART6_PCLK_EN()           (RCC->APB2ENR	|= (1<<5))
#define USART2_PCLK_EN()           (RCC->APB1ENR	|= (1<<17))
#define USART3_PCLK_EN()           (RCC->APB1ENR	|= (1<<18))
#define UART4_PCLK_EN()            (RCC->APB1ENR	|= (1<<19))
#define UART5_PCLK_EN()            (RCC->APB1ENR	|= (1<<20))

/*
 * Clock enable macros for SYSCFGx peripherals
 */
#define SYSCFG_PCLK_EN()            (RCC->APB2ENR	|= (1<<14))

/*
* Clock enable macros for TIMx peripherals
*/
#define TIM1_PCLK_EN()           (RCC->APB2ENR	|= (1<<0))
#define TIM2_PCLK_EN()           (RCC->APB1ENR	|= (1<<0))
#define TIM3_PCLK_EN()           (RCC->APB1ENR	|= (1<<1))
#define TIM4_PCLK_EN()           (RCC->APB1ENR	|= (1<<2))
#define TIM5_PCLK_EN()           (RCC->APB1ENR	|= (1<<3))
#define TIM6_PCLK_EN()           (RCC->APB1ENR	|= (1<<4))
#define TIM7_PCLK_EN()           (RCC->APB1ENR	|= (1<<5))
#define TIM8_PCLK_EN()           (RCC->APB2ENR	|= (1<<1))
#define TIM9_PCLK_EN()           (RCC->APB2ENR	|= (1<<16))
#define TIM10_PCLK_EN()           (RCC->APB2ENR	|= (1<<17))
#define TIM11_PCLK_EN()           (RCC->APB2ENR	|= (1<<18))
#define TIM12_PCLK_EN()           (RCC->APB1ENR	|= (1<<6))
#define TIM13_PCLK_EN()           (RCC->APB1ENR	|= (1<<7))
#define TIM14_PCLK_EN()           (RCC->APB1ENR	|= (1<<8))

/*
 * Clock disable macros for GPIOx peripherals
 */

#define GPIOA_PCLK_DI()        (RCC->AHB1ENR	&= ~(1<<0))
#define GPIOB_PCLK_DI()        (RCC->AHB1ENR	&= ~(1<<1))
#define GPIOC_PCLK_DI()        (RCC->AHB1ENR	&= ~(1<<2))
#define GPIOD_PCLK_DI()        (RCC->AHB1ENR	&= ~(1<<3))
#define GPIOE_PCLK_DI()        (RCC->AHB1ENR	&= ~(1<<4))
#define GPIOF_PCLK_DI()        (RCC->AHB1ENR	&= ~(1<<5))
#define GPIOG_PCLK_DI()        (RCC->AHB1ENR	&= ~(1<<6))
#define GPIOH_PCLK_DI()        (RCC->AHB1ENR	&= ~(1<<7))
#define GPIOI_PCLK_DI()        (RCC->AHB1ENR	&= ~(1<<8))

/*
 * Clock disable macros for I2Cx peripherals
 */
#define I2C1_PCLK_DI()           (RCC->APB1ENR	&= ~(1<<21))
#define I2C2_PCLK_DI()           (RCC->APB1ENR	&= ~(1<<22))
#define I2C3_PCLK_DI()           (RCC->APB1ENR	&= ~(1<<23))

/*
 * Clock disable macros for SPIx peripherals
 */
#define SPI1_PCLK_DI()           (RCC->APB2ENR	&= ~(1<<12))
#define SPI2_PCLK_DI()           (RCC->APB1ENR	&= ~(1<<14))
#define SPI3_PCLK_DI()           (RCC->APB1ENR	&= ~(1<<15))

/*
 * Clock disable macros for UARTx peripherals
 */
#define USART1_PCLK_DI()           (RCC->APB2ENR	&= ~(1<<4))
#define USART6_PCLK_DI()           (RCC->APB2ENR	&= ~(1<<5))
#define USART2_PCLK_DI()           (RCC->APB1ENR	&= ~(1<<17))
#define USART3_PCLK_DI()           (RCC->APB1ENR	&= ~(1<<18))
#define UART4_PCLK_DI()            (RCC->APB1ENR	&= ~(1<<19))
#define UART5_PCLK_DI()            (RCC->APB1ENR	&= ~(1<<20))

/*
 * Clock disable macros for SYSCFGx peripherals
 */
#define SYSCFG_PCLK_DI()            (RCC->APB2ENR	&= ~(1<<14))

/*
* Clock disable macros for TIMx peripherals
*/
#define TIM1_PCLK_DI()           (RCC->APB2ENR	&= ~(1<<0))
#define TIM2_PCLK_DI()           (RCC->APB1ENR	&= ~(1<<0))
#define TIM3_PCLK_DI()           (RCC->APB1ENR	&= ~(1<<1))
#define TIM4_PCLK_DI()           (RCC->APB1ENR	&= ~(1<<2))
#define TIM5_PCLK_DI()           (RCC->APB1ENR	&= ~(1<<3))
#define TIM6_PCLK_DI()           (RCC->APB1ENR	&= ~(1<<4))
#define TIM7_PCLK_DI()           (RCC->APB1ENR	&= ~(1<<5))
#define TIM8_PCLK_DI()           (RCC->APB2ENR	&= ~(1<<1))
#define TIM9_PCLK_DI()           (RCC->APB2ENR	&= ~(1<<16))
#define TIM10_PCLK_DI()           (RCC->APB2ENR	&= ~(1<<17))
#define TIM11_PCLK_DI()           (RCC->APB2ENR	&= ~(1<<18))
#define TIM12_PCLK_DI()           (RCC->APB1ENR	&= ~(1<<6))
#define TIM13_PCLK_DI()           (RCC->APB1ENR	&= ~(1<<7))
#define TIM14_PCLK_DI()           (RCC->APB1ENR	&= ~(1<<8))


/*
*   Macros to reset GPIOx peripherals
*/
#define GPIOA_REG_RESET()	do{ (RCC->AHB1RSTR |= (1 << 0)); (RCC->AHB1RSTR &= ~(1 << 0)); }while(0)
#define GPIOB_REG_RESET()	do{ (RCC->AHB1RSTR |= (1 << 1)); (RCC->AHB1RSTR &= ~(1 << 1)); }while(0)
#define GPIOC_REG_RESET()	do{ (RCC->AHB1RSTR |= (1 << 2)); (RCC->AHB1RSTR &= ~(1 << 2)); }while(0)
#define GPIOD_REG_RESET()	do{ (RCC->AHB1RSTR |= (1 << 3)); (RCC->AHB1RSTR &= ~(1 << 3)); }while(0)
#define GPIOE_REG_RESET()	do{ (RCC->AHB1RSTR |= (1 << 4)); (RCC->AHB1RSTR &= ~(1 << 4)); }while(0)
#define GPIOF_REG_RESET()	do{ (RCC->AHB1RSTR |= (1 << 5)); (RCC->AHB1RSTR &= ~(1 << 5)); }while(0)
#define GPIOG_REG_RESET()	do{ (RCC->AHB1RSTR |= (1 << 6)); (RCC->AHB1RSTR &= ~(1 << 6)); }while(0)
#define GPIOH_REG_RESET()	do{ (RCC->AHB1RSTR |= (1 << 7)); (RCC->AHB1RSTR &= ~(1 << 7)); }while(0)


/*
*   Some generic macros
*/
#define ENABLE              1
#define DISABLE             0
#define SET                 ENABLE
#define RESET               DISABLE
#define GPIO_PIN_SET        SET
#define GPIO_PIN_RESET      RESET

#endif /* INC_STM32F4XX_H_ */
