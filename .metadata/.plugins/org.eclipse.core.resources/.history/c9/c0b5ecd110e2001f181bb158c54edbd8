/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

/********************** ƒê·ªäNH NGHƒ®A ƒê·ªäA CH·ªà THANH GHI ***************/

#define RCC_BASE 		0x40023800UL
#define RCC_CFGR		(RCC_BASE + 0x08)	// clock configuration register
#define RCC_AHB1ENR		(RCC_BASE + 0x30)	// AHB1 peripheral clock enable register

#define GPIOA_BASE		0x40020000UL
#define GPIOA_MODER		(GPIOA_BASE + 0x00)	// GPIOA port mode register
#define GPIOA_OSPEEDR	(GPIOA_BASE + 0x08)	// GPIOA output speed register
#define GPIOA_AFRH		(GPIOA_BASE +  0x24)// GPIOA alternate function high register

/********************** C·∫§U H√åNH PRESCALER MCO1 ********************/
#define MCO1_PRESCALER	(0x6 << 24)			// Devision by 4 (110 << 24)

/********************** H√ÄM C·∫§U H√åNH CLOCK *****************************/
void config_Clock(void)
{
	// üî¥ B∆∞·ªõc 1: B·∫≠t clock cho GPIOA (AHB1ENR bit 0)
	*((volatile uint32_t *) RCC_AHB1ENR) |= (1 << 0);
	// üî¥ B∆∞·ªõc 2: Clear bit c·∫•u h√¨nh MCO1 c≈© (bit 21-22)
	*((volatile uint32_t *)RCC_CFGR) &= ~(0x3 << 21);
	// üî¥ B∆∞·ªõc 3: Set HSI l√†m ngu·ªìn cho MCO1 (00 << 21 - m·∫∑c ƒë·ªãnh)
//	*((volatile uint32_t *)RCC_CFGR) |= (0x0 << 21);
	// üî¥ B∆∞·ªõc 4: Clear prescaler c≈© (bit 24-26)
	*((volatile uint32_t *)RCC_CFGR) &= ~(0x7 << 24);
	// üî¥ B∆∞·ªõc 5: √Åp d·ª•ng prescaler m·ªõi (chia 4)
	*((volatile uint32_t *)RCC_CFGR) |= MCO1_PRESCALER;
}

/********************** H√ÄM C·∫§U H√åNH GPIOA ************************/
void config_gpio(void)
{
	// B∆∞·ªõc 1: set mode
	*((volatile uint32_t *) GPIOA_MODER) &= ~(0x3 << 16);
	*((volatile uint32_t *) GPIOA_MODER) |= (0x2 << 16);
	// B∆∞·ªõc 2: set speed for PA8
	*((volatile uint32_t *) GPIOA_OSPEEDR) &= ~(0x3 << 16);
	*((volatile uint32_t *) GPIOA_OSPEEDR) |= (0x2 << 16);
	// B∆∞·ªõc 3: set AF0 for pin PA8
	*((volatile uint32_t *) GPIOA_AFRH) &= ~(0x3 << 16);
//	*((volatile uint32_t *) GPIOA_AFRH) |= (0x0 << 16);

}

int main(void)
{
	config_Clock();
	config_gpio();
    /* Loop forever */
	for(;;);
}
