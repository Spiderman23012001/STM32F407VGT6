
LED_BLink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008998  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008b20  08008b20  00009b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b3c  08008b3c  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  08008b3c  08008b3c  00009b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b44  08008b44  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b44  08008b44  00009b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b48  08008b48  00009b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008b4c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00000a1c  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a98  20000a98  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001498c  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000384d  00000000  00000000  0001ea38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00022288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1f  00000000  00000000  000233c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002340c  00000000  00000000  000240e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001842b  00000000  00000000  000474f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb875  00000000  00000000  0005f91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b193  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ac4  00000000  00000000  0012b1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0012fc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008b08 	.word	0x08008b08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008b08 	.word	0x08008b08

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fc02 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f81a 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f916 	bl	80006f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c8:	f000 f880 	bl	80005cc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004cc:	f000 f8ac 	bl	8000628 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d0:	f000 f8da 	bl	8000688 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d4:	f007 fec2 	bl	800825c <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004d8:	f007 fee6 	bl	80082a8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80004dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e0:	4804      	ldr	r0, [pc, #16]	@ (80004f4 <main+0x3c>)
 80004e2:	f000 ff4c 	bl	800137e <HAL_GPIO_TogglePin>
    HAL_Delay(600);
 80004e6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80004ea:	f000 fc5d 	bl	8000da8 <HAL_Delay>
    MX_USB_HOST_Process();
 80004ee:	bf00      	nop
 80004f0:	e7f2      	b.n	80004d8 <main+0x20>
 80004f2:	bf00      	nop
 80004f4:	40020c00 	.word	0x40020c00

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	@ 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	@ 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f008 fa70 	bl	80089ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b28      	ldr	r3, [pc, #160]	@ (80005c4 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000524:	4a27      	ldr	r2, [pc, #156]	@ (80005c4 <SystemClock_Config+0xcc>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	@ 0x40
 800052c:	4b25      	ldr	r3, [pc, #148]	@ (80005c4 <SystemClock_Config+0xcc>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b22      	ldr	r3, [pc, #136]	@ (80005c8 <SystemClock_Config+0xd0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a21      	ldr	r2, [pc, #132]	@ (80005c8 <SystemClock_Config+0xd0>)
 8000542:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000554:	2301      	movs	r3, #1
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000558:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800055c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000568:	2308      	movs	r3, #8
 800056a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800056c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000570:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000576:	2307      	movs	r3, #7
 8000578:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fe30 	bl	80041e4 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800058a:	f000 f9b1 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2302      	movs	r3, #2
 8000594:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800059a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800059e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2105      	movs	r1, #5
 80005ac:	4618      	mov	r0, r3
 80005ae:	f004 f891 	bl	80046d4 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b8:	f000 f99a 	bl	80008f0 <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3750      	adds	r7, #80	@ 0x50
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d0:	4b12      	ldr	r3, [pc, #72]	@ (800061c <MX_I2C1_Init+0x50>)
 80005d2:	4a13      	ldr	r2, [pc, #76]	@ (8000620 <MX_I2C1_Init+0x54>)
 80005d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005d6:	4b11      	ldr	r3, [pc, #68]	@ (800061c <MX_I2C1_Init+0x50>)
 80005d8:	4a12      	ldr	r2, [pc, #72]	@ (8000624 <MX_I2C1_Init+0x58>)
 80005da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <MX_I2C1_Init+0x50>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <MX_I2C1_Init+0x50>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <MX_I2C1_Init+0x50>)
 80005ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005f6:	4b09      	ldr	r3, [pc, #36]	@ (800061c <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005fc:	4b07      	ldr	r3, [pc, #28]	@ (800061c <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000608:	4804      	ldr	r0, [pc, #16]	@ (800061c <MX_I2C1_Init+0x50>)
 800060a:	f003 f807 	bl	800361c <HAL_I2C_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000614:	f000 f96c 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000098 	.word	0x20000098
 8000620:	40005400 	.word	0x40005400
 8000624:	000186a0 	.word	0x000186a0

08000628 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800062c:	4b13      	ldr	r3, [pc, #76]	@ (800067c <MX_I2S3_Init+0x54>)
 800062e:	4a14      	ldr	r2, [pc, #80]	@ (8000680 <MX_I2S3_Init+0x58>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000632:	4b12      	ldr	r3, [pc, #72]	@ (800067c <MX_I2S3_Init+0x54>)
 8000634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000638:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800063a:	4b10      	ldr	r3, [pc, #64]	@ (800067c <MX_I2S3_Init+0x54>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000640:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_I2S3_Init+0x54>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000646:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <MX_I2S3_Init+0x54>)
 8000648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800064c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800064e:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <MX_I2S3_Init+0x54>)
 8000650:	4a0c      	ldr	r2, [pc, #48]	@ (8000684 <MX_I2S3_Init+0x5c>)
 8000652:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000654:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_I2S3_Init+0x54>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800065a:	4b08      	ldr	r3, [pc, #32]	@ (800067c <MX_I2S3_Init+0x54>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_I2S3_Init+0x54>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <MX_I2S3_Init+0x54>)
 8000668:	f003 f91c 	bl	80038a4 <HAL_I2S_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000672:	f000 f93d 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200000ec 	.word	0x200000ec
 8000680:	40003c00 	.word	0x40003c00
 8000684:	00017700 	.word	0x00017700

08000688 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800068c:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <MX_SPI1_Init+0x64>)
 800068e:	4a18      	ldr	r2, [pc, #96]	@ (80006f0 <MX_SPI1_Init+0x68>)
 8000690:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000692:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <MX_SPI1_Init+0x64>)
 8000694:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000698:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800069a:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <MX_SPI1_Init+0x64>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a0:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a6:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006d2:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006d4:	220a      	movs	r2, #10
 80006d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006da:	f004 fb49 	bl	8004d70 <HAL_SPI_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006e4:	f000 f904 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000134 	.word	0x20000134
 80006f0:	40013000 	.word	0x40013000

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	@ 0x30
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
 800070e:	4b72      	ldr	r3, [pc, #456]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a71      	ldr	r2, [pc, #452]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 8000714:	f043 0310 	orr.w	r3, r3, #16
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b6f      	ldr	r3, [pc, #444]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0310 	and.w	r3, r3, #16
 8000722:	61bb      	str	r3, [r7, #24]
 8000724:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	4b6b      	ldr	r3, [pc, #428]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a6a      	ldr	r2, [pc, #424]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b68      	ldr	r3, [pc, #416]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b64      	ldr	r3, [pc, #400]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a63      	ldr	r2, [pc, #396]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b61      	ldr	r3, [pc, #388]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b5d      	ldr	r3, [pc, #372]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a5c      	ldr	r2, [pc, #368]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b5a      	ldr	r3, [pc, #360]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b56      	ldr	r3, [pc, #344]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a55      	ldr	r2, [pc, #340]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b53      	ldr	r3, [pc, #332]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b4f      	ldr	r3, [pc, #316]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a4e      	ldr	r2, [pc, #312]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b4c      	ldr	r3, [pc, #304]	@ (80008d8 <MX_GPIO_Init+0x1e4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2108      	movs	r1, #8
 80007b6:	4849      	ldr	r0, [pc, #292]	@ (80008dc <MX_GPIO_Init+0x1e8>)
 80007b8:	f000 fdc8 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2101      	movs	r1, #1
 80007c0:	4847      	ldr	r0, [pc, #284]	@ (80008e0 <MX_GPIO_Init+0x1ec>)
 80007c2:	f000 fdc3 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|LD3_Pin|LD5_Pin|LD6_Pin
 80007c6:	2200      	movs	r2, #0
 80007c8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007cc:	4845      	ldr	r0, [pc, #276]	@ (80008e4 <MX_GPIO_Init+0x1f0>)
 80007ce:	f000 fdbd 	bl	800134c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007d2:	2308      	movs	r3, #8
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	483c      	ldr	r0, [pc, #240]	@ (80008dc <MX_GPIO_Init+0x1e8>)
 80007ea:	f000 fc13 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4836      	ldr	r0, [pc, #216]	@ (80008e0 <MX_GPIO_Init+0x1ec>)
 8000806:	f000 fc05 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800080a:	2308      	movs	r3, #8
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800081a:	2305      	movs	r3, #5
 800081c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	482e      	ldr	r0, [pc, #184]	@ (80008e0 <MX_GPIO_Init+0x1ec>)
 8000826:	f000 fbf5 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800082e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	482a      	ldr	r0, [pc, #168]	@ (80008e8 <MX_GPIO_Init+0x1f4>)
 8000840:	f000 fbe8 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000844:	2304      	movs	r3, #4
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4825      	ldr	r0, [pc, #148]	@ (80008ec <MX_GPIO_Init+0x1f8>)
 8000858:	f000 fbdc 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800085c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800086e:	2305      	movs	r3, #5
 8000870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	481c      	ldr	r0, [pc, #112]	@ (80008ec <MX_GPIO_Init+0x1f8>)
 800087a:	f000 fbcb 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|LD3_Pin|LD5_Pin|LD6_Pin
 800087e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000882:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4813      	ldr	r0, [pc, #76]	@ (80008e4 <MX_GPIO_Init+0x1f0>)
 8000898:	f000 fbbc 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800089c:	2320      	movs	r3, #32
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <MX_GPIO_Init+0x1f0>)
 80008b0:	f000 fbb0 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <MX_GPIO_Init+0x1e8>)
 80008ca:	f000 fba3 	bl	8001014 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ce:	bf00      	nop
 80008d0:	3730      	adds	r7, #48	@ 0x30
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40020800 	.word	0x40020800
 80008e4:	40020c00 	.word	0x40020c00
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020400 	.word	0x40020400

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	@ (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000910:	6453      	str	r3, [r2, #68]	@ 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	@ (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	@ 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800093a:	2007      	movs	r0, #7
 800093c:	f000 fb28 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	@ 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a19      	ldr	r2, [pc, #100]	@ (80009d0 <HAL_I2C_MspInit+0x84>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d12c      	bne.n	80009c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <HAL_I2C_MspInit+0x88>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a17      	ldr	r2, [pc, #92]	@ (80009d4 <HAL_I2C_MspInit+0x88>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <HAL_I2C_MspInit+0x88>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800098a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800098e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000990:	2312      	movs	r3, #18
 8000992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000994:	2301      	movs	r3, #1
 8000996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800099c:	2304      	movs	r3, #4
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	480c      	ldr	r0, [pc, #48]	@ (80009d8 <HAL_I2C_MspInit+0x8c>)
 80009a8:	f000 fb34 	bl	8001014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <HAL_I2C_MspInit+0x88>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b4:	4a07      	ldr	r2, [pc, #28]	@ (80009d4 <HAL_I2C_MspInit+0x88>)
 80009b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80009bc:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <HAL_I2C_MspInit+0x88>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	@ 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40005400 	.word	0x40005400
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020400 	.word	0x40020400

080009dc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08e      	sub	sp, #56	@ 0x38
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a31      	ldr	r2, [pc, #196]	@ (8000acc <HAL_I2S_MspInit+0xf0>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d15a      	bne.n	8000ac2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a10:	23c0      	movs	r3, #192	@ 0xc0
 8000a12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f004 f865 	bl	8004aec <HAL_RCCEx_PeriphCLKConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a28:	f7ff ff62 	bl	80008f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	4b27      	ldr	r3, [pc, #156]	@ (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a34:	4a26      	ldr	r2, [pc, #152]	@ (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3c:	4b24      	ldr	r3, [pc, #144]	@ (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a50:	4a1f      	ldr	r2, [pc, #124]	@ (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6c:	4a18      	ldr	r2, [pc, #96]	@ (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a6e:	f043 0304 	orr.w	r3, r3, #4
 8000a72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a78:	f003 0304 	and.w	r3, r3, #4
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a80:	2310      	movs	r3, #16
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a90:	2306      	movs	r3, #6
 8000a92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480e      	ldr	r0, [pc, #56]	@ (8000ad4 <HAL_I2S_MspInit+0xf8>)
 8000a9c:	f000 faba 	bl	8001014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aa0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab2:	2306      	movs	r3, #6
 8000ab4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aba:	4619      	mov	r1, r3
 8000abc:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <HAL_I2S_MspInit+0xfc>)
 8000abe:	f000 faa9 	bl	8001014 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3738      	adds	r7, #56	@ 0x38
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40003c00 	.word	0x40003c00
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40020800 	.word	0x40020800

08000adc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a19      	ldr	r2, [pc, #100]	@ (8000b60 <HAL_SPI_MspInit+0x84>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12b      	bne.n	8000b56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b18      	ldr	r3, [pc, #96]	@ (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	4a17      	ldr	r2, [pc, #92]	@ (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a10      	ldr	r2, [pc, #64]	@ (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b36:	23e0      	movs	r3, #224	@ 0xe0
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b46:	2305      	movs	r3, #5
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <HAL_SPI_MspInit+0x8c>)
 8000b52:	f000 fa5f 	bl	8001014 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	@ 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40013000 	.word	0x40013000
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <NMI_Handler+0x4>

08000b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <MemManage_Handler+0x4>

08000b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc2:	f000 f8d1 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <OTG_FS_IRQHandler+0x10>)
 8000bd2:	f000 fecf 	bl	8001974 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000570 	.word	0x20000570

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be8:	4a14      	ldr	r2, [pc, #80]	@ (8000c3c <_sbrk+0x5c>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <_sbrk+0x60>)
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <_sbrk+0x64>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	@ (8000c48 <_sbrk+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c02:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d207      	bcs.n	8000c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c10:	f007 ff04 	bl	8008a1c <__errno>
 8000c14:	4603      	mov	r3, r0
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	e009      	b.n	8000c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c20:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c26:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a05      	ldr	r2, [pc, #20]	@ (8000c44 <_sbrk+0x64>)
 8000c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20020000 	.word	0x20020000
 8000c40:	00000400 	.word	0x00000400
 8000c44:	2000018c 	.word	0x2000018c
 8000c48:	20000a98 	.word	0x20000a98

08000c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	@ (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c74:	f7ff ffea 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c78:	480c      	ldr	r0, [pc, #48]	@ (8000cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7a:	490d      	ldr	r1, [pc, #52]	@ (8000cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c90:	4c0a      	ldr	r4, [pc, #40]	@ (8000cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f007 fec3 	bl	8008a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fc09 	bl	80004b8 <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000cb4:	08008b4c 	.word	0x08008b4c
  ldr r2, =_sbss
 8000cb8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000cbc:	20000a98 	.word	0x20000a98

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <HAL_Init+0x40>)
 8000cce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <HAL_Init+0x40>)
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a07      	ldr	r2, [pc, #28]	@ (8000d04 <HAL_Init+0x40>)
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f94f 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f000 f808 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf8:	f7ff fe00 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d10:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <HAL_InitTick+0x54>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <HAL_InitTick+0x58>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f967 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00e      	b.n	8000d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d80a      	bhi.n	8000d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f000 f92f 	bl	8000fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d48:	4a06      	ldr	r2, [pc, #24]	@ (8000d64 <HAL_InitTick+0x5c>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e000      	b.n	8000d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000004 	.word	0x20000004

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000190 	.word	0x20000190

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	@ (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000190 	.word	0x20000190

08000da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff ffee 	bl	8000d90 <HAL_GetTick>
 8000db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dce:	bf00      	nop
 8000dd0:	f7ff ffde 	bl	8000d90 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	@ (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	@ (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	@ (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	@ 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	@ 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff8e 	bl	8000e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff29 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff3e 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff8e 	bl	8000ee4 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5d 	bl	8000e90 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff31 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa2 	bl	8000f4c <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	@ 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	e16b      	b.n	8001308 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	429a      	cmp	r2, r3
 800104a:	f040 815a 	bne.w	8001302 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b01      	cmp	r3, #1
 8001058:	d005      	beq.n	8001066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001062:	2b02      	cmp	r3, #2
 8001064:	d130      	bne.n	80010c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	f003 0201 	and.w	r2, r3, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d017      	beq.n	8001104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d123      	bne.n	8001158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	08da      	lsrs	r2, r3, #3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3208      	adds	r2, #8
 8001118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	08da      	lsrs	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3208      	adds	r2, #8
 8001152:	69b9      	ldr	r1, [r7, #24]
 8001154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0203 	and.w	r2, r3, #3
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80b4 	beq.w	8001302 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b60      	ldr	r3, [pc, #384]	@ (8001320 <HAL_GPIO_Init+0x30c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	4a5f      	ldr	r2, [pc, #380]	@ (8001320 <HAL_GPIO_Init+0x30c>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001320 <HAL_GPIO_Init+0x30c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001324 <HAL_GPIO_Init+0x310>)
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a52      	ldr	r2, [pc, #328]	@ (8001328 <HAL_GPIO_Init+0x314>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d02b      	beq.n	800123a <HAL_GPIO_Init+0x226>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a51      	ldr	r2, [pc, #324]	@ (800132c <HAL_GPIO_Init+0x318>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d025      	beq.n	8001236 <HAL_GPIO_Init+0x222>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a50      	ldr	r2, [pc, #320]	@ (8001330 <HAL_GPIO_Init+0x31c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d01f      	beq.n	8001232 <HAL_GPIO_Init+0x21e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001334 <HAL_GPIO_Init+0x320>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d019      	beq.n	800122e <HAL_GPIO_Init+0x21a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001338 <HAL_GPIO_Init+0x324>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d013      	beq.n	800122a <HAL_GPIO_Init+0x216>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4d      	ldr	r2, [pc, #308]	@ (800133c <HAL_GPIO_Init+0x328>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d00d      	beq.n	8001226 <HAL_GPIO_Init+0x212>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4c      	ldr	r2, [pc, #304]	@ (8001340 <HAL_GPIO_Init+0x32c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d007      	beq.n	8001222 <HAL_GPIO_Init+0x20e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4b      	ldr	r2, [pc, #300]	@ (8001344 <HAL_GPIO_Init+0x330>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d101      	bne.n	800121e <HAL_GPIO_Init+0x20a>
 800121a:	2307      	movs	r3, #7
 800121c:	e00e      	b.n	800123c <HAL_GPIO_Init+0x228>
 800121e:	2308      	movs	r3, #8
 8001220:	e00c      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001222:	2306      	movs	r3, #6
 8001224:	e00a      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001226:	2305      	movs	r3, #5
 8001228:	e008      	b.n	800123c <HAL_GPIO_Init+0x228>
 800122a:	2304      	movs	r3, #4
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x228>
 800122e:	2303      	movs	r3, #3
 8001230:	e004      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001232:	2302      	movs	r3, #2
 8001234:	e002      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_GPIO_Init+0x228>
 800123a:	2300      	movs	r3, #0
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	4093      	lsls	r3, r2
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800124c:	4935      	ldr	r1, [pc, #212]	@ (8001324 <HAL_GPIO_Init+0x310>)
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	3302      	adds	r3, #2
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800125a:	4b3b      	ldr	r3, [pc, #236]	@ (8001348 <HAL_GPIO_Init+0x334>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800127e:	4a32      	ldr	r2, [pc, #200]	@ (8001348 <HAL_GPIO_Init+0x334>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001284:	4b30      	ldr	r3, [pc, #192]	@ (8001348 <HAL_GPIO_Init+0x334>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a8:	4a27      	ldr	r2, [pc, #156]	@ (8001348 <HAL_GPIO_Init+0x334>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ae:	4b26      	ldr	r3, [pc, #152]	@ (8001348 <HAL_GPIO_Init+0x334>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001348 <HAL_GPIO_Init+0x334>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <HAL_GPIO_Init+0x334>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012fc:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <HAL_GPIO_Init+0x334>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	f67f ae90 	bls.w	8001030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3724      	adds	r7, #36	@ 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40013800 	.word	0x40013800
 8001328:	40020000 	.word	0x40020000
 800132c:	40020400 	.word	0x40020400
 8001330:	40020800 	.word	0x40020800
 8001334:	40020c00 	.word	0x40020c00
 8001338:	40021000 	.word	0x40021000
 800133c:	40021400 	.word	0x40021400
 8001340:	40021800 	.word	0x40021800
 8001344:	40021c00 	.word	0x40021c00
 8001348:	40013c00 	.word	0x40013c00

0800134c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
 8001358:	4613      	mov	r3, r2
 800135a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001368:	e003      	b.n	8001372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	041a      	lsls	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	619a      	str	r2, [r3, #24]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800137e:	b480      	push	{r7}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001390:	887a      	ldrh	r2, [r7, #2]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4013      	ands	r3, r2
 8001396:	041a      	lsls	r2, r3, #16
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43d9      	mvns	r1, r3
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	400b      	ands	r3, r1
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	619a      	str	r2, [r3, #24]
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af02      	add	r7, sp, #8
 80013b8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e059      	b.n	8001478 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d106      	bne.n	80013e4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f006 ff9a 	bl	8008318 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2203      	movs	r2, #3
 80013e8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013f2:	d102      	bne.n	80013fa <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 fdb4 	bl	8004f6c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7c1a      	ldrb	r2, [r3, #16]
 800140c:	f88d 2000 	strb.w	r2, [sp]
 8001410:	3304      	adds	r3, #4
 8001412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001414:	f003 fd35 	bl	8004e82 <USB_CoreInit>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2202      	movs	r2, #2
 8001422:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e026      	b.n	8001478 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2101      	movs	r1, #1
 8001430:	4618      	mov	r0, r3
 8001432:	f003 fdac 	bl	8004f8e <USB_SetCurrentMode>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e017      	b.n	8001478 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7c1a      	ldrb	r2, [r3, #16]
 8001450:	f88d 2000 	strb.w	r2, [sp]
 8001454:	3304      	adds	r3, #4
 8001456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001458:	f003 ff4e 	bl	80052f8 <USB_HostInit>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2202      	movs	r2, #2
 8001466:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e004      	b.n	8001478 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b08b      	sub	sp, #44	@ 0x2c
 8001484:	af04      	add	r7, sp, #16
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	4608      	mov	r0, r1
 800148a:	4611      	mov	r1, r2
 800148c:	461a      	mov	r2, r3
 800148e:	4603      	mov	r3, r0
 8001490:	70fb      	strb	r3, [r7, #3]
 8001492:	460b      	mov	r3, r1
 8001494:	70bb      	strb	r3, [r7, #2]
 8001496:	4613      	mov	r3, r2
 8001498:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800149a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800149c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d101      	bne.n	80014ac <HAL_HCD_HC_Init+0x2c>
 80014a8:	2302      	movs	r3, #2
 80014aa:	e09d      	b.n	80015e8 <HAL_HCD_HC_Init+0x168>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80014b4:	78fa      	ldrb	r2, [r7, #3]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	3319      	adds	r3, #25
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014c8:	78fa      	ldrb	r2, [r7, #3]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	3314      	adds	r3, #20
 80014d8:	787a      	ldrb	r2, [r7, #1]
 80014da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014dc:	78fa      	ldrb	r2, [r7, #3]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	1a9b      	subs	r3, r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	3315      	adds	r3, #21
 80014ec:	78fa      	ldrb	r2, [r7, #3]
 80014ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014f0:	78fa      	ldrb	r2, [r7, #3]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	1a9b      	subs	r3, r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	3326      	adds	r3, #38	@ 0x26
 8001500:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001504:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001506:	78fa      	ldrb	r2, [r7, #3]
 8001508:	78bb      	ldrb	r3, [r7, #2]
 800150a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800150e:	b2d8      	uxtb	r0, r3
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	3316      	adds	r3, #22
 800151e:	4602      	mov	r2, r0
 8001520:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	4619      	mov	r1, r3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 fbc8 	bl	8001cbc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800152c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001530:	2b00      	cmp	r3, #0
 8001532:	da0a      	bge.n	800154a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001534:	78fa      	ldrb	r2, [r7, #3]
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	1a9b      	subs	r3, r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	3317      	adds	r3, #23
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]
 8001548:	e009      	b.n	800155e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800154a:	78fa      	ldrb	r2, [r7, #3]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	1a9b      	subs	r3, r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	3317      	adds	r3, #23
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f004 f82c 	bl	80055c0 <USB_GetHostSpeed>
 8001568:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800156a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800156e:	2b01      	cmp	r3, #1
 8001570:	d10b      	bne.n	800158a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001572:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001576:	2b01      	cmp	r3, #1
 8001578:	d107      	bne.n	800158a <HAL_HCD_HC_Init+0x10a>
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d104      	bne.n	800158a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2bbc      	cmp	r3, #188	@ 0xbc
 8001584:	d901      	bls.n	800158a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001586:	23bc      	movs	r3, #188	@ 0xbc
 8001588:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800158a:	78fa      	ldrb	r2, [r7, #3]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	1a9b      	subs	r3, r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	3318      	adds	r3, #24
 800159a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800159e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80015a0:	78fa      	ldrb	r2, [r7, #3]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	b298      	uxth	r0, r3
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	3328      	adds	r3, #40	@ 0x28
 80015b4:	4602      	mov	r2, r0
 80015b6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6818      	ldr	r0, [r3, #0]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	787c      	ldrb	r4, [r7, #1]
 80015c2:	78ba      	ldrb	r2, [r7, #2]
 80015c4:	78f9      	ldrb	r1, [r7, #3]
 80015c6:	9302      	str	r3, [sp, #8]
 80015c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	4623      	mov	r3, r4
 80015d6:	f004 f81b 	bl	8005610 <USB_HC_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	371c      	adds	r7, #28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}

080015f0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_HCD_HC_Halt+0x1e>
 800160a:	2302      	movs	r3, #2
 800160c:	e00f      	b.n	800162e <HAL_HCD_HC_Halt+0x3e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	78fa      	ldrb	r2, [r7, #3]
 800161c:	4611      	mov	r1, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f004 fbad 	bl	8005d7e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	4608      	mov	r0, r1
 8001642:	4611      	mov	r1, r2
 8001644:	461a      	mov	r2, r3
 8001646:	4603      	mov	r3, r0
 8001648:	70fb      	strb	r3, [r7, #3]
 800164a:	460b      	mov	r3, r1
 800164c:	70bb      	strb	r3, [r7, #2]
 800164e:	4613      	mov	r3, r2
 8001650:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001652:	78fa      	ldrb	r2, [r7, #3]
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	1a9b      	subs	r3, r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	440b      	add	r3, r1
 8001660:	3317      	adds	r3, #23
 8001662:	78ba      	ldrb	r2, [r7, #2]
 8001664:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001666:	78fa      	ldrb	r2, [r7, #3]
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	1a9b      	subs	r3, r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3326      	adds	r3, #38	@ 0x26
 8001676:	787a      	ldrb	r2, [r7, #1]
 8001678:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800167a:	7c3b      	ldrb	r3, [r7, #16]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d114      	bne.n	80016aa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001680:	78fa      	ldrb	r2, [r7, #3]
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	332a      	adds	r3, #42	@ 0x2a
 8001690:	2203      	movs	r2, #3
 8001692:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001694:	78fa      	ldrb	r2, [r7, #3]
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	1a9b      	subs	r3, r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	3319      	adds	r3, #25
 80016a4:	7f3a      	ldrb	r2, [r7, #28]
 80016a6:	701a      	strb	r2, [r3, #0]
 80016a8:	e009      	b.n	80016be <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016aa:	78fa      	ldrb	r2, [r7, #3]
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	1a9b      	subs	r3, r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	332a      	adds	r3, #42	@ 0x2a
 80016ba:	2202      	movs	r2, #2
 80016bc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016be:	787b      	ldrb	r3, [r7, #1]
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	f200 8102 	bhi.w	80018ca <HAL_HCD_HC_SubmitRequest+0x292>
 80016c6:	a201      	add	r2, pc, #4	@ (adr r2, 80016cc <HAL_HCD_HC_SubmitRequest+0x94>)
 80016c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016cc:	080016dd 	.word	0x080016dd
 80016d0:	080018b5 	.word	0x080018b5
 80016d4:	080017a1 	.word	0x080017a1
 80016d8:	0800182b 	.word	0x0800182b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80016dc:	7c3b      	ldrb	r3, [r7, #16]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	f040 80f5 	bne.w	80018ce <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80016e4:	78bb      	ldrb	r3, [r7, #2]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d12d      	bne.n	8001746 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80016ea:	8b3b      	ldrh	r3, [r7, #24]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d109      	bne.n	8001704 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80016f0:	78fa      	ldrb	r2, [r7, #3]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	1a9b      	subs	r3, r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	333d      	adds	r3, #61	@ 0x3d
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001704:	78fa      	ldrb	r2, [r7, #3]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	333d      	adds	r3, #61	@ 0x3d
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10a      	bne.n	8001730 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800171a:	78fa      	ldrb	r2, [r7, #3]
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	1a9b      	subs	r3, r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	332a      	adds	r3, #42	@ 0x2a
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800172e:	e0ce      	b.n	80018ce <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001730:	78fa      	ldrb	r2, [r7, #3]
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	1a9b      	subs	r3, r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	332a      	adds	r3, #42	@ 0x2a
 8001740:	2202      	movs	r2, #2
 8001742:	701a      	strb	r2, [r3, #0]
      break;
 8001744:	e0c3      	b.n	80018ce <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001746:	78fa      	ldrb	r2, [r7, #3]
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	1a9b      	subs	r3, r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	331a      	adds	r3, #26
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	f040 80b8 	bne.w	80018ce <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800175e:	78fa      	ldrb	r2, [r7, #3]
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	1a9b      	subs	r3, r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	440b      	add	r3, r1
 800176c:	333c      	adds	r3, #60	@ 0x3c
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10a      	bne.n	800178a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001774:	78fa      	ldrb	r2, [r7, #3]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	1a9b      	subs	r3, r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	332a      	adds	r3, #42	@ 0x2a
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
      break;
 8001788:	e0a1      	b.n	80018ce <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800178a:	78fa      	ldrb	r2, [r7, #3]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	332a      	adds	r3, #42	@ 0x2a
 800179a:	2202      	movs	r2, #2
 800179c:	701a      	strb	r2, [r3, #0]
      break;
 800179e:	e096      	b.n	80018ce <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017a0:	78bb      	ldrb	r3, [r7, #2]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d120      	bne.n	80017e8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	1a9b      	subs	r3, r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	333d      	adds	r3, #61	@ 0x3d
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d10a      	bne.n	80017d2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	332a      	adds	r3, #42	@ 0x2a
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017d0:	e07e      	b.n	80018d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017d2:	78fa      	ldrb	r2, [r7, #3]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	1a9b      	subs	r3, r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	332a      	adds	r3, #42	@ 0x2a
 80017e2:	2202      	movs	r2, #2
 80017e4:	701a      	strb	r2, [r3, #0]
      break;
 80017e6:	e073      	b.n	80018d0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017e8:	78fa      	ldrb	r2, [r7, #3]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	333c      	adds	r3, #60	@ 0x3c
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10a      	bne.n	8001814 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017fe:	78fa      	ldrb	r2, [r7, #3]
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	1a9b      	subs	r3, r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	332a      	adds	r3, #42	@ 0x2a
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
      break;
 8001812:	e05d      	b.n	80018d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	332a      	adds	r3, #42	@ 0x2a
 8001824:	2202      	movs	r2, #2
 8001826:	701a      	strb	r2, [r3, #0]
      break;
 8001828:	e052      	b.n	80018d0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800182a:	78bb      	ldrb	r3, [r7, #2]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d120      	bne.n	8001872 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001830:	78fa      	ldrb	r2, [r7, #3]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	333d      	adds	r3, #61	@ 0x3d
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10a      	bne.n	800185c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001846:	78fa      	ldrb	r2, [r7, #3]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	1a9b      	subs	r3, r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	332a      	adds	r3, #42	@ 0x2a
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800185a:	e039      	b.n	80018d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	332a      	adds	r3, #42	@ 0x2a
 800186c:	2202      	movs	r2, #2
 800186e:	701a      	strb	r2, [r3, #0]
      break;
 8001870:	e02e      	b.n	80018d0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	333c      	adds	r3, #60	@ 0x3c
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10a      	bne.n	800189e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	332a      	adds	r3, #42	@ 0x2a
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
      break;
 800189c:	e018      	b.n	80018d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	332a      	adds	r3, #42	@ 0x2a
 80018ae:	2202      	movs	r2, #2
 80018b0:	701a      	strb	r2, [r3, #0]
      break;
 80018b2:	e00d      	b.n	80018d0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b4:	78fa      	ldrb	r2, [r7, #3]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	1a9b      	subs	r3, r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	332a      	adds	r3, #42	@ 0x2a
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
      break;
 80018c8:	e002      	b.n	80018d0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80018ca:	bf00      	nop
 80018cc:	e000      	b.n	80018d0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80018ce:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	332c      	adds	r3, #44	@ 0x2c
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	8b39      	ldrh	r1, [r7, #24]
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4403      	add	r3, r0
 80018f4:	3334      	adds	r3, #52	@ 0x34
 80018f6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	334c      	adds	r3, #76	@ 0x4c
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	3338      	adds	r3, #56	@ 0x38
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	3315      	adds	r3, #21
 8001930:	78fa      	ldrb	r2, [r7, #3]
 8001932:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	334d      	adds	r3, #77	@ 0x4d
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	4613      	mov	r3, r2
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	3310      	adds	r3, #16
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	4413      	add	r3, r2
 800195c:	1d19      	adds	r1, r3, #4
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	799b      	ldrb	r3, [r3, #6]
 8001962:	461a      	mov	r2, r3
 8001964:	f003 ff80 	bl	8005868 <USB_HC_StartXfer>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop

08001974 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f003 fc75 	bl	800527a <USB_GetMode>
 8001990:	4603      	mov	r3, r0
 8001992:	2b01      	cmp	r3, #1
 8001994:	f040 80fb 	bne.w	8001b8e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f003 fc38 	bl	8005212 <USB_ReadInterrupts>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80f1 	beq.w	8001b8c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 fc2f 	bl	8005212 <USB_ReadInterrupts>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80019be:	d104      	bne.n	80019ca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80019c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 fc1f 	bl	8005212 <USB_ReadInterrupts>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019de:	d104      	bne.n	80019ea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80019e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 fc0f 	bl	8005212 <USB_ReadInterrupts>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80019fe:	d104      	bne.n	8001a0a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fbff 	bl	8005212 <USB_ReadInterrupts>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d103      	bne.n	8001a26 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2202      	movs	r2, #2
 8001a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 fbf1 	bl	8005212 <USB_ReadInterrupts>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a3a:	d120      	bne.n	8001a7e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001a44:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d113      	bne.n	8001a7e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a56:	2110      	movs	r1, #16
 8001a58:	6938      	ldr	r0, [r7, #16]
 8001a5a:	f003 fae4 	bl	8005026 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a5e:	6938      	ldr	r0, [r7, #16]
 8001a60:	f003 fb13 	bl	800508a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7a5b      	ldrb	r3, [r3, #9]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d105      	bne.n	8001a78 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 fd04 	bl	8005480 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f006 fccb 	bl	8008414 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fbc5 	bl	8005212 <USB_ReadInterrupts>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a92:	d102      	bne.n	8001a9a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f001 fd4d 	bl	8003534 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 fbb7 	bl	8005212 <USB_ReadInterrupts>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d106      	bne.n	8001abc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f006 fc94 	bl	80083dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2208      	movs	r2, #8
 8001aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f003 fba6 	bl	8005212 <USB_ReadInterrupts>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001acc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ad0:	d139      	bne.n	8001b46 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f004 f940 	bl	8005d5c <USB_HC_ReadInterrupt>
 8001adc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e025      	b.n	8001b30 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d018      	beq.n	8001b2a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	015a      	lsls	r2, r3, #5
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b0e:	d106      	bne.n	8001b1e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	4619      	mov	r1, r3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f905 	bl	8001d26 <HCD_HC_IN_IRQHandler>
 8001b1c:	e005      	b.n	8001b2a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	4619      	mov	r1, r3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 ff67 	bl	80029f8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	795b      	ldrb	r3, [r3, #5]
 8001b34:	461a      	mov	r2, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d3d3      	bcc.n	8001ae4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 fb61 	bl	8005212 <USB_ReadInterrupts>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b10      	cmp	r3, #16
 8001b58:	d101      	bne.n	8001b5e <HAL_HCD_IRQHandler+0x1ea>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_HCD_IRQHandler+0x1ec>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d014      	beq.n	8001b8e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699a      	ldr	r2, [r3, #24]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0210 	bic.w	r2, r2, #16
 8001b72:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f001 fbfe 	bl	8003376 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699a      	ldr	r2, [r3, #24]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 0210 	orr.w	r2, r2, #16
 8001b88:	619a      	str	r2, [r3, #24]
 8001b8a:	e000      	b.n	8001b8e <HAL_HCD_IRQHandler+0x21a>
      return;
 8001b8c:	bf00      	nop
    }
  }
}
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_HCD_Start+0x16>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e013      	b.n	8001bd2 <HAL_HCD_Start+0x3e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 fcc8 	bl	800554e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 f9c1 	bl	8004f4a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <HAL_HCD_Stop+0x16>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e00d      	b.n	8001c0c <HAL_HCD_Stop+0x32>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f004 fa1b 	bl	8006038 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 fc6a 	bl	80054fa <USB_ResetPort>
 8001c26:	4603      	mov	r3, r0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c3c:	78fa      	ldrb	r2, [r7, #3]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	334c      	adds	r3, #76	@ 0x4c
 8001c4c:	781b      	ldrb	r3, [r3, #0]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c66:	78fa      	ldrb	r2, [r7, #3]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	440b      	add	r3, r1
 8001c74:	3338      	adds	r3, #56	@ 0x38
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 fcac 	bl	80055ee <USB_GetCurrentFrame>
 8001c96:	4603      	mov	r3, r0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 fc87 	bl	80055c0 <USB_GetHostSpeed>
 8001cb2:	4603      	mov	r3, r0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001cc8:	78fa      	ldrb	r2, [r7, #3]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	331a      	adds	r3, #26
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	331b      	adds	r3, #27
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001cf0:	78fa      	ldrb	r2, [r7, #3]
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	1a9b      	subs	r3, r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3325      	adds	r3, #37	@ 0x25
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	3324      	adds	r3, #36	@ 0x24
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 fa77 	bl	8005238 <USB_ReadChInterrupts>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d11a      	bne.n	8001d8a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d60:	461a      	mov	r2, r3
 8001d62:	2304      	movs	r3, #4
 8001d64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d66:	78fa      	ldrb	r2, [r7, #3]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	334d      	adds	r3, #77	@ 0x4d
 8001d76:	2207      	movs	r2, #7
 8001d78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 fffb 	bl	8005d7e <USB_HC_Halt>
 8001d88:	e09e      	b.n	8001ec8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	78fa      	ldrb	r2, [r7, #3]
 8001d90:	4611      	mov	r1, r2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 fa50 	bl	8005238 <USB_ReadChInterrupts>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001da2:	d11b      	bne.n	8001ddc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001db0:	461a      	mov	r2, r3
 8001db2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001db6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001db8:	78fa      	ldrb	r2, [r7, #3]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	334d      	adds	r3, #77	@ 0x4d
 8001dc8:	2208      	movs	r2, #8
 8001dca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	78fa      	ldrb	r2, [r7, #3]
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 ffd2 	bl	8005d7e <USB_HC_Halt>
 8001dda:	e075      	b.n	8001ec8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	78fa      	ldrb	r2, [r7, #3]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f003 fa27 	bl	8005238 <USB_ReadChInterrupts>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d11a      	bne.n	8001e2a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e00:	461a      	mov	r2, r3
 8001e02:	2308      	movs	r3, #8
 8001e04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001e06:	78fa      	ldrb	r2, [r7, #3]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	334d      	adds	r3, #77	@ 0x4d
 8001e16:	2206      	movs	r2, #6
 8001e18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	4611      	mov	r1, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 ffab 	bl	8005d7e <USB_HC_Halt>
 8001e28:	e04e      	b.n	8001ec8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	78fa      	ldrb	r2, [r7, #3]
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fa00 	bl	8005238 <USB_ReadChInterrupts>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e42:	d11b      	bne.n	8001e7c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e50:	461a      	mov	r2, r3
 8001e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001e58:	78fa      	ldrb	r2, [r7, #3]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	334d      	adds	r3, #77	@ 0x4d
 8001e68:	2209      	movs	r2, #9
 8001e6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f003 ff82 	bl	8005d7e <USB_HC_Halt>
 8001e7a:	e025      	b.n	8001ec8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 f9d7 	bl	8005238 <USB_ReadChInterrupts>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e90:	2b80      	cmp	r3, #128	@ 0x80
 8001e92:	d119      	bne.n	8001ec8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	015a      	lsls	r2, r3, #5
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	2380      	movs	r3, #128	@ 0x80
 8001ea4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	334d      	adds	r3, #77	@ 0x4d
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 ff5b 	bl	8005d7e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 f9b1 	bl	8005238 <USB_ReadChInterrupts>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ee0:	d112      	bne.n	8001f08 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 ff47 	bl	8005d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	015a      	lsls	r2, r3, #5
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001efc:	461a      	mov	r2, r3
 8001efe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f02:	6093      	str	r3, [r2, #8]
 8001f04:	f000 bd75 	b.w	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	78fa      	ldrb	r2, [r7, #3]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f003 f991 	bl	8005238 <USB_ReadChInterrupts>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	f040 8128 	bne.w	8002172 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2320      	movs	r3, #32
 8001f32:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	331b      	adds	r3, #27
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d119      	bne.n	8001f7e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	331b      	adds	r3, #27
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	0151      	lsls	r1, r2, #5
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	440a      	add	r2, r1
 8001f74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f7c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	799b      	ldrb	r3, [r3, #6]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d01b      	beq.n	8001fbe <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	3330      	adds	r3, #48	@ 0x30
 8001f96:	6819      	ldr	r1, [r3, #0]
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	015a      	lsls	r2, r3, #5
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	1ac9      	subs	r1, r1, r3
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4403      	add	r3, r0
 8001fba:	3338      	adds	r3, #56	@ 0x38
 8001fbc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001fbe:	78fa      	ldrb	r2, [r7, #3]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	334d      	adds	r3, #77	@ 0x4d
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	3344      	adds	r3, #68	@ 0x44
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	3326      	adds	r3, #38	@ 0x26
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800200e:	78fa      	ldrb	r2, [r7, #3]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	3326      	adds	r3, #38	@ 0x26
 800201e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002020:	2b02      	cmp	r3, #2
 8002022:	d110      	bne.n	8002046 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f003 fea6 	bl	8005d7e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4413      	add	r3, r2
 800203a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800203e:	461a      	mov	r2, r3
 8002040:	2310      	movs	r3, #16
 8002042:	6093      	str	r3, [r2, #8]
 8002044:	e03d      	b.n	80020c2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002046:	78fa      	ldrb	r2, [r7, #3]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	3326      	adds	r3, #38	@ 0x26
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b03      	cmp	r3, #3
 800205a:	d00a      	beq.n	8002072 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800205c:	78fa      	ldrb	r2, [r7, #3]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	3326      	adds	r3, #38	@ 0x26
 800206c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800206e:	2b01      	cmp	r3, #1
 8002070:	d127      	bne.n	80020c2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4413      	add	r3, r2
 800207a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	0151      	lsls	r1, r2, #5
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	440a      	add	r2, r1
 8002088:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800208c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002090:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002092:	78fa      	ldrb	r2, [r7, #3]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	334c      	adds	r3, #76	@ 0x4c
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	334c      	adds	r3, #76	@ 0x4c
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	4619      	mov	r1, r3
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f006 f9b7 	bl	8008430 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	799b      	ldrb	r3, [r3, #6]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d13b      	bne.n	8002142 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80020ca:	78fa      	ldrb	r2, [r7, #3]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	3338      	adds	r3, #56	@ 0x38
 80020da:	6819      	ldr	r1, [r3, #0]
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4403      	add	r3, r0
 80020ea:	3328      	adds	r3, #40	@ 0x28
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	440b      	add	r3, r1
 80020f0:	1e59      	subs	r1, r3, #1
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4403      	add	r3, r0
 8002100:	3328      	adds	r3, #40	@ 0x28
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	fbb1 f3f3 	udiv	r3, r1, r3
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 8470 	beq.w	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	333c      	adds	r3, #60	@ 0x3c
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	78fa      	ldrb	r2, [r7, #3]
 8002126:	f083 0301 	eor.w	r3, r3, #1
 800212a:	b2d8      	uxtb	r0, r3
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	333c      	adds	r3, #60	@ 0x3c
 800213a:	4602      	mov	r2, r0
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	f000 bc58 	b.w	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	333c      	adds	r3, #60	@ 0x3c
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	f083 0301 	eor.w	r3, r3, #1
 800215a:	b2d8      	uxtb	r0, r3
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	333c      	adds	r3, #60	@ 0x3c
 800216a:	4602      	mov	r2, r0
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	f000 bc40 	b.w	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f003 f85c 	bl	8005238 <USB_ReadChInterrupts>
 8002180:	4603      	mov	r3, r0
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b20      	cmp	r3, #32
 8002188:	d131      	bne.n	80021ee <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002196:	461a      	mov	r2, r3
 8002198:	2320      	movs	r3, #32
 800219a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	1a9b      	subs	r3, r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	331a      	adds	r3, #26
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	f040 841f 	bne.w	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	331b      	adds	r3, #27
 80021c4:	2201      	movs	r2, #1
 80021c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	334d      	adds	r3, #77	@ 0x4d
 80021d8:	2203      	movs	r2, #3
 80021da:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f003 fdca 	bl	8005d7e <USB_HC_Halt>
 80021ea:	f000 bc02 	b.w	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f003 f81e 	bl	8005238 <USB_ReadChInterrupts>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b02      	cmp	r3, #2
 8002204:	f040 8305 	bne.w	8002812 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002214:	461a      	mov	r2, r3
 8002216:	2302      	movs	r3, #2
 8002218:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	334d      	adds	r3, #77	@ 0x4d
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d114      	bne.n	800225a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	334d      	adds	r3, #77	@ 0x4d
 8002240:	2202      	movs	r2, #2
 8002242:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	334c      	adds	r3, #76	@ 0x4c
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	e2cc      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	334d      	adds	r3, #77	@ 0x4d
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b06      	cmp	r3, #6
 800226e:	d114      	bne.n	800229a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	334d      	adds	r3, #77	@ 0x4d
 8002280:	2202      	movs	r2, #2
 8002282:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	1a9b      	subs	r3, r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	334c      	adds	r3, #76	@ 0x4c
 8002294:	2205      	movs	r2, #5
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	e2ac      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	334d      	adds	r3, #77	@ 0x4d
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b07      	cmp	r3, #7
 80022ae:	d00b      	beq.n	80022c8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	334d      	adds	r3, #77	@ 0x4d
 80022c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80022c2:	2b09      	cmp	r3, #9
 80022c4:	f040 80a6 	bne.w	8002414 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	334d      	adds	r3, #77	@ 0x4d
 80022d8:	2202      	movs	r2, #2
 80022da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	3344      	adds	r3, #68	@ 0x44
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	1c59      	adds	r1, r3, #1
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4403      	add	r3, r0
 80022fc:	3344      	adds	r3, #68	@ 0x44
 80022fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3344      	adds	r3, #68	@ 0x44
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d943      	bls.n	800239e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	3344      	adds	r3, #68	@ 0x44
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	331a      	adds	r3, #26
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d123      	bne.n	8002388 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	331b      	adds	r3, #27
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	331c      	adds	r3, #28
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	0151      	lsls	r1, r2, #5
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	440a      	add	r2, r1
 800237e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002386:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	334c      	adds	r3, #76	@ 0x4c
 8002398:	2204      	movs	r2, #4
 800239a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800239c:	e229      	b.n	80027f2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800239e:	78fa      	ldrb	r2, [r7, #3]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	334c      	adds	r3, #76	@ 0x4c
 80023ae:	2202      	movs	r2, #2
 80023b0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	3326      	adds	r3, #38	@ 0x26
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00b      	beq.n	80023e0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	3326      	adds	r3, #38	@ 0x26
 80023d8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023da:	2b02      	cmp	r3, #2
 80023dc:	f040 8209 	bne.w	80027f2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80023f6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023fe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800240c:	461a      	mov	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002412:	e1ee      	b.n	80027f2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	334d      	adds	r3, #77	@ 0x4d
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b05      	cmp	r3, #5
 8002428:	f040 80c8 	bne.w	80025bc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	334d      	adds	r3, #77	@ 0x4d
 800243c:	2202      	movs	r2, #2
 800243e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	331b      	adds	r3, #27
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b01      	cmp	r3, #1
 8002454:	f040 81ce 	bne.w	80027f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	3326      	adds	r3, #38	@ 0x26
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d16b      	bne.n	8002546 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	3348      	adds	r3, #72	@ 0x48
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	1c59      	adds	r1, r3, #1
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4403      	add	r3, r0
 800248e:	3348      	adds	r3, #72	@ 0x48
 8002490:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	1a9b      	subs	r3, r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	3348      	adds	r3, #72	@ 0x48
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d943      	bls.n	8002530 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	3348      	adds	r3, #72	@ 0x48
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	331b      	adds	r3, #27
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	3344      	adds	r3, #68	@ 0x44
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d809      	bhi.n	80024fa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	331c      	adds	r3, #28
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4413      	add	r3, r2
 8002502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	0151      	lsls	r1, r2, #5
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	440a      	add	r2, r1
 8002510:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002514:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002518:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	334c      	adds	r3, #76	@ 0x4c
 800252a:	2204      	movs	r2, #4
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e014      	b.n	800255a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	334c      	adds	r3, #76	@ 0x4c
 8002540:	2202      	movs	r2, #2
 8002542:	701a      	strb	r2, [r3, #0]
 8002544:	e009      	b.n	800255a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002546:	78fa      	ldrb	r2, [r7, #3]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	334c      	adds	r3, #76	@ 0x4c
 8002556:	2202      	movs	r2, #2
 8002558:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	3326      	adds	r3, #38	@ 0x26
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00b      	beq.n	8002588 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	3326      	adds	r3, #38	@ 0x26
 8002580:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002582:	2b02      	cmp	r3, #2
 8002584:	f040 8136 	bne.w	80027f4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800259e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025b4:	461a      	mov	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e11b      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	334d      	adds	r3, #77	@ 0x4d
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	f040 8081 	bne.w	80026d6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	334d      	adds	r3, #77	@ 0x4d
 80025e4:	2202      	movs	r2, #2
 80025e6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	331b      	adds	r3, #27
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	f040 80fa 	bne.w	80027f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	334c      	adds	r3, #76	@ 0x4c
 8002610:	2202      	movs	r2, #2
 8002612:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	0151      	lsls	r1, r2, #5
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	440a      	add	r2, r1
 800262a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800262e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002632:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	0151      	lsls	r1, r2, #5
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	440a      	add	r2, r1
 800264a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800264e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002652:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	0151      	lsls	r1, r2, #5
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	440a      	add	r2, r1
 800266a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800266e:	f023 0320 	bic.w	r3, r3, #32
 8002672:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	3326      	adds	r3, #38	@ 0x26
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	3326      	adds	r3, #38	@ 0x26
 800269a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800269c:	2b02      	cmp	r3, #2
 800269e:	f040 80a9 	bne.w	80027f4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026b8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026c0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026c2:	78fb      	ldrb	r3, [r7, #3]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ce:	461a      	mov	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	e08e      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	334d      	adds	r3, #77	@ 0x4d
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d143      	bne.n	8002774 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	334d      	adds	r3, #77	@ 0x4d
 80026fc:	2202      	movs	r2, #2
 80026fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	334c      	adds	r3, #76	@ 0x4c
 8002710:	2202      	movs	r2, #2
 8002712:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	3326      	adds	r3, #38	@ 0x26
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	3326      	adds	r3, #38	@ 0x26
 800273a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800273c:	2b02      	cmp	r3, #2
 800273e:	d159      	bne.n	80027f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002756:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800275e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800276c:	461a      	mov	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e03f      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	334d      	adds	r3, #77	@ 0x4d
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b08      	cmp	r3, #8
 8002788:	d126      	bne.n	80027d8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	334d      	adds	r3, #77	@ 0x4d
 800279a:	2202      	movs	r2, #2
 800279c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	3344      	adds	r3, #68	@ 0x44
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	1c59      	adds	r1, r3, #1
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4403      	add	r3, r0
 80027be:	3344      	adds	r3, #68	@ 0x44
 80027c0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	334c      	adds	r3, #76	@ 0x4c
 80027d2:	2204      	movs	r2, #4
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e00d      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	334d      	adds	r3, #77	@ 0x4d
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	f000 8100 	beq.w	80029f0 <HCD_HC_IN_IRQHandler+0xcca>
 80027f0:	e000      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027f2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80027f4:	78fa      	ldrb	r2, [r7, #3]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	334c      	adds	r3, #76	@ 0x4c
 8002804:	781a      	ldrb	r2, [r3, #0]
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	4619      	mov	r1, r3
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f005 fe10 	bl	8008430 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002810:	e0ef      	b.n	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f002 fd0c 	bl	8005238 <USB_ReadChInterrupts>
 8002820:	4603      	mov	r3, r0
 8002822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002826:	2b40      	cmp	r3, #64	@ 0x40
 8002828:	d12f      	bne.n	800288a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4413      	add	r3, r2
 8002832:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002836:	461a      	mov	r2, r3
 8002838:	2340      	movs	r3, #64	@ 0x40
 800283a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	334d      	adds	r3, #77	@ 0x4d
 800284c:	2205      	movs	r2, #5
 800284e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	331a      	adds	r3, #26
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d109      	bne.n	800287a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	3344      	adds	r3, #68	@ 0x44
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	78fa      	ldrb	r2, [r7, #3]
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f003 fa7b 	bl	8005d7e <USB_HC_Halt>
 8002888:	e0b3      	b.n	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f002 fcd0 	bl	8005238 <USB_ReadChInterrupts>
 8002898:	4603      	mov	r3, r0
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b10      	cmp	r3, #16
 80028a0:	f040 80a7 	bne.w	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	3326      	adds	r3, #38	@ 0x26
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d11b      	bne.n	80028f2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	3344      	adds	r3, #68	@ 0x44
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	334d      	adds	r3, #77	@ 0x4d
 80028de:	2204      	movs	r2, #4
 80028e0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 fa47 	bl	8005d7e <USB_HC_Halt>
 80028f0:	e03f      	b.n	8002972 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	3326      	adds	r3, #38	@ 0x26
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	3326      	adds	r3, #38	@ 0x26
 8002918:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800291a:	2b02      	cmp	r3, #2
 800291c:	d129      	bne.n	8002972 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	3344      	adds	r3, #68	@ 0x44
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	799b      	ldrb	r3, [r3, #6]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HCD_HC_IN_IRQHandler+0xc2a>
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	1a9b      	subs	r3, r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	331b      	adds	r3, #27
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d110      	bne.n	8002972 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	334d      	adds	r3, #77	@ 0x4d
 8002960:	2204      	movs	r2, #4
 8002962:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f003 fa06 	bl	8005d7e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	331b      	adds	r3, #27
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d129      	bne.n	80029dc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	331b      	adds	r3, #27
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	0151      	lsls	r1, r2, #5
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	440a      	add	r2, r1
 80029b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ba:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	0151      	lsls	r1, r2, #5
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	440a      	add	r2, r1
 80029d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029d6:	f043 0320 	orr.w	r3, r3, #32
 80029da:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029e8:	461a      	mov	r2, r3
 80029ea:	2310      	movs	r3, #16
 80029ec:	6093      	str	r3, [r2, #8]
 80029ee:	e000      	b.n	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80029f0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 fc0e 	bl	8005238 <USB_ReadChInterrupts>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d11b      	bne.n	8002a5e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a32:	461a      	mov	r2, r3
 8002a34:	2304      	movs	r3, #4
 8002a36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	334d      	adds	r3, #77	@ 0x4d
 8002a48:	2207      	movs	r2, #7
 8002a4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f003 f992 	bl	8005d7e <USB_HC_Halt>
 8002a5a:	f000 bc89 	b.w	8003370 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f002 fbe6 	bl	8005238 <USB_ReadChInterrupts>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	f040 8082 	bne.w	8002b7c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a84:	461a      	mov	r2, r3
 8002a86:	2320      	movs	r3, #32
 8002a88:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	3319      	adds	r3, #25
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d124      	bne.n	8002aea <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	3319      	adds	r3, #25
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	334c      	adds	r3, #76	@ 0x4c
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	334d      	adds	r3, #77	@ 0x4d
 8002ad8:	2203      	movs	r2, #3
 8002ada:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f003 f94a 	bl	8005d7e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	1a9b      	subs	r3, r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	331a      	adds	r3, #26
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	f040 8437 	bne.w	8003370 <HCD_HC_OUT_IRQHandler+0x978>
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	331b      	adds	r3, #27
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f040 842b 	bne.w	8003370 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	3326      	adds	r3, #38	@ 0x26
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d009      	beq.n	8002b44 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	331b      	adds	r3, #27
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	334d      	adds	r3, #77	@ 0x4d
 8002b54:	2203      	movs	r2, #3
 8002b56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f003 f90c 	bl	8005d7e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	3344      	adds	r3, #68	@ 0x44
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e3f9      	b.n	8003370 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f002 fb57 	bl	8005238 <USB_ReadChInterrupts>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b94:	d111      	bne.n	8002bba <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ba8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f003 f8e3 	bl	8005d7e <USB_HC_Halt>
 8002bb8:	e3da      	b.n	8003370 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f002 fb38 	bl	8005238 <USB_ReadChInterrupts>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d168      	bne.n	8002ca4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	3344      	adds	r3, #68	@ 0x44
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	78fa      	ldrb	r2, [r7, #3]
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f002 fb22 	bl	8005238 <USB_ReadChInterrupts>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfa:	2b40      	cmp	r3, #64	@ 0x40
 8002bfc:	d112      	bne.n	8002c24 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3319      	adds	r3, #25
 8002c0e:	2201      	movs	r2, #1
 8002c10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2340      	movs	r3, #64	@ 0x40
 8002c22:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	331b      	adds	r3, #27
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d019      	beq.n	8002c6e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	331b      	adds	r3, #27
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	0151      	lsls	r1, r2, #5
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	440a      	add	r2, r1
 8002c64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c6c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	334d      	adds	r3, #77	@ 0x4d
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f003 f86e 	bl	8005d7e <USB_HC_Halt>
 8002ca2:	e365      	b.n	8003370 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f002 fac3 	bl	8005238 <USB_ReadChInterrupts>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb8:	2b40      	cmp	r3, #64	@ 0x40
 8002cba:	d139      	bne.n	8002d30 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	334d      	adds	r3, #77	@ 0x4d
 8002ccc:	2205      	movs	r2, #5
 8002cce:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	331a      	adds	r3, #26
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d109      	bne.n	8002cfa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3319      	adds	r3, #25
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	3344      	adds	r3, #68	@ 0x44
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f003 f831 	bl	8005d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2340      	movs	r3, #64	@ 0x40
 8002d2c:	6093      	str	r3, [r2, #8]
 8002d2e:	e31f      	b.n	8003370 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f002 fa7d 	bl	8005238 <USB_ReadChInterrupts>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d11a      	bne.n	8002d7e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d54:	461a      	mov	r2, r3
 8002d56:	2308      	movs	r3, #8
 8002d58:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	334d      	adds	r3, #77	@ 0x4d
 8002d6a:	2206      	movs	r2, #6
 8002d6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f003 f801 	bl	8005d7e <USB_HC_Halt>
 8002d7c:	e2f8      	b.n	8003370 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f002 fa56 	bl	8005238 <USB_ReadChInterrupts>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d144      	bne.n	8002e20 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	1a9b      	subs	r3, r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	3344      	adds	r3, #68	@ 0x44
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	334d      	adds	r3, #77	@ 0x4d
 8002dba:	2204      	movs	r2, #4
 8002dbc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3319      	adds	r3, #25
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d114      	bne.n	8002dfe <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	3318      	adds	r3, #24
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	3319      	adds	r3, #25
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f002 ffb9 	bl	8005d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2310      	movs	r3, #16
 8002e1c:	6093      	str	r3, [r2, #8]
 8002e1e:	e2a7      	b.n	8003370 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 fa05 	bl	8005238 <USB_ReadChInterrupts>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e34:	2b80      	cmp	r3, #128	@ 0x80
 8002e36:	f040 8083 	bne.w	8002f40 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	799b      	ldrb	r3, [r3, #6]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d111      	bne.n	8002e66 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	334d      	adds	r3, #77	@ 0x4d
 8002e52:	2207      	movs	r2, #7
 8002e54:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f002 ff8d 	bl	8005d7e <USB_HC_Halt>
 8002e64:	e062      	b.n	8002f2c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	3344      	adds	r3, #68	@ 0x44
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	1c59      	adds	r1, r3, #1
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4403      	add	r3, r0
 8002e86:	3344      	adds	r3, #68	@ 0x44
 8002e88:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3344      	adds	r3, #68	@ 0x44
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d922      	bls.n	8002ee6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	3344      	adds	r3, #68	@ 0x44
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	334c      	adds	r3, #76	@ 0x4c
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	334c      	adds	r3, #76	@ 0x4c
 8002ed8:	781a      	ldrb	r2, [r3, #0]
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	4619      	mov	r1, r3
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f005 faa6 	bl	8008430 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ee4:	e022      	b.n	8002f2c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	334c      	adds	r3, #76	@ 0x4c
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f10:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f18:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f26:	461a      	mov	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2380      	movs	r3, #128	@ 0x80
 8002f3c:	6093      	str	r3, [r2, #8]
 8002f3e:	e217      	b.n	8003370 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f002 f975 	bl	8005238 <USB_ReadChInterrupts>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f58:	d11b      	bne.n	8002f92 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	334d      	adds	r3, #77	@ 0x4d
 8002f6a:	2209      	movs	r2, #9
 8002f6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f002 ff01 	bl	8005d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f8e:	6093      	str	r3, [r2, #8]
 8002f90:	e1ee      	b.n	8003370 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f002 f94c 	bl	8005238 <USB_ReadChInterrupts>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	f040 81df 	bne.w	800336a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2302      	movs	r3, #2
 8002fbc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	334d      	adds	r3, #77	@ 0x4d
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	f040 8093 	bne.w	80030fc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	334d      	adds	r3, #77	@ 0x4d
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	334c      	adds	r3, #76	@ 0x4c
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	3326      	adds	r3, #38	@ 0x26
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d00b      	beq.n	800302c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	3326      	adds	r3, #38	@ 0x26
 8003024:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003026:	2b03      	cmp	r3, #3
 8003028:	f040 8190 	bne.w	800334c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	799b      	ldrb	r3, [r3, #6]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d115      	bne.n	8003060 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	333d      	adds	r3, #61	@ 0x3d
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	f083 0301 	eor.w	r3, r3, #1
 800304c:	b2d8      	uxtb	r0, r3
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	333d      	adds	r3, #61	@ 0x3d
 800305c:	4602      	mov	r2, r0
 800305e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	799b      	ldrb	r3, [r3, #6]
 8003064:	2b01      	cmp	r3, #1
 8003066:	f040 8171 	bne.w	800334c <HCD_HC_OUT_IRQHandler+0x954>
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	3334      	adds	r3, #52	@ 0x34
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8165 	beq.w	800334c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	3334      	adds	r3, #52	@ 0x34
 8003092:	6819      	ldr	r1, [r3, #0]
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4403      	add	r3, r0
 80030a2:	3328      	adds	r3, #40	@ 0x28
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	440b      	add	r3, r1
 80030a8:	1e59      	subs	r1, r3, #1
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4403      	add	r3, r0
 80030b8:	3328      	adds	r3, #40	@ 0x28
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 813f 	beq.w	800334c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	333d      	adds	r3, #61	@ 0x3d
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	f083 0301 	eor.w	r3, r3, #1
 80030e6:	b2d8      	uxtb	r0, r3
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	333d      	adds	r3, #61	@ 0x3d
 80030f6:	4602      	mov	r2, r0
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	e127      	b.n	800334c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	334d      	adds	r3, #77	@ 0x4d
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b03      	cmp	r3, #3
 8003110:	d120      	bne.n	8003154 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	334d      	adds	r3, #77	@ 0x4d
 8003122:	2202      	movs	r2, #2
 8003124:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	331b      	adds	r3, #27
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b01      	cmp	r3, #1
 800313a:	f040 8107 	bne.w	800334c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	334c      	adds	r3, #76	@ 0x4c
 800314e:	2202      	movs	r2, #2
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e0fb      	b.n	800334c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	334d      	adds	r3, #77	@ 0x4d
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b04      	cmp	r3, #4
 8003168:	d13a      	bne.n	80031e0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	334d      	adds	r3, #77	@ 0x4d
 800317a:	2202      	movs	r2, #2
 800317c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	334c      	adds	r3, #76	@ 0x4c
 800318e:	2202      	movs	r2, #2
 8003190:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	331b      	adds	r3, #27
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	f040 80d1 	bne.w	800334c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	331b      	adds	r3, #27
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	0151      	lsls	r1, r2, #5
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	440a      	add	r2, r1
 80031d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031dc:	6053      	str	r3, [r2, #4]
 80031de:	e0b5      	b.n	800334c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	334d      	adds	r3, #77	@ 0x4d
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b05      	cmp	r3, #5
 80031f4:	d114      	bne.n	8003220 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	334d      	adds	r3, #77	@ 0x4d
 8003206:	2202      	movs	r2, #2
 8003208:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	334c      	adds	r3, #76	@ 0x4c
 800321a:	2202      	movs	r2, #2
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e095      	b.n	800334c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	334d      	adds	r3, #77	@ 0x4d
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b06      	cmp	r3, #6
 8003234:	d114      	bne.n	8003260 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	334d      	adds	r3, #77	@ 0x4d
 8003246:	2202      	movs	r2, #2
 8003248:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	334c      	adds	r3, #76	@ 0x4c
 800325a:	2205      	movs	r2, #5
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	e075      	b.n	800334c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	334d      	adds	r3, #77	@ 0x4d
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b07      	cmp	r3, #7
 8003274:	d00a      	beq.n	800328c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	334d      	adds	r3, #77	@ 0x4d
 8003286:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003288:	2b09      	cmp	r3, #9
 800328a:	d170      	bne.n	800336e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800328c:	78fa      	ldrb	r2, [r7, #3]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	334d      	adds	r3, #77	@ 0x4d
 800329c:	2202      	movs	r2, #2
 800329e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	3344      	adds	r3, #68	@ 0x44
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	1c59      	adds	r1, r3, #1
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4403      	add	r3, r0
 80032c0:	3344      	adds	r3, #68	@ 0x44
 80032c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	3344      	adds	r3, #68	@ 0x44
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d914      	bls.n	8003304 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	3344      	adds	r3, #68	@ 0x44
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	334c      	adds	r3, #76	@ 0x4c
 80032fe:	2204      	movs	r2, #4
 8003300:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003302:	e022      	b.n	800334a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	334c      	adds	r3, #76	@ 0x4c
 8003314:	2202      	movs	r2, #2
 8003316:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4413      	add	r3, r2
 8003320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800332e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003336:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4413      	add	r3, r2
 8003340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003344:	461a      	mov	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800334a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800334c:	78fa      	ldrb	r2, [r7, #3]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	334c      	adds	r3, #76	@ 0x4c
 800335c:	781a      	ldrb	r2, [r3, #0]
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f005 f864 	bl	8008430 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003368:	e002      	b.n	8003370 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800336a:	bf00      	nop
 800336c:	e000      	b.n	8003370 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800336e:	bf00      	nop
  }
}
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b08a      	sub	sp, #40	@ 0x28
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003386:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	0c5b      	lsrs	r3, r3, #17
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033aa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d004      	beq.n	80033bc <HCD_RXQLVL_IRQHandler+0x46>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b05      	cmp	r3, #5
 80033b6:	f000 80b6 	beq.w	8003526 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033ba:	e0b7      	b.n	800352c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80b3 	beq.w	800352a <HCD_RXQLVL_IRQHandler+0x1b4>
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	332c      	adds	r3, #44	@ 0x2c
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 80a7 	beq.w	800352a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4613      	mov	r3, r2
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	3338      	adds	r3, #56	@ 0x38
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	18d1      	adds	r1, r2, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4403      	add	r3, r0
 8003400:	3334      	adds	r3, #52	@ 0x34
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4299      	cmp	r1, r3
 8003406:	f200 8083 	bhi.w	8003510 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	332c      	adds	r3, #44	@ 0x2c
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	b292      	uxth	r2, r2
 8003424:	4619      	mov	r1, r3
 8003426:	f001 fe9c 	bl	8005162 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4613      	mov	r3, r2
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	332c      	adds	r3, #44	@ 0x2c
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	18d1      	adds	r1, r2, r3
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4613      	mov	r3, r2
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4403      	add	r3, r0
 800344e:	332c      	adds	r3, #44	@ 0x2c
 8003450:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	3338      	adds	r3, #56	@ 0x38
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	18d1      	adds	r1, r2, r3
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4613      	mov	r3, r2
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4403      	add	r3, r0
 8003476:	3338      	adds	r3, #56	@ 0x38
 8003478:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	4413      	add	r3, r2
 8003482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	0cdb      	lsrs	r3, r3, #19
 800348a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800348e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	3328      	adds	r3, #40	@ 0x28
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d13f      	bne.n	800352a <HCD_RXQLVL_IRQHandler+0x1b4>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d03c      	beq.n	800352a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034c6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034ce:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034dc:	461a      	mov	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4613      	mov	r3, r2
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	333c      	adds	r3, #60	@ 0x3c
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	f083 0301 	eor.w	r3, r3, #1
 80034f8:	b2d8      	uxtb	r0, r3
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	333c      	adds	r3, #60	@ 0x3c
 800350a:	4602      	mov	r2, r0
 800350c:	701a      	strb	r2, [r3, #0]
      break;
 800350e:	e00c      	b.n	800352a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	334c      	adds	r3, #76	@ 0x4c
 8003520:	2204      	movs	r2, #4
 8003522:	701a      	strb	r2, [r3, #0]
      break;
 8003524:	e001      	b.n	800352a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003526:	bf00      	nop
 8003528:	e000      	b.n	800352c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800352a:	bf00      	nop
  }
}
 800352c:	bf00      	nop
 800352e:	3728      	adds	r7, #40	@ 0x28
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003560:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b02      	cmp	r3, #2
 800356a:	d10b      	bne.n	8003584 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d102      	bne.n	800357c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f004 ff3e 	bl	80083f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f043 0302 	orr.w	r3, r3, #2
 8003582:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b08      	cmp	r3, #8
 800358c:	d132      	bne.n	80035f4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f043 0308 	orr.w	r3, r3, #8
 8003594:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b04      	cmp	r3, #4
 800359e:	d126      	bne.n	80035ee <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	7a5b      	ldrb	r3, [r3, #9]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d113      	bne.n	80035d0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80035ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035b2:	d106      	bne.n	80035c2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2102      	movs	r1, #2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f001 ff60 	bl	8005480 <USB_InitFSLSPClkSel>
 80035c0:	e011      	b.n	80035e6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2101      	movs	r1, #1
 80035c8:	4618      	mov	r0, r3
 80035ca:	f001 ff59 	bl	8005480 <USB_InitFSLSPClkSel>
 80035ce:	e00a      	b.n	80035e6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	79db      	ldrb	r3, [r3, #7]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d106      	bne.n	80035e6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035de:	461a      	mov	r2, r3
 80035e0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80035e4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f004 ff30 	bl	800844c <HAL_HCD_PortEnabled_Callback>
 80035ec:	e002      	b.n	80035f4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f004 ff3a 	bl	8008468 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d103      	bne.n	8003606 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f043 0320 	orr.w	r3, r3, #32
 8003604:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800360c:	461a      	mov	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	6013      	str	r3, [r2, #0]
}
 8003612:	bf00      	nop
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e12b      	b.n	8003886 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd f982 	bl	800094c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2224      	movs	r2, #36	@ 0x24
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800366e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800367e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003680:	f001 fa20 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 8003684:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4a81      	ldr	r2, [pc, #516]	@ (8003890 <HAL_I2C_Init+0x274>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d807      	bhi.n	80036a0 <HAL_I2C_Init+0x84>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4a80      	ldr	r2, [pc, #512]	@ (8003894 <HAL_I2C_Init+0x278>)
 8003694:	4293      	cmp	r3, r2
 8003696:	bf94      	ite	ls
 8003698:	2301      	movls	r3, #1
 800369a:	2300      	movhi	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	e006      	b.n	80036ae <HAL_I2C_Init+0x92>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4a7d      	ldr	r2, [pc, #500]	@ (8003898 <HAL_I2C_Init+0x27c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	bf94      	ite	ls
 80036a8:	2301      	movls	r3, #1
 80036aa:	2300      	movhi	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e0e7      	b.n	8003886 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4a78      	ldr	r2, [pc, #480]	@ (800389c <HAL_I2C_Init+0x280>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	0c9b      	lsrs	r3, r3, #18
 80036c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003890 <HAL_I2C_Init+0x274>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d802      	bhi.n	80036f0 <HAL_I2C_Init+0xd4>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	3301      	adds	r3, #1
 80036ee:	e009      	b.n	8003704 <HAL_I2C_Init+0xe8>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	4a69      	ldr	r2, [pc, #420]	@ (80038a0 <HAL_I2C_Init+0x284>)
 80036fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003700:	099b      	lsrs	r3, r3, #6
 8003702:	3301      	adds	r3, #1
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	430b      	orrs	r3, r1
 800370a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003716:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	495c      	ldr	r1, [pc, #368]	@ (8003890 <HAL_I2C_Init+0x274>)
 8003720:	428b      	cmp	r3, r1
 8003722:	d819      	bhi.n	8003758 <HAL_I2C_Init+0x13c>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1e59      	subs	r1, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003732:	1c59      	adds	r1, r3, #1
 8003734:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003738:	400b      	ands	r3, r1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_I2C_Init+0x138>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1e59      	subs	r1, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fbb1 f3f3 	udiv	r3, r1, r3
 800374c:	3301      	adds	r3, #1
 800374e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003752:	e051      	b.n	80037f8 <HAL_I2C_Init+0x1dc>
 8003754:	2304      	movs	r3, #4
 8003756:	e04f      	b.n	80037f8 <HAL_I2C_Init+0x1dc>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d111      	bne.n	8003784 <HAL_I2C_Init+0x168>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1e58      	subs	r0, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	440b      	add	r3, r1
 800376e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003772:	3301      	adds	r3, #1
 8003774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf0c      	ite	eq
 800377c:	2301      	moveq	r3, #1
 800377e:	2300      	movne	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	e012      	b.n	80037aa <HAL_I2C_Init+0x18e>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1e58      	subs	r0, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6859      	ldr	r1, [r3, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	0099      	lsls	r1, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	fbb0 f3f3 	udiv	r3, r0, r3
 800379a:	3301      	adds	r3, #1
 800379c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf0c      	ite	eq
 80037a4:	2301      	moveq	r3, #1
 80037a6:	2300      	movne	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Init+0x196>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e022      	b.n	80037f8 <HAL_I2C_Init+0x1dc>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10e      	bne.n	80037d8 <HAL_I2C_Init+0x1bc>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1e58      	subs	r0, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6859      	ldr	r1, [r3, #4]
 80037c2:	460b      	mov	r3, r1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	440b      	add	r3, r1
 80037c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80037cc:	3301      	adds	r3, #1
 80037ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037d6:	e00f      	b.n	80037f8 <HAL_I2C_Init+0x1dc>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1e58      	subs	r0, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	0099      	lsls	r1, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ee:	3301      	adds	r3, #1
 80037f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	6809      	ldr	r1, [r1, #0]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69da      	ldr	r2, [r3, #28]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003826:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6911      	ldr	r1, [r2, #16]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68d2      	ldr	r2, [r2, #12]
 8003832:	4311      	orrs	r1, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	430b      	orrs	r3, r1
 800383a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	000186a0 	.word	0x000186a0
 8003894:	001e847f 	.word	0x001e847f
 8003898:	003d08ff 	.word	0x003d08ff
 800389c:	431bde83 	.word	0x431bde83
 80038a0:	10624dd3 	.word	0x10624dd3

080038a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e128      	b.n	8003b08 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a90      	ldr	r2, [pc, #576]	@ (8003b10 <HAL_I2S_Init+0x26c>)
 80038ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7fd f883 	bl	80009dc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2202      	movs	r2, #2
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80038ec:	f023 030f 	bic.w	r3, r3, #15
 80038f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2202      	movs	r2, #2
 80038f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d060      	beq.n	80039c4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d102      	bne.n	8003910 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800390a:	2310      	movs	r3, #16
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e001      	b.n	8003914 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003910:	2320      	movs	r3, #32
 8003912:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b20      	cmp	r3, #32
 800391a:	d802      	bhi.n	8003922 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003922:	2001      	movs	r0, #1
 8003924:	f001 f9c4 	bl	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003928:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003932:	d125      	bne.n	8003980 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d010      	beq.n	800395e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	fbb2 f2f3 	udiv	r2, r2, r3
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	461a      	mov	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	3305      	adds	r3, #5
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	e01f      	b.n	800399e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	fbb2 f2f3 	udiv	r2, r2, r3
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	461a      	mov	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	fbb2 f3f3 	udiv	r3, r2, r3
 800397a:	3305      	adds	r3, #5
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	e00e      	b.n	800399e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	fbb2 f2f3 	udiv	r2, r2, r3
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	461a      	mov	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	fbb2 f3f3 	udiv	r3, r2, r3
 800399a:	3305      	adds	r3, #5
 800399c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4a5c      	ldr	r2, [pc, #368]	@ (8003b14 <HAL_I2S_Init+0x270>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	08db      	lsrs	r3, r3, #3
 80039a8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	e003      	b.n	80039cc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80039c4:	2302      	movs	r3, #2
 80039c6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d902      	bls.n	80039d8 <HAL_I2S_Init+0x134>
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	2bff      	cmp	r3, #255	@ 0xff
 80039d6:	d907      	bls.n	80039e8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039dc:	f043 0210 	orr.w	r2, r3, #16
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e08f      	b.n	8003b08 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	ea42 0103 	orr.w	r1, r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a06:	f023 030f 	bic.w	r3, r3, #15
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6851      	ldr	r1, [r2, #4]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6892      	ldr	r2, [r2, #8]
 8003a12:	4311      	orrs	r1, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	68d2      	ldr	r2, [r2, #12]
 8003a18:	4311      	orrs	r1, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6992      	ldr	r2, [r2, #24]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a2a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d161      	bne.n	8003af8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a38      	ldr	r2, [pc, #224]	@ (8003b18 <HAL_I2S_Init+0x274>)
 8003a38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a37      	ldr	r2, [pc, #220]	@ (8003b1c <HAL_I2S_Init+0x278>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d101      	bne.n	8003a48 <HAL_I2S_Init+0x1a4>
 8003a44:	4b36      	ldr	r3, [pc, #216]	@ (8003b20 <HAL_I2S_Init+0x27c>)
 8003a46:	e001      	b.n	8003a4c <HAL_I2S_Init+0x1a8>
 8003a48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6812      	ldr	r2, [r2, #0]
 8003a52:	4932      	ldr	r1, [pc, #200]	@ (8003b1c <HAL_I2S_Init+0x278>)
 8003a54:	428a      	cmp	r2, r1
 8003a56:	d101      	bne.n	8003a5c <HAL_I2S_Init+0x1b8>
 8003a58:	4a31      	ldr	r2, [pc, #196]	@ (8003b20 <HAL_I2S_Init+0x27c>)
 8003a5a:	e001      	b.n	8003a60 <HAL_I2S_Init+0x1bc>
 8003a5c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a60:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a64:	f023 030f 	bic.w	r3, r3, #15
 8003a68:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8003b1c <HAL_I2S_Init+0x278>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d101      	bne.n	8003a78 <HAL_I2S_Init+0x1d4>
 8003a74:	4b2a      	ldr	r3, [pc, #168]	@ (8003b20 <HAL_I2S_Init+0x27c>)
 8003a76:	e001      	b.n	8003a7c <HAL_I2S_Init+0x1d8>
 8003a78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a25      	ldr	r2, [pc, #148]	@ (8003b1c <HAL_I2S_Init+0x278>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d101      	bne.n	8003a8e <HAL_I2S_Init+0x1ea>
 8003a8a:	4b25      	ldr	r3, [pc, #148]	@ (8003b20 <HAL_I2S_Init+0x27c>)
 8003a8c:	e001      	b.n	8003a92 <HAL_I2S_Init+0x1ee>
 8003a8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a9e:	d003      	beq.n	8003aa8 <HAL_I2S_Init+0x204>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d103      	bne.n	8003ab0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003aa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	e001      	b.n	8003ab4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	897b      	ldrh	r3, [r7, #10]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ae0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8003b1c <HAL_I2S_Init+0x278>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d101      	bne.n	8003af0 <HAL_I2S_Init+0x24c>
 8003aec:	4b0c      	ldr	r3, [pc, #48]	@ (8003b20 <HAL_I2S_Init+0x27c>)
 8003aee:	e001      	b.n	8003af4 <HAL_I2S_Init+0x250>
 8003af0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003af4:	897a      	ldrh	r2, [r7, #10]
 8003af6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3720      	adds	r7, #32
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	08003c1b 	.word	0x08003c1b
 8003b14:	cccccccd 	.word	0xcccccccd
 8003b18:	08003d31 	.word	0x08003d31
 8003b1c:	40003800 	.word	0x40003800
 8003b20:	40003400 	.word	0x40003400

08003b24 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	881a      	ldrh	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	1c9a      	adds	r2, r3, #2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10e      	bne.n	8003bb4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ba4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ffb8 	bl	8003b24 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bce:	b292      	uxth	r2, r2
 8003bd0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd6:	1c9a      	adds	r2, r3, #2
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10e      	bne.n	8003c12 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c02:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ff93 	bl	8003b38 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b086      	sub	sp, #24
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d13a      	bne.n	8003cac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d109      	bne.n	8003c54 <I2S_IRQHandler+0x3a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4a:	2b40      	cmp	r3, #64	@ 0x40
 8003c4c:	d102      	bne.n	8003c54 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff ffb4 	bl	8003bbc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5a:	2b40      	cmp	r3, #64	@ 0x40
 8003c5c:	d126      	bne.n	8003cac <I2S_IRQHandler+0x92>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d11f      	bne.n	8003cac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c7a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9e:	f043 0202 	orr.w	r2, r3, #2
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff ff50 	bl	8003b4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d136      	bne.n	8003d26 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d109      	bne.n	8003cd6 <I2S_IRQHandler+0xbc>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ccc:	2b80      	cmp	r3, #128	@ 0x80
 8003cce:	d102      	bne.n	8003cd6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff ff45 	bl	8003b60 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d122      	bne.n	8003d26 <I2S_IRQHandler+0x10c>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d11b      	bne.n	8003d26 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003cfc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d18:	f043 0204 	orr.w	r2, r3, #4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff ff13 	bl	8003b4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d26:	bf00      	nop
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a92      	ldr	r2, [pc, #584]	@ (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d4a:	4b92      	ldr	r3, [pc, #584]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d4c:	e001      	b.n	8003d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a8b      	ldr	r2, [pc, #556]	@ (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d101      	bne.n	8003d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d68:	4b8a      	ldr	r3, [pc, #552]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d6a:	e001      	b.n	8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d7c:	d004      	beq.n	8003d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f040 8099 	bne.w	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d107      	bne.n	8003da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f925 	bl	8003fec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d107      	bne.n	8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f9c8 	bl	800414c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc2:	2b40      	cmp	r3, #64	@ 0x40
 8003dc4:	d13a      	bne.n	8003e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d035      	beq.n	8003e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a6e      	ldr	r2, [pc, #440]	@ (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003dda:	4b6e      	ldr	r3, [pc, #440]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ddc:	e001      	b.n	8003de2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003dde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4969      	ldr	r1, [pc, #420]	@ (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dea:	428b      	cmp	r3, r1
 8003dec:	d101      	bne.n	8003df2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003dee:	4b69      	ldr	r3, [pc, #420]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003df0:	e001      	b.n	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003df2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003df6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003dfa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2e:	f043 0202 	orr.w	r2, r3, #2
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff fe88 	bl	8003b4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	f040 80c3 	bne.w	8003fce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 80bd 	beq.w	8003fce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e62:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a49      	ldr	r2, [pc, #292]	@ (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e6e:	4b49      	ldr	r3, [pc, #292]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e70:	e001      	b.n	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4944      	ldr	r1, [pc, #272]	@ (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e7e:	428b      	cmp	r3, r1
 8003e80:	d101      	bne.n	8003e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e82:	4b44      	ldr	r3, [pc, #272]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e84:	e001      	b.n	8003e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e8a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e8e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e90:	2300      	movs	r3, #0
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eaa:	f043 0204 	orr.w	r2, r3, #4
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff fe4a 	bl	8003b4c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003eb8:	e089      	b.n	8003fce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d107      	bne.n	8003ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f8be 	bl	8004050 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d107      	bne.n	8003eee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f8fd 	bl	80040e8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef4:	2b40      	cmp	r3, #64	@ 0x40
 8003ef6:	d12f      	bne.n	8003f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d02a      	beq.n	8003f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f10:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1e      	ldr	r2, [pc, #120]	@ (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d101      	bne.n	8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f1e:	e001      	b.n	8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4919      	ldr	r1, [pc, #100]	@ (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f2c:	428b      	cmp	r3, r1
 8003f2e:	d101      	bne.n	8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f30:	4b18      	ldr	r3, [pc, #96]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f32:	e001      	b.n	8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f3c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	f043 0202 	orr.w	r2, r3, #2
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff fdfa 	bl	8003b4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d136      	bne.n	8003fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d031      	beq.n	8003fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a07      	ldr	r2, [pc, #28]	@ (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f76:	4b07      	ldr	r3, [pc, #28]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f78:	e001      	b.n	8003f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4902      	ldr	r1, [pc, #8]	@ (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f86:	428b      	cmp	r3, r1
 8003f88:	d106      	bne.n	8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003f8a:	4b02      	ldr	r3, [pc, #8]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f8c:	e006      	b.n	8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003f8e:	bf00      	nop
 8003f90:	40003800 	.word	0x40003800
 8003f94:	40003400 	.word	0x40003400
 8003f98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f9c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fa0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fb0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fbe:	f043 0204 	orr.w	r2, r3, #4
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff fdc0 	bl	8003b4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fcc:	e000      	b.n	8003fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fce:	bf00      	nop
}
 8003fd0:	bf00      	nop
 8003fd2:	3720      	adds	r7, #32
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	1c99      	adds	r1, r3, #2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6251      	str	r1, [r2, #36]	@ 0x24
 8003ffe:	881a      	ldrh	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d113      	bne.n	8004046 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800402c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff ffc9 	bl	8003fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	1c99      	adds	r1, r3, #2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6251      	str	r1, [r2, #36]	@ 0x24
 8004062:	8819      	ldrh	r1, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1d      	ldr	r2, [pc, #116]	@ (80040e0 <I2SEx_TxISR_I2SExt+0x90>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d101      	bne.n	8004072 <I2SEx_TxISR_I2SExt+0x22>
 800406e:	4b1d      	ldr	r3, [pc, #116]	@ (80040e4 <I2SEx_TxISR_I2SExt+0x94>)
 8004070:	e001      	b.n	8004076 <I2SEx_TxISR_I2SExt+0x26>
 8004072:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004076:	460a      	mov	r2, r1
 8004078:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d121      	bne.n	80040d6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a12      	ldr	r2, [pc, #72]	@ (80040e0 <I2SEx_TxISR_I2SExt+0x90>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d101      	bne.n	80040a0 <I2SEx_TxISR_I2SExt+0x50>
 800409c:	4b11      	ldr	r3, [pc, #68]	@ (80040e4 <I2SEx_TxISR_I2SExt+0x94>)
 800409e:	e001      	b.n	80040a4 <I2SEx_TxISR_I2SExt+0x54>
 80040a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	490d      	ldr	r1, [pc, #52]	@ (80040e0 <I2SEx_TxISR_I2SExt+0x90>)
 80040ac:	428b      	cmp	r3, r1
 80040ae:	d101      	bne.n	80040b4 <I2SEx_TxISR_I2SExt+0x64>
 80040b0:	4b0c      	ldr	r3, [pc, #48]	@ (80040e4 <I2SEx_TxISR_I2SExt+0x94>)
 80040b2:	e001      	b.n	80040b8 <I2SEx_TxISR_I2SExt+0x68>
 80040b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d106      	bne.n	80040d6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff ff81 	bl	8003fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40003800 	.word	0x40003800
 80040e4:	40003400 	.word	0x40003400

080040e8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68d8      	ldr	r0, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fa:	1c99      	adds	r1, r3, #2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004100:	b282      	uxth	r2, r0
 8004102:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004116:	b29b      	uxth	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d113      	bne.n	8004144 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800412a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff ff4a 	bl	8003fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004144:	bf00      	nop
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a20      	ldr	r2, [pc, #128]	@ (80041dc <I2SEx_RxISR_I2SExt+0x90>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d101      	bne.n	8004162 <I2SEx_RxISR_I2SExt+0x16>
 800415e:	4b20      	ldr	r3, [pc, #128]	@ (80041e0 <I2SEx_RxISR_I2SExt+0x94>)
 8004160:	e001      	b.n	8004166 <I2SEx_RxISR_I2SExt+0x1a>
 8004162:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004166:	68d8      	ldr	r0, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416c:	1c99      	adds	r1, r3, #2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004172:	b282      	uxth	r2, r0
 8004174:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d121      	bne.n	80041d2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a12      	ldr	r2, [pc, #72]	@ (80041dc <I2SEx_RxISR_I2SExt+0x90>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d101      	bne.n	800419c <I2SEx_RxISR_I2SExt+0x50>
 8004198:	4b11      	ldr	r3, [pc, #68]	@ (80041e0 <I2SEx_RxISR_I2SExt+0x94>)
 800419a:	e001      	b.n	80041a0 <I2SEx_RxISR_I2SExt+0x54>
 800419c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	490d      	ldr	r1, [pc, #52]	@ (80041dc <I2SEx_RxISR_I2SExt+0x90>)
 80041a8:	428b      	cmp	r3, r1
 80041aa:	d101      	bne.n	80041b0 <I2SEx_RxISR_I2SExt+0x64>
 80041ac:	4b0c      	ldr	r3, [pc, #48]	@ (80041e0 <I2SEx_RxISR_I2SExt+0x94>)
 80041ae:	e001      	b.n	80041b4 <I2SEx_RxISR_I2SExt+0x68>
 80041b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041b8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff ff03 	bl	8003fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40003800 	.word	0x40003800
 80041e0:	40003400 	.word	0x40003400

080041e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e267      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d075      	beq.n	80042ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004202:	4b88      	ldr	r3, [pc, #544]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b04      	cmp	r3, #4
 800420c:	d00c      	beq.n	8004228 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800420e:	4b85      	ldr	r3, [pc, #532]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004216:	2b08      	cmp	r3, #8
 8004218:	d112      	bne.n	8004240 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800421a:	4b82      	ldr	r3, [pc, #520]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004222:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004226:	d10b      	bne.n	8004240 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004228:	4b7e      	ldr	r3, [pc, #504]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d05b      	beq.n	80042ec <HAL_RCC_OscConfig+0x108>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d157      	bne.n	80042ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e242      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004248:	d106      	bne.n	8004258 <HAL_RCC_OscConfig+0x74>
 800424a:	4b76      	ldr	r3, [pc, #472]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a75      	ldr	r2, [pc, #468]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e01d      	b.n	8004294 <HAL_RCC_OscConfig+0xb0>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004260:	d10c      	bne.n	800427c <HAL_RCC_OscConfig+0x98>
 8004262:	4b70      	ldr	r3, [pc, #448]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a6f      	ldr	r2, [pc, #444]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	4b6d      	ldr	r3, [pc, #436]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a6c      	ldr	r2, [pc, #432]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e00b      	b.n	8004294 <HAL_RCC_OscConfig+0xb0>
 800427c:	4b69      	ldr	r3, [pc, #420]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a68      	ldr	r2, [pc, #416]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	4b66      	ldr	r3, [pc, #408]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a65      	ldr	r2, [pc, #404]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 800428e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d013      	beq.n	80042c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429c:	f7fc fd78 	bl	8000d90 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a4:	f7fc fd74 	bl	8000d90 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	@ 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e207      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0xc0>
 80042c2:	e014      	b.n	80042ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c4:	f7fc fd64 	bl	8000d90 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042cc:	f7fc fd60 	bl	8000d90 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	@ 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e1f3      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042de:	4b51      	ldr	r3, [pc, #324]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0xe8>
 80042ea:	e000      	b.n	80042ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d063      	beq.n	80043c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004306:	4b47      	ldr	r3, [pc, #284]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800430e:	2b08      	cmp	r3, #8
 8004310:	d11c      	bne.n	800434c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004312:	4b44      	ldr	r3, [pc, #272]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d116      	bne.n	800434c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431e:	4b41      	ldr	r3, [pc, #260]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <HAL_RCC_OscConfig+0x152>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d001      	beq.n	8004336 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e1c7      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004336:	4b3b      	ldr	r3, [pc, #236]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4937      	ldr	r1, [pc, #220]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004346:	4313      	orrs	r3, r2
 8004348:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800434a:	e03a      	b.n	80043c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d020      	beq.n	8004396 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004354:	4b34      	ldr	r3, [pc, #208]	@ (8004428 <HAL_RCC_OscConfig+0x244>)
 8004356:	2201      	movs	r2, #1
 8004358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435a:	f7fc fd19 	bl	8000d90 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004362:	f7fc fd15 	bl	8000d90 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e1a8      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004374:	4b2b      	ldr	r3, [pc, #172]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004380:	4b28      	ldr	r3, [pc, #160]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	4925      	ldr	r1, [pc, #148]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004390:	4313      	orrs	r3, r2
 8004392:	600b      	str	r3, [r1, #0]
 8004394:	e015      	b.n	80043c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004396:	4b24      	ldr	r3, [pc, #144]	@ (8004428 <HAL_RCC_OscConfig+0x244>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fc fcf8 	bl	8000d90 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a4:	f7fc fcf4 	bl	8000d90 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e187      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d036      	beq.n	800443c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d016      	beq.n	8004404 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d6:	4b15      	ldr	r3, [pc, #84]	@ (800442c <HAL_RCC_OscConfig+0x248>)
 80043d8:	2201      	movs	r2, #1
 80043da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7fc fcd8 	bl	8000d90 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e4:	f7fc fcd4 	bl	8000d90 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e167      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 80043f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0x200>
 8004402:	e01b      	b.n	800443c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004404:	4b09      	ldr	r3, [pc, #36]	@ (800442c <HAL_RCC_OscConfig+0x248>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440a:	f7fc fcc1 	bl	8000d90 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004410:	e00e      	b.n	8004430 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004412:	f7fc fcbd 	bl	8000d90 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d907      	bls.n	8004430 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e150      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
 8004424:	40023800 	.word	0x40023800
 8004428:	42470000 	.word	0x42470000
 800442c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004430:	4b88      	ldr	r3, [pc, #544]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 8004432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1ea      	bne.n	8004412 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8097 	beq.w	8004578 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444a:	2300      	movs	r3, #0
 800444c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444e:	4b81      	ldr	r3, [pc, #516]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10f      	bne.n	800447a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	4b7d      	ldr	r3, [pc, #500]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	4a7c      	ldr	r2, [pc, #496]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 8004464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004468:	6413      	str	r3, [r2, #64]	@ 0x40
 800446a:	4b7a      	ldr	r3, [pc, #488]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004476:	2301      	movs	r3, #1
 8004478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447a:	4b77      	ldr	r3, [pc, #476]	@ (8004658 <HAL_RCC_OscConfig+0x474>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d118      	bne.n	80044b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004486:	4b74      	ldr	r3, [pc, #464]	@ (8004658 <HAL_RCC_OscConfig+0x474>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a73      	ldr	r2, [pc, #460]	@ (8004658 <HAL_RCC_OscConfig+0x474>)
 800448c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004492:	f7fc fc7d 	bl	8000d90 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449a:	f7fc fc79 	bl	8000d90 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e10c      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004658 <HAL_RCC_OscConfig+0x474>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f0      	beq.n	800449a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d106      	bne.n	80044ce <HAL_RCC_OscConfig+0x2ea>
 80044c0:	4b64      	ldr	r3, [pc, #400]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c4:	4a63      	ldr	r2, [pc, #396]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80044cc:	e01c      	b.n	8004508 <HAL_RCC_OscConfig+0x324>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b05      	cmp	r3, #5
 80044d4:	d10c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x30c>
 80044d6:	4b5f      	ldr	r3, [pc, #380]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044da:	4a5e      	ldr	r2, [pc, #376]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80044e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ee:	e00b      	b.n	8004508 <HAL_RCC_OscConfig+0x324>
 80044f0:	4b58      	ldr	r3, [pc, #352]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f4:	4a57      	ldr	r2, [pc, #348]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044f6:	f023 0301 	bic.w	r3, r3, #1
 80044fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80044fc:	4b55      	ldr	r3, [pc, #340]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004500:	4a54      	ldr	r2, [pc, #336]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 8004502:	f023 0304 	bic.w	r3, r3, #4
 8004506:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d015      	beq.n	800453c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004510:	f7fc fc3e 	bl	8000d90 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004516:	e00a      	b.n	800452e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004518:	f7fc fc3a 	bl	8000d90 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e0cb      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452e:	4b49      	ldr	r3, [pc, #292]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0ee      	beq.n	8004518 <HAL_RCC_OscConfig+0x334>
 800453a:	e014      	b.n	8004566 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453c:	f7fc fc28 	bl	8000d90 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004542:	e00a      	b.n	800455a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004544:	f7fc fc24 	bl	8000d90 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e0b5      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455a:	4b3e      	ldr	r3, [pc, #248]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1ee      	bne.n	8004544 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004566:	7dfb      	ldrb	r3, [r7, #23]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d105      	bne.n	8004578 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800456c:	4b39      	ldr	r3, [pc, #228]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 800456e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004570:	4a38      	ldr	r2, [pc, #224]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 8004572:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004576:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80a1 	beq.w	80046c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004582:	4b34      	ldr	r3, [pc, #208]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b08      	cmp	r3, #8
 800458c:	d05c      	beq.n	8004648 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d141      	bne.n	800461a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004596:	4b31      	ldr	r3, [pc, #196]	@ (800465c <HAL_RCC_OscConfig+0x478>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459c:	f7fc fbf8 	bl	8000d90 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fc fbf4 	bl	8000d90 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e087      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b6:	4b27      	ldr	r3, [pc, #156]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69da      	ldr	r2, [r3, #28]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	019b      	lsls	r3, r3, #6
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d8:	085b      	lsrs	r3, r3, #1
 80045da:	3b01      	subs	r3, #1
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e4:	061b      	lsls	r3, r3, #24
 80045e6:	491b      	ldr	r1, [pc, #108]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ec:	4b1b      	ldr	r3, [pc, #108]	@ (800465c <HAL_RCC_OscConfig+0x478>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f2:	f7fc fbcd 	bl	8000d90 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fa:	f7fc fbc9 	bl	8000d90 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e05c      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800460c:	4b11      	ldr	r3, [pc, #68]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x416>
 8004618:	e054      	b.n	80046c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461a:	4b10      	ldr	r3, [pc, #64]	@ (800465c <HAL_RCC_OscConfig+0x478>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004620:	f7fc fbb6 	bl	8000d90 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004628:	f7fc fbb2 	bl	8000d90 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e045      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463a:	4b06      	ldr	r3, [pc, #24]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x444>
 8004646:	e03d      	b.n	80046c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d107      	bne.n	8004660 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e038      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
 8004654:	40023800 	.word	0x40023800
 8004658:	40007000 	.word	0x40007000
 800465c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004660:	4b1b      	ldr	r3, [pc, #108]	@ (80046d0 <HAL_RCC_OscConfig+0x4ec>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d028      	beq.n	80046c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004678:	429a      	cmp	r2, r3
 800467a:	d121      	bne.n	80046c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004686:	429a      	cmp	r2, r3
 8004688:	d11a      	bne.n	80046c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004690:	4013      	ands	r3, r2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004696:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004698:	4293      	cmp	r3, r2
 800469a:	d111      	bne.n	80046c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	3b01      	subs	r3, #1
 80046aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d107      	bne.n	80046c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800

080046d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0cc      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046e8:	4b68      	ldr	r3, [pc, #416]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d90c      	bls.n	8004710 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	4b65      	ldr	r3, [pc, #404]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fe:	4b63      	ldr	r3, [pc, #396]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d001      	beq.n	8004710 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0b8      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d020      	beq.n	800475e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004728:	4b59      	ldr	r3, [pc, #356]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4a58      	ldr	r2, [pc, #352]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004732:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004740:	4b53      	ldr	r3, [pc, #332]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4a52      	ldr	r2, [pc, #328]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800474a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800474c:	4b50      	ldr	r3, [pc, #320]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	494d      	ldr	r1, [pc, #308]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	4313      	orrs	r3, r2
 800475c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d044      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d107      	bne.n	8004782 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004772:	4b47      	ldr	r3, [pc, #284]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d119      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e07f      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d003      	beq.n	8004792 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800478e:	2b03      	cmp	r3, #3
 8004790:	d107      	bne.n	80047a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004792:	4b3f      	ldr	r3, [pc, #252]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d109      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e06f      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e067      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047b2:	4b37      	ldr	r3, [pc, #220]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f023 0203 	bic.w	r2, r3, #3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4934      	ldr	r1, [pc, #208]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047c4:	f7fc fae4 	bl	8000d90 <HAL_GetTick>
 80047c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047cc:	f7fc fae0 	bl	8000d90 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e04f      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 020c 	and.w	r2, r3, #12
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d1eb      	bne.n	80047cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047f4:	4b25      	ldr	r3, [pc, #148]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d20c      	bcs.n	800481c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004802:	4b22      	ldr	r3, [pc, #136]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480a:	4b20      	ldr	r3, [pc, #128]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e032      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004828:	4b19      	ldr	r3, [pc, #100]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	4916      	ldr	r1, [pc, #88]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004846:	4b12      	ldr	r3, [pc, #72]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	490e      	ldr	r1, [pc, #56]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800485a:	f000 f821 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 800485e:	4602      	mov	r2, r0
 8004860:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	490a      	ldr	r1, [pc, #40]	@ (8004894 <HAL_RCC_ClockConfig+0x1c0>)
 800486c:	5ccb      	ldrb	r3, [r1, r3]
 800486e:	fa22 f303 	lsr.w	r3, r2, r3
 8004872:	4a09      	ldr	r2, [pc, #36]	@ (8004898 <HAL_RCC_ClockConfig+0x1c4>)
 8004874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004876:	4b09      	ldr	r3, [pc, #36]	@ (800489c <HAL_RCC_ClockConfig+0x1c8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f7fc fa44 	bl	8000d08 <HAL_InitTick>

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40023c00 	.word	0x40023c00
 8004890:	40023800 	.word	0x40023800
 8004894:	08008b24 	.word	0x08008b24
 8004898:	20000000 	.word	0x20000000
 800489c:	20000004 	.word	0x20000004

080048a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a4:	b094      	sub	sp, #80	@ 0x50
 80048a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048b8:	4b79      	ldr	r3, [pc, #484]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 030c 	and.w	r3, r3, #12
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d00d      	beq.n	80048e0 <HAL_RCC_GetSysClockFreq+0x40>
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	f200 80e1 	bhi.w	8004a8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_RCC_GetSysClockFreq+0x34>
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d003      	beq.n	80048da <HAL_RCC_GetSysClockFreq+0x3a>
 80048d2:	e0db      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048d4:	4b73      	ldr	r3, [pc, #460]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 80048d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048d8:	e0db      	b.n	8004a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048da:	4b73      	ldr	r3, [pc, #460]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x208>)
 80048dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048de:	e0d8      	b.n	8004a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e0:	4b6f      	ldr	r3, [pc, #444]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ea:	4b6d      	ldr	r3, [pc, #436]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d063      	beq.n	80049be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f6:	4b6a      	ldr	r3, [pc, #424]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	099b      	lsrs	r3, r3, #6
 80048fc:	2200      	movs	r2, #0
 80048fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004900:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004908:	633b      	str	r3, [r7, #48]	@ 0x30
 800490a:	2300      	movs	r3, #0
 800490c:	637b      	str	r3, [r7, #52]	@ 0x34
 800490e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004912:	4622      	mov	r2, r4
 8004914:	462b      	mov	r3, r5
 8004916:	f04f 0000 	mov.w	r0, #0
 800491a:	f04f 0100 	mov.w	r1, #0
 800491e:	0159      	lsls	r1, r3, #5
 8004920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004924:	0150      	lsls	r0, r2, #5
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4621      	mov	r1, r4
 800492c:	1a51      	subs	r1, r2, r1
 800492e:	6139      	str	r1, [r7, #16]
 8004930:	4629      	mov	r1, r5
 8004932:	eb63 0301 	sbc.w	r3, r3, r1
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004944:	4659      	mov	r1, fp
 8004946:	018b      	lsls	r3, r1, #6
 8004948:	4651      	mov	r1, sl
 800494a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800494e:	4651      	mov	r1, sl
 8004950:	018a      	lsls	r2, r1, #6
 8004952:	4651      	mov	r1, sl
 8004954:	ebb2 0801 	subs.w	r8, r2, r1
 8004958:	4659      	mov	r1, fp
 800495a:	eb63 0901 	sbc.w	r9, r3, r1
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800496a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800496e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004972:	4690      	mov	r8, r2
 8004974:	4699      	mov	r9, r3
 8004976:	4623      	mov	r3, r4
 8004978:	eb18 0303 	adds.w	r3, r8, r3
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	462b      	mov	r3, r5
 8004980:	eb49 0303 	adc.w	r3, r9, r3
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004992:	4629      	mov	r1, r5
 8004994:	024b      	lsls	r3, r1, #9
 8004996:	4621      	mov	r1, r4
 8004998:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800499c:	4621      	mov	r1, r4
 800499e:	024a      	lsls	r2, r1, #9
 80049a0:	4610      	mov	r0, r2
 80049a2:	4619      	mov	r1, r3
 80049a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049a6:	2200      	movs	r2, #0
 80049a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049b0:	f7fb fc0a 	bl	80001c8 <__aeabi_uldivmod>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4613      	mov	r3, r2
 80049ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049bc:	e058      	b.n	8004a70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049be:	4b38      	ldr	r3, [pc, #224]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	099b      	lsrs	r3, r3, #6
 80049c4:	2200      	movs	r2, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	4611      	mov	r1, r2
 80049ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049ce:	623b      	str	r3, [r7, #32]
 80049d0:	2300      	movs	r3, #0
 80049d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049d8:	4642      	mov	r2, r8
 80049da:	464b      	mov	r3, r9
 80049dc:	f04f 0000 	mov.w	r0, #0
 80049e0:	f04f 0100 	mov.w	r1, #0
 80049e4:	0159      	lsls	r1, r3, #5
 80049e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ea:	0150      	lsls	r0, r2, #5
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4641      	mov	r1, r8
 80049f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80049f6:	4649      	mov	r1, r9
 80049f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a10:	ebb2 040a 	subs.w	r4, r2, sl
 8004a14:	eb63 050b 	sbc.w	r5, r3, fp
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	00eb      	lsls	r3, r5, #3
 8004a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a26:	00e2      	lsls	r2, r4, #3
 8004a28:	4614      	mov	r4, r2
 8004a2a:	461d      	mov	r5, r3
 8004a2c:	4643      	mov	r3, r8
 8004a2e:	18e3      	adds	r3, r4, r3
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	464b      	mov	r3, r9
 8004a34:	eb45 0303 	adc.w	r3, r5, r3
 8004a38:	607b      	str	r3, [r7, #4]
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a46:	4629      	mov	r1, r5
 8004a48:	028b      	lsls	r3, r1, #10
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a50:	4621      	mov	r1, r4
 8004a52:	028a      	lsls	r2, r1, #10
 8004a54:	4610      	mov	r0, r2
 8004a56:	4619      	mov	r1, r3
 8004a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	61bb      	str	r3, [r7, #24]
 8004a5e:	61fa      	str	r2, [r7, #28]
 8004a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a64:	f7fb fbb0 	bl	80001c8 <__aeabi_uldivmod>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a70:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	0c1b      	lsrs	r3, r3, #16
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004a80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a8a:	e002      	b.n	8004a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a8c:	4b05      	ldr	r3, [pc, #20]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3750      	adds	r7, #80	@ 0x50
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	00f42400 	.word	0x00f42400
 8004aa8:	007a1200 	.word	0x007a1200

08004aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab0:	4b03      	ldr	r3, [pc, #12]	@ (8004ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	20000000 	.word	0x20000000

08004ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ac8:	f7ff fff0 	bl	8004aac <HAL_RCC_GetHCLKFreq>
 8004acc:	4602      	mov	r2, r0
 8004ace:	4b05      	ldr	r3, [pc, #20]	@ (8004ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	0a9b      	lsrs	r3, r3, #10
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	4903      	ldr	r1, [pc, #12]	@ (8004ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ada:	5ccb      	ldrb	r3, [r1, r3]
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	08008b34 	.word	0x08008b34

08004aec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d105      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d035      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b14:	4b62      	ldr	r3, [pc, #392]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b1a:	f7fc f939 	bl	8000d90 <HAL_GetTick>
 8004b1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b20:	e008      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b22:	f7fc f935 	bl	8000d90 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e0b0      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b34:	4b5b      	ldr	r3, [pc, #364]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f0      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	019a      	lsls	r2, r3, #6
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	071b      	lsls	r3, r3, #28
 8004b4c:	4955      	ldr	r1, [pc, #340]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b54:	4b52      	ldr	r3, [pc, #328]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b5a:	f7fc f919 	bl	8000d90 <HAL_GetTick>
 8004b5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b60:	e008      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b62:	f7fc f915 	bl	8000d90 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e090      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b74:	4b4b      	ldr	r3, [pc, #300]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8083 	beq.w	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	4b44      	ldr	r3, [pc, #272]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	4a43      	ldr	r2, [pc, #268]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b9e:	4b41      	ldr	r3, [pc, #260]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004baa:	4b3f      	ldr	r3, [pc, #252]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a3e      	ldr	r2, [pc, #248]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bb4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bb6:	f7fc f8eb 	bl	8000d90 <HAL_GetTick>
 8004bba:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bbe:	f7fc f8e7 	bl	8000d90 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e062      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004bd0:	4b35      	ldr	r3, [pc, #212]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bdc:	4b31      	ldr	r3, [pc, #196]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004be4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d02f      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d028      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c02:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c04:	4b29      	ldr	r3, [pc, #164]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c06:	2201      	movs	r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c0a:	4b28      	ldr	r3, [pc, #160]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c10:	4a24      	ldr	r2, [pc, #144]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c16:	4b23      	ldr	r3, [pc, #140]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d114      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c22:	f7fc f8b5 	bl	8000d90 <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c28:	e00a      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c2a:	f7fc f8b1 	bl	8000d90 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e02a      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c40:	4b18      	ldr	r3, [pc, #96]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0ee      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c58:	d10d      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c5a:	4b12      	ldr	r3, [pc, #72]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004c6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c6e:	490d      	ldr	r1, [pc, #52]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	608b      	str	r3, [r1, #8]
 8004c74:	e005      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c7c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c80:	6093      	str	r3, [r2, #8]
 8004c82:	4b08      	ldr	r3, [pc, #32]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c8e:	4905      	ldr	r1, [pc, #20]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	42470068 	.word	0x42470068
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	40007000 	.word	0x40007000
 8004cac:	42470e40 	.word	0x42470e40

08004cb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d13f      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004cce:	4b24      	ldr	r3, [pc, #144]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d006      	beq.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ce4:	d12f      	bne.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ce8:	617b      	str	r3, [r7, #20]
          break;
 8004cea:	e02f      	b.n	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cec:	4b1c      	ldr	r3, [pc, #112]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cf8:	d108      	bne.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004cfa:	4b19      	ldr	r3, [pc, #100]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d02:	4a19      	ldr	r2, [pc, #100]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	e007      	b.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d0c:	4b14      	ldr	r3, [pc, #80]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d14:	4a15      	ldr	r2, [pc, #84]	@ (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d1c:	4b10      	ldr	r3, [pc, #64]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d22:	099b      	lsrs	r3, r3, #6
 8004d24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	fb02 f303 	mul.w	r3, r2, r3
 8004d2e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d30:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d36:	0f1b      	lsrs	r3, r3, #28
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d42:	617b      	str	r3, [r7, #20]
          break;
 8004d44:	e002      	b.n	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]
          break;
 8004d4a:	bf00      	nop
        }
      }
      break;
 8004d4c:	e000      	b.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004d4e:	bf00      	nop
    }
  }
  return frequency;
 8004d50:	697b      	ldr	r3, [r7, #20]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40023800 	.word	0x40023800
 8004d64:	00bb8000 	.word	0x00bb8000
 8004d68:	007a1200 	.word	0x007a1200
 8004d6c:	00f42400 	.word	0x00f42400

08004d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e07b      	b.n	8004e7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d108      	bne.n	8004d9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d92:	d009      	beq.n	8004da8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	61da      	str	r2, [r3, #28]
 8004d9a:	e005      	b.n	8004da8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fb fe8a 	bl	8000adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e2c:	ea42 0103 	orr.w	r1, r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	0c1b      	lsrs	r3, r3, #16
 8004e46:	f003 0104 	and.w	r1, r3, #4
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	f003 0210 	and.w	r2, r3, #16
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e82:	b084      	sub	sp, #16
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	f107 001c 	add.w	r0, r7, #28
 8004e90:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e94:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d123      	bne.n	8004ee4 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004eb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ec4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d105      	bne.n	8004ed8 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f9dc 	bl	8005296 <USB_CoreReset>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	73fb      	strb	r3, [r7, #15]
 8004ee2:	e01b      	b.n	8004f1c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f9d0 	bl	8005296 <USB_CoreReset>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004efa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f06:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f0e:	e005      	b.n	8004f1c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f14:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f1c:	7fbb      	ldrb	r3, [r7, #30]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d10b      	bne.n	8004f3a <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f043 0206 	orr.w	r2, r3, #6
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f043 0220 	orr.w	r2, r3, #32
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f46:	b004      	add	sp, #16
 8004f48:	4770      	bx	lr

08004f4a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f043 0201 	orr.w	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f023 0201 	bic.w	r2, r3, #1
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	460b      	mov	r3, r1
 8004f98:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d115      	bne.n	8004fdc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fbc:	200a      	movs	r0, #10
 8004fbe:	f7fb fef3 	bl	8000da8 <HAL_Delay>
      ms += 10U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	330a      	adds	r3, #10
 8004fc6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f956 	bl	800527a <USB_GetMode>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d01e      	beq.n	8005012 <USB_SetCurrentMode+0x84>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2bc7      	cmp	r3, #199	@ 0xc7
 8004fd8:	d9f0      	bls.n	8004fbc <USB_SetCurrentMode+0x2e>
 8004fda:	e01a      	b.n	8005012 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d115      	bne.n	800500e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fee:	200a      	movs	r0, #10
 8004ff0:	f7fb feda 	bl	8000da8 <HAL_Delay>
      ms += 10U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	330a      	adds	r3, #10
 8004ff8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f93d 	bl	800527a <USB_GetMode>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d005      	beq.n	8005012 <USB_SetCurrentMode+0x84>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2bc7      	cmp	r3, #199	@ 0xc7
 800500a:	d9f0      	bls.n	8004fee <USB_SetCurrentMode+0x60>
 800500c:	e001      	b.n	8005012 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e005      	b.n	800501e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2bc8      	cmp	r3, #200	@ 0xc8
 8005016:	d101      	bne.n	800501c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005026:	b480      	push	{r7}
 8005028:	b085      	sub	sp, #20
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3301      	adds	r3, #1
 8005038:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005040:	d901      	bls.n	8005046 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e01b      	b.n	800507e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	daf2      	bge.n	8005034 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	019b      	lsls	r3, r3, #6
 8005056:	f043 0220 	orr.w	r2, r3, #32
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3301      	adds	r3, #1
 8005062:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800506a:	d901      	bls.n	8005070 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e006      	b.n	800507e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b20      	cmp	r3, #32
 800507a:	d0f0      	beq.n	800505e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800508a:	b480      	push	{r7}
 800508c:	b085      	sub	sp, #20
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3301      	adds	r3, #1
 800509a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050a2:	d901      	bls.n	80050a8 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e018      	b.n	80050da <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	daf2      	bge.n	8005096 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2210      	movs	r2, #16
 80050b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3301      	adds	r3, #1
 80050be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050c6:	d901      	bls.n	80050cc <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e006      	b.n	80050da <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b10      	cmp	r3, #16
 80050d6:	d0f0      	beq.n	80050ba <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b089      	sub	sp, #36	@ 0x24
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	4611      	mov	r1, r2
 80050f2:	461a      	mov	r2, r3
 80050f4:	460b      	mov	r3, r1
 80050f6:	71fb      	strb	r3, [r7, #7]
 80050f8:	4613      	mov	r3, r2
 80050fa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005104:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005108:	2b00      	cmp	r3, #0
 800510a:	d123      	bne.n	8005154 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800510c:	88bb      	ldrh	r3, [r7, #4]
 800510e:	3303      	adds	r3, #3
 8005110:	089b      	lsrs	r3, r3, #2
 8005112:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005114:	2300      	movs	r3, #0
 8005116:	61bb      	str	r3, [r7, #24]
 8005118:	e018      	b.n	800514c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	031a      	lsls	r2, r3, #12
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	4413      	add	r3, r2
 8005122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005126:	461a      	mov	r2, r3
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	3301      	adds	r3, #1
 8005132:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	3301      	adds	r3, #1
 8005138:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	3301      	adds	r3, #1
 800513e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	3301      	adds	r3, #1
 8005144:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	3301      	adds	r3, #1
 800514a:	61bb      	str	r3, [r7, #24]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	429a      	cmp	r2, r3
 8005152:	d3e2      	bcc.n	800511a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3724      	adds	r7, #36	@ 0x24
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005162:	b480      	push	{r7}
 8005164:	b08b      	sub	sp, #44	@ 0x2c
 8005166:	af00      	add	r7, sp, #0
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	4613      	mov	r3, r2
 800516e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005178:	88fb      	ldrh	r3, [r7, #6]
 800517a:	089b      	lsrs	r3, r3, #2
 800517c:	b29b      	uxth	r3, r3
 800517e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005188:	2300      	movs	r3, #0
 800518a:	623b      	str	r3, [r7, #32]
 800518c:	e014      	b.n	80051b8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	601a      	str	r2, [r3, #0]
    pDest++;
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	3301      	adds	r3, #1
 800519e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a2:	3301      	adds	r3, #1
 80051a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	3301      	adds	r3, #1
 80051aa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80051ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ae:	3301      	adds	r3, #1
 80051b0:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	3301      	adds	r3, #1
 80051b6:	623b      	str	r3, [r7, #32]
 80051b8:	6a3a      	ldr	r2, [r7, #32]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d3e6      	bcc.n	800518e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051c0:	8bfb      	ldrh	r3, [r7, #30]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d01e      	beq.n	8005204 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051d0:	461a      	mov	r2, r3
 80051d2:	f107 0310 	add.w	r3, r7, #16
 80051d6:	6812      	ldr	r2, [r2, #0]
 80051d8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	fa22 f303 	lsr.w	r3, r2, r3
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ea:	701a      	strb	r2, [r3, #0]
      i++;
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	3301      	adds	r3, #1
 80051f0:	623b      	str	r3, [r7, #32]
      pDest++;
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	3301      	adds	r3, #1
 80051f6:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80051f8:	8bfb      	ldrh	r3, [r7, #30]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051fe:	8bfb      	ldrh	r3, [r7, #30]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1ea      	bne.n	80051da <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005206:	4618      	mov	r0, r3
 8005208:	372c      	adds	r7, #44	@ 0x2c
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005212:	b480      	push	{r7}
 8005214:	b085      	sub	sp, #20
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4013      	ands	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800522a:	68fb      	ldr	r3, [r7, #12]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4413      	add	r3, r2
 8005260:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	4013      	ands	r3, r2
 800526a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800526c:	68bb      	ldr	r3, [r7, #8]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0301 	and.w	r3, r3, #1
}
 800528a:	4618      	mov	r0, r3
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005296:	b480      	push	{r7}
 8005298:	b085      	sub	sp, #20
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3301      	adds	r3, #1
 80052a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052ae:	d901      	bls.n	80052b4 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e01b      	b.n	80052ec <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	daf2      	bge.n	80052a2 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f043 0201 	orr.w	r2, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3301      	adds	r3, #1
 80052d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052d8:	d901      	bls.n	80052de <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e006      	b.n	80052ec <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d0f0      	beq.n	80052cc <USB_CoreReset+0x36>

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052f8:	b084      	sub	sp, #16
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b086      	sub	sp, #24
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005318:	461a      	mov	r2, r3
 800531a:	2300      	movs	r3, #0
 800531c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005322:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d119      	bne.n	8005382 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800534e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005352:	2b01      	cmp	r3, #1
 8005354:	d10a      	bne.n	800536c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005364:	f043 0304 	orr.w	r3, r3, #4
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	e014      	b.n	8005396 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800537a:	f023 0304 	bic.w	r3, r3, #4
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	e009      	b.n	8005396 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005390:	f023 0304 	bic.w	r3, r3, #4
 8005394:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005396:	2110      	movs	r1, #16
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff fe44 	bl	8005026 <USB_FlushTxFifo>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff fe6e 	bl	800508a <USB_FlushRxFifo>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80053b8:	2300      	movs	r3, #0
 80053ba:	613b      	str	r3, [r7, #16]
 80053bc:	e015      	b.n	80053ea <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053ca:	461a      	mov	r2, r3
 80053cc:	f04f 33ff 	mov.w	r3, #4294967295
 80053d0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053de:	461a      	mov	r2, r3
 80053e0:	2300      	movs	r3, #0
 80053e2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	3301      	adds	r3, #1
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80053ee:	461a      	mov	r2, r3
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d3e3      	bcc.n	80053be <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005402:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a18      	ldr	r2, [pc, #96]	@ (8005468 <USB_HostInit+0x170>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d10b      	bne.n	8005424 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005412:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a15      	ldr	r2, [pc, #84]	@ (800546c <USB_HostInit+0x174>)
 8005418:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a14      	ldr	r2, [pc, #80]	@ (8005470 <USB_HostInit+0x178>)
 800541e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005422:	e009      	b.n	8005438 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2280      	movs	r2, #128	@ 0x80
 8005428:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a11      	ldr	r2, [pc, #68]	@ (8005474 <USB_HostInit+0x17c>)
 800542e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a11      	ldr	r2, [pc, #68]	@ (8005478 <USB_HostInit+0x180>)
 8005434:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005438:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800543c:	2b00      	cmp	r3, #0
 800543e:	d105      	bne.n	800544c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	f043 0210 	orr.w	r2, r3, #16
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699a      	ldr	r2, [r3, #24]
 8005450:	4b0a      	ldr	r3, [pc, #40]	@ (800547c <USB_HostInit+0x184>)
 8005452:	4313      	orrs	r3, r2
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005458:	7dfb      	ldrb	r3, [r7, #23]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005464:	b004      	add	sp, #16
 8005466:	4770      	bx	lr
 8005468:	40040000 	.word	0x40040000
 800546c:	01000200 	.word	0x01000200
 8005470:	00e00300 	.word	0x00e00300
 8005474:	00600080 	.word	0x00600080
 8005478:	004000e0 	.word	0x004000e0
 800547c:	a3200008 	.word	0xa3200008

08005480 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800549e:	f023 0303 	bic.w	r3, r3, #3
 80054a2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	68f9      	ldr	r1, [r7, #12]
 80054b4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80054b8:	4313      	orrs	r3, r2
 80054ba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80054bc:	78fb      	ldrb	r3, [r7, #3]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d107      	bne.n	80054d2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054c8:	461a      	mov	r2, r3
 80054ca:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80054ce:	6053      	str	r3, [r2, #4]
 80054d0:	e00c      	b.n	80054ec <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d107      	bne.n	80054e8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054de:	461a      	mov	r2, r3
 80054e0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80054e4:	6053      	str	r3, [r2, #4]
 80054e6:	e001      	b.n	80054ec <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800551a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005528:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800552a:	2064      	movs	r0, #100	@ 0x64
 800552c:	f7fb fc3c 	bl	8000da8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800553c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800553e:	200a      	movs	r0, #10
 8005540:	f7fb fc32 	bl	8000da8 <HAL_Delay>

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800554e:	b480      	push	{r7}
 8005550:	b085      	sub	sp, #20
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	460b      	mov	r3, r1
 8005558:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005572:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d109      	bne.n	8005592 <USB_DriveVbus+0x44>
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d106      	bne.n	8005592 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800558c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005590:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005598:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800559c:	d109      	bne.n	80055b2 <USB_DriveVbus+0x64>
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80055ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055b0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	0c5b      	lsrs	r3, r3, #17
 80055de:	f003 0303 	and.w	r3, r3, #3
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b085      	sub	sp, #20
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	b29b      	uxth	r3, r3
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	4608      	mov	r0, r1
 800561a:	4611      	mov	r1, r2
 800561c:	461a      	mov	r2, r3
 800561e:	4603      	mov	r3, r0
 8005620:	70fb      	strb	r3, [r7, #3]
 8005622:	460b      	mov	r3, r1
 8005624:	70bb      	strb	r3, [r7, #2]
 8005626:	4613      	mov	r3, r2
 8005628:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	4413      	add	r3, r2
 800563a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800563e:	461a      	mov	r2, r3
 8005640:	f04f 33ff 	mov.w	r3, #4294967295
 8005644:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005646:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800564a:	2b03      	cmp	r3, #3
 800564c:	d87c      	bhi.n	8005748 <USB_HC_Init+0x138>
 800564e:	a201      	add	r2, pc, #4	@ (adr r2, 8005654 <USB_HC_Init+0x44>)
 8005650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005654:	08005665 	.word	0x08005665
 8005658:	0800570b 	.word	0x0800570b
 800565c:	08005665 	.word	0x08005665
 8005660:	080056cd 	.word	0x080056cd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	4413      	add	r3, r2
 800566c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005670:	461a      	mov	r2, r3
 8005672:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005676:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005678:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800567c:	2b00      	cmp	r3, #0
 800567e:	da10      	bge.n	80056a2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4413      	add	r3, r2
 8005688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	440a      	add	r2, r1
 8005696:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800569a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800569e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80056a0:	e055      	b.n	800574e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a6f      	ldr	r2, [pc, #444]	@ (8005864 <USB_HC_Init+0x254>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d151      	bne.n	800574e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	78fa      	ldrb	r2, [r7, #3]
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056c4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80056c8:	60d3      	str	r3, [r2, #12]
      break;
 80056ca:	e040      	b.n	800574e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056d8:	461a      	mov	r2, r3
 80056da:	f240 639d 	movw	r3, #1693	@ 0x69d
 80056de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	da34      	bge.n	8005752 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	78fa      	ldrb	r2, [r7, #3]
 80056f8:	0151      	lsls	r1, r2, #5
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	440a      	add	r2, r1
 80056fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005706:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005708:	e023      	b.n	8005752 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	4413      	add	r3, r2
 8005712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005716:	461a      	mov	r2, r3
 8005718:	f240 2325 	movw	r3, #549	@ 0x225
 800571c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800571e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005722:	2b00      	cmp	r3, #0
 8005724:	da17      	bge.n	8005756 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4413      	add	r3, r2
 800572e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	78fa      	ldrb	r2, [r7, #3]
 8005736:	0151      	lsls	r1, r2, #5
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	440a      	add	r2, r1
 800573c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005740:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005744:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005746:	e006      	b.n	8005756 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	77fb      	strb	r3, [r7, #31]
      break;
 800574c:	e004      	b.n	8005758 <USB_HC_Init+0x148>
      break;
 800574e:	bf00      	nop
 8005750:	e002      	b.n	8005758 <USB_HC_Init+0x148>
      break;
 8005752:	bf00      	nop
 8005754:	e000      	b.n	8005758 <USB_HC_Init+0x148>
      break;
 8005756:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	4413      	add	r3, r2
 8005760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005764:	461a      	mov	r2, r3
 8005766:	2300      	movs	r3, #0
 8005768:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4413      	add	r3, r2
 8005772:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	78fa      	ldrb	r2, [r7, #3]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	440a      	add	r2, r1
 8005780:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005784:	f043 0302 	orr.w	r3, r3, #2
 8005788:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	78fb      	ldrb	r3, [r7, #3]
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	2101      	movs	r1, #1
 800579a:	fa01 f303 	lsl.w	r3, r1, r3
 800579e:	6939      	ldr	r1, [r7, #16]
 80057a0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80057a4:	4313      	orrs	r3, r2
 80057a6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80057b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	da03      	bge.n	80057c4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80057bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	e001      	b.n	80057c8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff fef9 	bl	80055c0 <USB_GetHostSpeed>
 80057ce:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80057d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d106      	bne.n	80057e6 <USB_HC_Init+0x1d6>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d003      	beq.n	80057e6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80057de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	e001      	b.n	80057ea <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057ea:	787b      	ldrb	r3, [r7, #1]
 80057ec:	059b      	lsls	r3, r3, #22
 80057ee:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057f2:	78bb      	ldrb	r3, [r7, #2]
 80057f4:	02db      	lsls	r3, r3, #11
 80057f6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057fa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005800:	049b      	lsls	r3, r3, #18
 8005802:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005806:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005808:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800580a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800580e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	431a      	orrs	r2, r3
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005818:	78fa      	ldrb	r2, [r7, #3]
 800581a:	0151      	lsls	r1, r2, #5
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	440a      	add	r2, r1
 8005820:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005824:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005828:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800582a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800582e:	2b03      	cmp	r3, #3
 8005830:	d003      	beq.n	800583a <USB_HC_Init+0x22a>
 8005832:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005836:	2b01      	cmp	r3, #1
 8005838:	d10f      	bne.n	800585a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800583a:	78fb      	ldrb	r3, [r7, #3]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	4413      	add	r3, r2
 8005842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	78fa      	ldrb	r2, [r7, #3]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	440a      	add	r2, r1
 8005850:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005854:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005858:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800585a:	7ffb      	ldrb	r3, [r7, #31]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3720      	adds	r7, #32
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40040000 	.word	0x40040000

08005868 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08c      	sub	sp, #48	@ 0x30
 800586c:	af02      	add	r7, sp, #8
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	4613      	mov	r3, r2
 8005874:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	785b      	ldrb	r3, [r3, #1]
 800587e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005880:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005884:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4a5d      	ldr	r2, [pc, #372]	@ (8005a00 <USB_HC_StartXfer+0x198>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d12f      	bne.n	80058ee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d11c      	bne.n	80058ce <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	7c9b      	ldrb	r3, [r3, #18]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <USB_HC_StartXfer+0x3c>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	7c9b      	ldrb	r3, [r3, #18]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d124      	bne.n	80058ee <USB_HC_StartXfer+0x86>
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	799b      	ldrb	r3, [r3, #6]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d120      	bne.n	80058ee <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	0151      	lsls	r1, r2, #5
 80058be:	6a3a      	ldr	r2, [r7, #32]
 80058c0:	440a      	add	r2, r1
 80058c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ca:	60d3      	str	r3, [r2, #12]
 80058cc:	e00f      	b.n	80058ee <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	791b      	ldrb	r3, [r3, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10b      	bne.n	80058ee <USB_HC_StartXfer+0x86>
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	795b      	ldrb	r3, [r3, #5]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d107      	bne.n	80058ee <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	4619      	mov	r1, r3
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fb6b 	bl	8005fc0 <USB_DoPing>
        return HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	e232      	b.n	8005d54 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	799b      	ldrb	r3, [r3, #6]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d158      	bne.n	80059a8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80058f6:	2301      	movs	r3, #1
 80058f8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	78db      	ldrb	r3, [r3, #3]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005902:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	8a92      	ldrh	r2, [r2, #20]
 8005908:	fb03 f202 	mul.w	r2, r3, r2
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	61da      	str	r2, [r3, #28]
 8005910:	e07c      	b.n	8005a0c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	7c9b      	ldrb	r3, [r3, #18]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d130      	bne.n	800597c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	2bbc      	cmp	r3, #188	@ 0xbc
 8005920:	d918      	bls.n	8005954 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	8a9b      	ldrh	r3, [r3, #20]
 8005926:	461a      	mov	r2, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	69da      	ldr	r2, [r3, #28]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d003      	beq.n	8005944 <USB_HC_StartXfer+0xdc>
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d103      	bne.n	800594c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2202      	movs	r2, #2
 8005948:	60da      	str	r2, [r3, #12]
 800594a:	e05f      	b.n	8005a0c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2201      	movs	r2, #1
 8005950:	60da      	str	r2, [r3, #12]
 8005952:	e05b      	b.n	8005a0c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6a1a      	ldr	r2, [r3, #32]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d007      	beq.n	8005974 <USB_HC_StartXfer+0x10c>
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d003      	beq.n	8005974 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2204      	movs	r2, #4
 8005970:	60da      	str	r2, [r3, #12]
 8005972:	e04b      	b.n	8005a0c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2203      	movs	r2, #3
 8005978:	60da      	str	r2, [r3, #12]
 800597a:	e047      	b.n	8005a0c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d10d      	bne.n	800599e <USB_HC_StartXfer+0x136>
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	8a92      	ldrh	r2, [r2, #20]
 800598a:	4293      	cmp	r3, r2
 800598c:	d907      	bls.n	800599e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800598e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	8a92      	ldrh	r2, [r2, #20]
 8005994:	fb03 f202 	mul.w	r2, r3, r2
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	61da      	str	r2, [r3, #28]
 800599c:	e036      	b.n	8005a0c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	6a1a      	ldr	r2, [r3, #32]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	61da      	str	r2, [r3, #28]
 80059a6:	e031      	b.n	8005a0c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d018      	beq.n	80059e2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	8a92      	ldrh	r2, [r2, #20]
 80059b8:	4413      	add	r3, r2
 80059ba:	3b01      	subs	r3, #1
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	8a92      	ldrh	r2, [r2, #20]
 80059c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80059c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80059c6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80059c8:	8b7b      	ldrh	r3, [r7, #26]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d90b      	bls.n	80059e6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80059ce:	8b7b      	ldrh	r3, [r7, #26]
 80059d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	8a92      	ldrh	r2, [r2, #20]
 80059d8:	fb03 f202 	mul.w	r2, r3, r2
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	61da      	str	r2, [r3, #28]
 80059e0:	e001      	b.n	80059e6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80059e2:	2301      	movs	r3, #1
 80059e4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	78db      	ldrb	r3, [r3, #3]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	8a92      	ldrh	r2, [r2, #20]
 80059f4:	fb03 f202 	mul.w	r2, r3, r2
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	61da      	str	r2, [r3, #28]
 80059fc:	e006      	b.n	8005a0c <USB_HC_StartXfer+0x1a4>
 80059fe:	bf00      	nop
 8005a00:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6a1a      	ldr	r2, [r3, #32]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a16:	04d9      	lsls	r1, r3, #19
 8005a18:	4ba3      	ldr	r3, [pc, #652]	@ (8005ca8 <USB_HC_StartXfer+0x440>)
 8005a1a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a1c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	7d9b      	ldrb	r3, [r3, #22]
 8005a22:	075b      	lsls	r3, r3, #29
 8005a24:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a28:	69f9      	ldr	r1, [r7, #28]
 8005a2a:	0148      	lsls	r0, r1, #5
 8005a2c:	6a39      	ldr	r1, [r7, #32]
 8005a2e:	4401      	add	r1, r0
 8005a30:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a34:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a36:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d009      	beq.n	8005a52 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6999      	ldr	r1, [r3, #24]
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a4e:	460a      	mov	r2, r1
 8005a50:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	bf0c      	ite	eq
 8005a62:	2301      	moveq	r3, #1
 8005a64:	2300      	movne	r3, #0
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	69fa      	ldr	r2, [r7, #28]
 8005a7a:	0151      	lsls	r1, r2, #5
 8005a7c:	6a3a      	ldr	r2, [r7, #32]
 8005a7e:	440a      	add	r2, r1
 8005a80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a84:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a88:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	7e7b      	ldrb	r3, [r7, #25]
 8005a9a:	075b      	lsls	r3, r3, #29
 8005a9c:	69f9      	ldr	r1, [r7, #28]
 8005a9e:	0148      	lsls	r0, r1, #5
 8005aa0:	6a39      	ldr	r1, [r7, #32]
 8005aa2:	4401      	add	r1, r0
 8005aa4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	799b      	ldrb	r3, [r3, #6]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	f040 80c3 	bne.w	8005c3c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	7c5b      	ldrb	r3, [r3, #17]
 8005aba:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	6a3a      	ldr	r2, [r7, #32]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005ad2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	6a3a      	ldr	r2, [r7, #32]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005aee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005af2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	79db      	ldrb	r3, [r3, #7]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d123      	bne.n	8005b44 <USB_HC_StartXfer+0x2dc>
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	78db      	ldrb	r3, [r3, #3]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d11f      	bne.n	8005b44 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	6a3a      	ldr	r2, [r7, #32]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b22:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	0151      	lsls	r1, r2, #5
 8005b36:	6a3a      	ldr	r2, [r7, #32]
 8005b38:	440a      	add	r2, r1
 8005b3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b42:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	7c9b      	ldrb	r3, [r3, #18]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d003      	beq.n	8005b54 <USB_HC_StartXfer+0x2ec>
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	7c9b      	ldrb	r3, [r3, #18]
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d117      	bne.n	8005b84 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d113      	bne.n	8005b84 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	78db      	ldrb	r3, [r3, #3]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d10f      	bne.n	8005b84 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	69fa      	ldr	r2, [r7, #28]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	6a3a      	ldr	r2, [r7, #32]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b82:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	7c9b      	ldrb	r3, [r3, #18]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d162      	bne.n	8005c52 <USB_HC_StartXfer+0x3ea>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	78db      	ldrb	r3, [r3, #3]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d15e      	bne.n	8005c52 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d858      	bhi.n	8005c50 <USB_HC_StartXfer+0x3e8>
 8005b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005ba4 <USB_HC_StartXfer+0x33c>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005bb5 	.word	0x08005bb5
 8005ba8:	08005bd7 	.word	0x08005bd7
 8005bac:	08005bf9 	.word	0x08005bf9
 8005bb0:	08005c1b 	.word	0x08005c1b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	6a3a      	ldr	r2, [r7, #32]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bd2:	6053      	str	r3, [r2, #4]
          break;
 8005bd4:	e03d      	b.n	8005c52 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	6a3a      	ldr	r2, [r7, #32]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bf0:	f043 030e 	orr.w	r3, r3, #14
 8005bf4:	6053      	str	r3, [r2, #4]
          break;
 8005bf6:	e02c      	b.n	8005c52 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	0151      	lsls	r1, r2, #5
 8005c0a:	6a3a      	ldr	r2, [r7, #32]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c16:	6053      	str	r3, [r2, #4]
          break;
 8005c18:	e01b      	b.n	8005c52 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	6a3a      	ldr	r2, [r7, #32]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c38:	6053      	str	r3, [r2, #4]
          break;
 8005c3a:	e00a      	b.n	8005c52 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c48:	461a      	mov	r2, r3
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	6053      	str	r3, [r2, #4]
 8005c4e:	e000      	b.n	8005c52 <USB_HC_StartXfer+0x3ea>
          break;
 8005c50:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c68:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	78db      	ldrb	r3, [r3, #3]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d004      	beq.n	8005c7c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	e003      	b.n	8005c84 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c82:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c8a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c98:	461a      	mov	r2, r3
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	e055      	b.n	8005d54 <USB_HC_StartXfer+0x4ec>
 8005ca8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	78db      	ldrb	r3, [r3, #3]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d14e      	bne.n	8005d52 <USB_HC_StartXfer+0x4ea>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d04a      	beq.n	8005d52 <USB_HC_StartXfer+0x4ea>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	79db      	ldrb	r3, [r3, #7]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d146      	bne.n	8005d52 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	7c9b      	ldrb	r3, [r3, #18]
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d831      	bhi.n	8005d30 <USB_HC_StartXfer+0x4c8>
 8005ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd4 <USB_HC_StartXfer+0x46c>)
 8005cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd2:	bf00      	nop
 8005cd4:	08005ce5 	.word	0x08005ce5
 8005cd8:	08005d09 	.word	0x08005d09
 8005cdc:	08005ce5 	.word	0x08005ce5
 8005ce0:	08005d09 	.word	0x08005d09
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	3303      	adds	r3, #3
 8005cea:	089b      	lsrs	r3, r3, #2
 8005cec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005cee:	8afa      	ldrh	r2, [r7, #22]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d91c      	bls.n	8005d34 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	f043 0220 	orr.w	r2, r3, #32
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d06:	e015      	b.n	8005d34 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	3303      	adds	r3, #3
 8005d0e:	089b      	lsrs	r3, r3, #2
 8005d10:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005d12:	8afa      	ldrh	r2, [r7, #22]
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d90a      	bls.n	8005d38 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d2e:	e003      	b.n	8005d38 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005d30:	bf00      	nop
 8005d32:	e002      	b.n	8005d3a <USB_HC_StartXfer+0x4d2>
        break;
 8005d34:	bf00      	nop
 8005d36:	e000      	b.n	8005d3a <USB_HC_StartXfer+0x4d2>
        break;
 8005d38:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	6999      	ldr	r1, [r3, #24]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	785a      	ldrb	r2, [r3, #1]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2000      	movs	r0, #0
 8005d4a:	9000      	str	r0, [sp, #0]
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f7ff f9ca 	bl	80050e6 <USB_WritePacket>
  }

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3728      	adds	r7, #40	@ 0x28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	b29b      	uxth	r3, r3
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b089      	sub	sp, #36	@ 0x24
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	460b      	mov	r3, r1
 8005d88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	0c9b      	lsrs	r3, r3, #18
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	0fdb      	lsrs	r3, r3, #31
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	0fdb      	lsrs	r3, r3, #31
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b20      	cmp	r3, #32
 8005de2:	d10d      	bne.n	8005e00 <USB_HC_Halt+0x82>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <USB_HC_Halt+0x82>
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d002      	beq.n	8005dfc <USB_HC_Halt+0x7e>
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d101      	bne.n	8005e00 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e0d8      	b.n	8005fb2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <USB_HC_Halt+0x8e>
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d173      	bne.n	8005ef4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e2a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d14a      	bne.n	8005ece <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d133      	bne.n	8005eac <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e62:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	0151      	lsls	r1, r2, #5
 8005e76:	69fa      	ldr	r2, [r7, #28]
 8005e78:	440a      	add	r2, r1
 8005e7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e82:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	3301      	adds	r3, #1
 8005e88:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e90:	d82e      	bhi.n	8005ef0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ea8:	d0ec      	beq.n	8005e84 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005eaa:	e081      	b.n	8005fb0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ec6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005eca:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ecc:	e070      	b.n	8005fb0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ee8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005eec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005eee:	e05f      	b.n	8005fb0 <USB_HC_Halt+0x232>
            break;
 8005ef0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ef2:	e05d      	b.n	8005fb0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	0151      	lsls	r1, r2, #5
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	440a      	add	r2, r1
 8005f0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f12:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d133      	bne.n	8005f8c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f42:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	69fa      	ldr	r2, [r7, #28]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f62:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	3301      	adds	r3, #1
 8005f68:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f70:	d81d      	bhi.n	8005fae <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f88:	d0ec      	beq.n	8005f64 <USB_HC_Halt+0x1e6>
 8005f8a:	e011      	b.n	8005fb0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fa6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	e000      	b.n	8005fb0 <USB_HC_Halt+0x232>
          break;
 8005fae:	bf00      	nop
    }
  }

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3724      	adds	r7, #36	@ 0x24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
	...

08005fc0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	04da      	lsls	r2, r3, #19
 8005fdc:	4b15      	ldr	r3, [pc, #84]	@ (8006034 <USB_DoPing+0x74>)
 8005fde:	4013      	ands	r3, r2
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	0151      	lsls	r1, r2, #5
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	440a      	add	r2, r1
 8005fe8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ff0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006008:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006010:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	4413      	add	r3, r2
 800601a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800601e:	461a      	mov	r2, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	1ff80000 	.word	0x1ff80000

08006038 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7fe ff8d 	bl	8004f6c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006052:	2110      	movs	r1, #16
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7fe ffe6 	bl	8005026 <USB_FlushTxFifo>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff f810 	bl	800508a <USB_FlushRxFifo>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006074:	2300      	movs	r3, #0
 8006076:	61bb      	str	r3, [r7, #24]
 8006078:	e01f      	b.n	80060ba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	4413      	add	r3, r2
 8006082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006090:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006098:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ae:	461a      	mov	r2, r3
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	3301      	adds	r3, #1
 80060b8:	61bb      	str	r3, [r7, #24]
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	2b0f      	cmp	r3, #15
 80060be:	d9dc      	bls.n	800607a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80060c0:	2300      	movs	r3, #0
 80060c2:	61bb      	str	r3, [r7, #24]
 80060c4:	e034      	b.n	8006130 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060ec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060fa:	461a      	mov	r2, r3
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3301      	adds	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800610c:	d80c      	bhi.n	8006128 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	4413      	add	r3, r2
 8006116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006120:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006124:	d0ec      	beq.n	8006100 <USB_StopHost+0xc8>
 8006126:	e000      	b.n	800612a <USB_StopHost+0xf2>
        break;
 8006128:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	3301      	adds	r3, #1
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	2b0f      	cmp	r3, #15
 8006134:	d9c7      	bls.n	80060c6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800613c:	461a      	mov	r2, r3
 800613e:	f04f 33ff 	mov.w	r3, #4294967295
 8006142:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f04f 32ff 	mov.w	r2, #4294967295
 800614a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7fe fefc 	bl	8004f4a <USB_EnableGlobalInt>

  return ret;
 8006152:	7ffb      	ldrb	r3, [r7, #31]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3720      	adds	r7, #32
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800615c:	b590      	push	{r4, r7, lr}
 800615e:	b089      	sub	sp, #36	@ 0x24
 8006160:	af04      	add	r7, sp, #16
 8006162:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006164:	2301      	movs	r3, #1
 8006166:	2202      	movs	r2, #2
 8006168:	2102      	movs	r1, #2
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fc85 	bl	8006a7a <USBH_FindInterface>
 8006170:	4603      	mov	r3, r0
 8006172:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	2bff      	cmp	r3, #255	@ 0xff
 8006178:	d002      	beq.n	8006180 <USBH_CDC_InterfaceInit+0x24>
 800617a:	7bfb      	ldrb	r3, [r7, #15]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d901      	bls.n	8006184 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006180:	2302      	movs	r3, #2
 8006182:	e13d      	b.n	8006400 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fc5a 	bl	8006a42 <USBH_SelectInterface>
 800618e:	4603      	mov	r3, r0
 8006190:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006192:	7bbb      	ldrb	r3, [r7, #14]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006198:	2302      	movs	r3, #2
 800619a:	e131      	b.n	8006400 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80061a2:	2050      	movs	r0, #80	@ 0x50
 80061a4:	f002 fb64 	bl	8008870 <malloc>
 80061a8:	4603      	mov	r3, r0
 80061aa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80061bc:	2302      	movs	r3, #2
 80061be:	e11f      	b.n	8006400 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80061c0:	2250      	movs	r2, #80	@ 0x50
 80061c2:	2100      	movs	r1, #0
 80061c4:	68b8      	ldr	r0, [r7, #8]
 80061c6:	f002 fc11 	bl	80089ec <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	211a      	movs	r1, #26
 80061d0:	fb01 f303 	mul.w	r3, r1, r3
 80061d4:	4413      	add	r3, r2
 80061d6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	b25b      	sxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	da15      	bge.n	800620e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	211a      	movs	r1, #26
 80061e8:	fb01 f303 	mul.w	r3, r1, r3
 80061ec:	4413      	add	r3, r2
 80061ee:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80061f2:	781a      	ldrb	r2, [r3, #0]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	211a      	movs	r1, #26
 80061fe:	fb01 f303 	mul.w	r3, r1, r3
 8006202:	4413      	add	r3, r2
 8006204:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006208:	881a      	ldrh	r2, [r3, #0]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	785b      	ldrb	r3, [r3, #1]
 8006212:	4619      	mov	r1, r3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f001 ffbe 	bl	8008196 <USBH_AllocPipe>
 800621a:	4603      	mov	r3, r0
 800621c:	461a      	mov	r2, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	7819      	ldrb	r1, [r3, #0]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	7858      	ldrb	r0, [r3, #1]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	8952      	ldrh	r2, [r2, #10]
 800623a:	9202      	str	r2, [sp, #8]
 800623c:	2203      	movs	r2, #3
 800623e:	9201      	str	r2, [sp, #4]
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	4623      	mov	r3, r4
 8006244:	4602      	mov	r2, r0
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f001 ff76 	bl	8008138 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2200      	movs	r2, #0
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f002 fa85 	bl	8008764 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800625a:	2300      	movs	r3, #0
 800625c:	2200      	movs	r2, #0
 800625e:	210a      	movs	r1, #10
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fc0a 	bl	8006a7a <USBH_FindInterface>
 8006266:	4603      	mov	r3, r0
 8006268:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	2bff      	cmp	r3, #255	@ 0xff
 800626e:	d002      	beq.n	8006276 <USBH_CDC_InterfaceInit+0x11a>
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d901      	bls.n	800627a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006276:	2302      	movs	r3, #2
 8006278:	e0c2      	b.n	8006400 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	211a      	movs	r1, #26
 8006280:	fb01 f303 	mul.w	r3, r1, r3
 8006284:	4413      	add	r3, r2
 8006286:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	b25b      	sxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	da16      	bge.n	80062c0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	211a      	movs	r1, #26
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	4413      	add	r3, r2
 800629e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062a2:	781a      	ldrb	r2, [r3, #0]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	211a      	movs	r1, #26
 80062ae:	fb01 f303 	mul.w	r3, r1, r3
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80062b8:	881a      	ldrh	r2, [r3, #0]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	835a      	strh	r2, [r3, #26]
 80062be:	e015      	b.n	80062ec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	211a      	movs	r1, #26
 80062c6:	fb01 f303 	mul.w	r3, r1, r3
 80062ca:	4413      	add	r3, r2
 80062cc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062d0:	781a      	ldrb	r2, [r3, #0]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	211a      	movs	r1, #26
 80062dc:	fb01 f303 	mul.w	r3, r1, r3
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80062e6:	881a      	ldrh	r2, [r3, #0]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	211a      	movs	r1, #26
 80062f2:	fb01 f303 	mul.w	r3, r1, r3
 80062f6:	4413      	add	r3, r2
 80062f8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	b25b      	sxtb	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	da16      	bge.n	8006332 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	211a      	movs	r1, #26
 800630a:	fb01 f303 	mul.w	r3, r1, r3
 800630e:	4413      	add	r3, r2
 8006310:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006314:	781a      	ldrb	r2, [r3, #0]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800631a:	7bfb      	ldrb	r3, [r7, #15]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	211a      	movs	r1, #26
 8006320:	fb01 f303 	mul.w	r3, r1, r3
 8006324:	4413      	add	r3, r2
 8006326:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800632a:	881a      	ldrh	r2, [r3, #0]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	835a      	strh	r2, [r3, #26]
 8006330:	e015      	b.n	800635e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006332:	7bfb      	ldrb	r3, [r7, #15]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	211a      	movs	r1, #26
 8006338:	fb01 f303 	mul.w	r3, r1, r3
 800633c:	4413      	add	r3, r2
 800633e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006342:	781a      	ldrb	r2, [r3, #0]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	211a      	movs	r1, #26
 800634e:	fb01 f303 	mul.w	r3, r1, r3
 8006352:	4413      	add	r3, r2
 8006354:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006358:	881a      	ldrh	r2, [r3, #0]
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	7b9b      	ldrb	r3, [r3, #14]
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 ff16 	bl	8008196 <USBH_AllocPipe>
 800636a:	4603      	mov	r3, r0
 800636c:	461a      	mov	r2, r3
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	7bdb      	ldrb	r3, [r3, #15]
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f001 ff0c 	bl	8008196 <USBH_AllocPipe>
 800637e:	4603      	mov	r3, r0
 8006380:	461a      	mov	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	7b59      	ldrb	r1, [r3, #13]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	7b98      	ldrb	r0, [r3, #14]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	8b12      	ldrh	r2, [r2, #24]
 800639e:	9202      	str	r2, [sp, #8]
 80063a0:	2202      	movs	r2, #2
 80063a2:	9201      	str	r2, [sp, #4]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	4623      	mov	r3, r4
 80063a8:	4602      	mov	r2, r0
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 fec4 	bl	8008138 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	7b19      	ldrb	r1, [r3, #12]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	7bd8      	ldrb	r0, [r3, #15]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	8b52      	ldrh	r2, [r2, #26]
 80063c8:	9202      	str	r2, [sp, #8]
 80063ca:	2202      	movs	r2, #2
 80063cc:	9201      	str	r2, [sp, #4]
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	4623      	mov	r3, r4
 80063d2:	4602      	mov	r2, r0
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 feaf 	bl	8008138 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	7b5b      	ldrb	r3, [r3, #13]
 80063e6:	2200      	movs	r2, #0
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f002 f9ba 	bl	8008764 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	7b1b      	ldrb	r3, [r3, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f002 f9b3 	bl	8008764 <USBH_LL_SetToggle>

  return USBH_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	bd90      	pop	{r4, r7, pc}

08006408 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00e      	beq.n	8006440 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f001 fea4 	bl	8008176 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 fecf 	bl	80081d8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	7b1b      	ldrb	r3, [r3, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00e      	beq.n	8006466 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	7b1b      	ldrb	r3, [r3, #12]
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f001 fe91 	bl	8008176 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	7b1b      	ldrb	r3, [r3, #12]
 8006458:	4619      	mov	r1, r3
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 febc 	bl	80081d8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	7b5b      	ldrb	r3, [r3, #13]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00e      	beq.n	800648c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	7b5b      	ldrb	r3, [r3, #13]
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f001 fe7e 	bl	8008176 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	7b5b      	ldrb	r3, [r3, #13]
 800647e:	4619      	mov	r1, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f001 fea9 	bl	80081d8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00b      	beq.n	80064b0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f002 f9ed 	bl	8008880 <free>
    phost->pActiveClass->pData = 0U;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064ac:	2200      	movs	r2, #0
 80064ae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3340      	adds	r3, #64	@ 0x40
 80064d0:	4619      	mov	r1, r3
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f8b1 	bl	800663a <GetLineCoding>
 80064d8:	4603      	mov	r3, r0
 80064da:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80064dc:	7afb      	ldrb	r3, [r7, #11]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d105      	bne.n	80064ee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80064e8:	2102      	movs	r1, #2
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80064ee:	7afb      	ldrb	r3, [r7, #11]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006500:	2301      	movs	r3, #1
 8006502:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006518:	2b04      	cmp	r3, #4
 800651a:	d877      	bhi.n	800660c <USBH_CDC_Process+0x114>
 800651c:	a201      	add	r2, pc, #4	@ (adr r2, 8006524 <USBH_CDC_Process+0x2c>)
 800651e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006522:	bf00      	nop
 8006524:	08006539 	.word	0x08006539
 8006528:	0800653f 	.word	0x0800653f
 800652c:	0800656f 	.word	0x0800656f
 8006530:	080065e3 	.word	0x080065e3
 8006534:	080065f1 	.word	0x080065f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	73fb      	strb	r3, [r7, #15]
      break;
 800653c:	e06d      	b.n	800661a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f897 	bl	8006678 <SetLineCoding>
 800654a:	4603      	mov	r3, r0
 800654c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800655c:	e058      	b.n	8006610 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800655e:	7bbb      	ldrb	r3, [r7, #14]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d055      	beq.n	8006610 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2204      	movs	r2, #4
 8006568:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800656c:	e050      	b.n	8006610 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	3340      	adds	r3, #64	@ 0x40
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f860 	bl	800663a <GetLineCoding>
 800657a:	4603      	mov	r3, r0
 800657c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800657e:	7bbb      	ldrb	r3, [r7, #14]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d126      	bne.n	80065d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006596:	791b      	ldrb	r3, [r3, #4]
 8006598:	429a      	cmp	r2, r3
 800659a:	d13b      	bne.n	8006614 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d133      	bne.n	8006614 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d12b      	bne.n	8006614 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d124      	bne.n	8006614 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f958 	bl	8006880 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80065d0:	e020      	b.n	8006614 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80065d2:	7bbb      	ldrb	r3, [r7, #14]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d01d      	beq.n	8006614 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2204      	movs	r2, #4
 80065dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80065e0:	e018      	b.n	8006614 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f867 	bl	80066b6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f8da 	bl	80067a2 <CDC_ProcessReception>
      break;
 80065ee:	e014      	b.n	800661a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80065f0:	2100      	movs	r1, #0
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f001 f81a 	bl	800762c <USBH_ClrFeature>
 80065f8:	4603      	mov	r3, r0
 80065fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80065fc:	7bbb      	ldrb	r3, [r7, #14]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10a      	bne.n	8006618 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800660a:	e005      	b.n	8006618 <USBH_CDC_Process+0x120>

    default:
      break;
 800660c:	bf00      	nop
 800660e:	e004      	b.n	800661a <USBH_CDC_Process+0x122>
      break;
 8006610:	bf00      	nop
 8006612:	e002      	b.n	800661a <USBH_CDC_Process+0x122>
      break;
 8006614:	bf00      	nop
 8006616:	e000      	b.n	800661a <USBH_CDC_Process+0x122>
      break;
 8006618:	bf00      	nop

  }

  return status;
 800661a:	7bfb      	ldrb	r3, [r7, #15]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b082      	sub	sp, #8
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	22a1      	movs	r2, #161	@ 0xa1
 8006648:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2221      	movs	r2, #33	@ 0x21
 800664e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2207      	movs	r2, #7
 8006660:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2207      	movs	r2, #7
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f001 fb14 	bl	8007c96 <USBH_CtlReq>
 800666e:	4603      	mov	r3, r0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2221      	movs	r2, #33	@ 0x21
 8006686:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2207      	movs	r2, #7
 800669e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	2207      	movs	r2, #7
 80066a4:	4619      	mov	r1, r3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 faf5 	bl	8007c96 <USBH_CtlReq>
 80066ac:	4603      	mov	r3, r0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b086      	sub	sp, #24
 80066ba:	af02      	add	r7, sp, #8
 80066bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80066c8:	2300      	movs	r3, #0
 80066ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d002      	beq.n	80066dc <CDC_ProcessTransmission+0x26>
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d023      	beq.n	8006722 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80066da:	e05e      	b.n	800679a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	8b12      	ldrh	r2, [r2, #24]
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d90b      	bls.n	8006700 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	69d9      	ldr	r1, [r3, #28]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8b1a      	ldrh	r2, [r3, #24]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	7b5b      	ldrb	r3, [r3, #13]
 80066f4:	2001      	movs	r0, #1
 80066f6:	9000      	str	r0, [sp, #0]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f001 fcda 	bl	80080b2 <USBH_BulkSendData>
 80066fe:	e00b      	b.n	8006718 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006708:	b29a      	uxth	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	7b5b      	ldrb	r3, [r3, #13]
 800670e:	2001      	movs	r0, #1
 8006710:	9000      	str	r0, [sp, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 fccd 	bl	80080b2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006720:	e03b      	b.n	800679a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	7b5b      	ldrb	r3, [r3, #13]
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 fff1 	bl	8008710 <USBH_LL_GetURBState>
 800672e:	4603      	mov	r3, r0
 8006730:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006732:	7afb      	ldrb	r3, [r7, #11]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d128      	bne.n	800678a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	8b12      	ldrh	r2, [r2, #24]
 8006740:	4293      	cmp	r3, r2
 8006742:	d90e      	bls.n	8006762 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	8b12      	ldrh	r2, [r2, #24]
 800674c:	1a9a      	subs	r2, r3, r2
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	8b12      	ldrh	r2, [r2, #24]
 800675a:	441a      	add	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	61da      	str	r2, [r3, #28]
 8006760:	e002      	b.n	8006768 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676c:	2b00      	cmp	r3, #0
 800676e:	d004      	beq.n	800677a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006778:	e00e      	b.n	8006798 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f868 	bl	8006858 <USBH_CDC_TransmitCallback>
      break;
 8006788:	e006      	b.n	8006798 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800678a:	7afb      	ldrb	r3, [r7, #11]
 800678c:	2b02      	cmp	r3, #2
 800678e:	d103      	bne.n	8006798 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006798:	bf00      	nop
  }
}
 800679a:	bf00      	nop
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b086      	sub	sp, #24
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067b4:	2300      	movs	r3, #0
 80067b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d002      	beq.n	80067c8 <CDC_ProcessReception+0x26>
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d00e      	beq.n	80067e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80067c6:	e043      	b.n	8006850 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	6a19      	ldr	r1, [r3, #32]
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	8b5a      	ldrh	r2, [r3, #26]
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	7b1b      	ldrb	r3, [r3, #12]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f001 fc91 	bl	80080fc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2204      	movs	r2, #4
 80067de:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80067e2:	e035      	b.n	8006850 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	7b1b      	ldrb	r3, [r3, #12]
 80067e8:	4619      	mov	r1, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f001 ff90 	bl	8008710 <USBH_LL_GetURBState>
 80067f0:	4603      	mov	r3, r0
 80067f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80067f4:	7cfb      	ldrb	r3, [r7, #19]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d129      	bne.n	800684e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	7b1b      	ldrb	r3, [r3, #12]
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 fef3 	bl	80085ec <USBH_LL_GetLastXferSize>
 8006806:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	429a      	cmp	r2, r3
 8006810:	d016      	beq.n	8006840 <CDC_ProcessReception+0x9e>
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	8b5b      	ldrh	r3, [r3, #26]
 8006816:	461a      	mov	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4293      	cmp	r3, r2
 800681c:	d110      	bne.n	8006840 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	1ad2      	subs	r2, r2, r3
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	6a1a      	ldr	r2, [r3, #32]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	441a      	add	r2, r3
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2203      	movs	r2, #3
 800683a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800683e:	e006      	b.n	800684e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f80f 	bl	800686c <USBH_CDC_ReceiveCallback>
      break;
 800684e:	bf00      	nop
  }
}
 8006850:	bf00      	nop
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	4613      	mov	r3, r2
 80068a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80068a8:	2302      	movs	r3, #2
 80068aa:	e029      	b.n	8006900 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	79fa      	ldrb	r2, [r7, #7]
 80068b0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f81f 	bl	8006908 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f001 fdc3 	bl	8008484 <USBH_LL_Init>

  return USBH_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006914:	2300      	movs	r3, #0
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	e009      	b.n	800692e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	33e0      	adds	r3, #224	@ 0xe0
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	2200      	movs	r2, #0
 8006926:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3301      	adds	r3, #1
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b0f      	cmp	r3, #15
 8006932:	d9f2      	bls.n	800691a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006934:	2300      	movs	r3, #0
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	e009      	b.n	800694e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006944:	2200      	movs	r2, #0
 8006946:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	3301      	adds	r3, #1
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006954:	d3f1      	bcc.n	800693a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2240      	movs	r2, #64	@ 0x40
 800697a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	331c      	adds	r3, #28
 80069a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80069aa:	2100      	movs	r1, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f002 f81d 	bl	80089ec <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80069b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069bc:	2100      	movs	r1, #0
 80069be:	4618      	mov	r0, r3
 80069c0:	f002 f814 	bl	80089ec <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80069ca:	2212      	movs	r2, #18
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f002 f80c 	bl	80089ec <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80069da:	223e      	movs	r2, #62	@ 0x3e
 80069dc:	2100      	movs	r1, #0
 80069de:	4618      	mov	r0, r3
 80069e0:	f002 f804 	bl	80089ec <memset>

  return USBH_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b085      	sub	sp, #20
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d016      	beq.n	8006a30 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10e      	bne.n	8006a2a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006a12:	1c59      	adds	r1, r3, #1
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	33de      	adds	r3, #222	@ 0xde
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	73fb      	strb	r3, [r7, #15]
 8006a28:	e004      	b.n	8006a34 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	73fb      	strb	r3, [r7, #15]
 8006a2e:	e001      	b.n	8006a34 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006a30:	2302      	movs	r3, #2
 8006a32:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b085      	sub	sp, #20
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006a58:	78fa      	ldrb	r2, [r7, #3]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d204      	bcs.n	8006a68 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	78fa      	ldrb	r2, [r7, #3]
 8006a62:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006a66:	e001      	b.n	8006a6c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006a68:	2302      	movs	r3, #2
 8006a6a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b087      	sub	sp, #28
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	4608      	mov	r0, r1
 8006a84:	4611      	mov	r1, r2
 8006a86:	461a      	mov	r2, r3
 8006a88:	4603      	mov	r3, r0
 8006a8a:	70fb      	strb	r3, [r7, #3]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	70bb      	strb	r3, [r7, #2]
 8006a90:	4613      	mov	r3, r2
 8006a92:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006aa2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006aa4:	e025      	b.n	8006af2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
 8006aa8:	221a      	movs	r2, #26
 8006aaa:	fb02 f303 	mul.w	r3, r2, r3
 8006aae:	3308      	adds	r3, #8
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	3302      	adds	r3, #2
 8006ab6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	795b      	ldrb	r3, [r3, #5]
 8006abc:	78fa      	ldrb	r2, [r7, #3]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d002      	beq.n	8006ac8 <USBH_FindInterface+0x4e>
 8006ac2:	78fb      	ldrb	r3, [r7, #3]
 8006ac4:	2bff      	cmp	r3, #255	@ 0xff
 8006ac6:	d111      	bne.n	8006aec <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006acc:	78ba      	ldrb	r2, [r7, #2]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d002      	beq.n	8006ad8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ad2:	78bb      	ldrb	r3, [r7, #2]
 8006ad4:	2bff      	cmp	r3, #255	@ 0xff
 8006ad6:	d109      	bne.n	8006aec <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006adc:	787a      	ldrb	r2, [r7, #1]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d002      	beq.n	8006ae8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ae2:	787b      	ldrb	r3, [r7, #1]
 8006ae4:	2bff      	cmp	r3, #255	@ 0xff
 8006ae6:	d101      	bne.n	8006aec <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006ae8:	7dfb      	ldrb	r3, [r7, #23]
 8006aea:	e006      	b.n	8006afa <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006aec:	7dfb      	ldrb	r3, [r7, #23]
 8006aee:	3301      	adds	r3, #1
 8006af0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006af2:	7dfb      	ldrb	r3, [r7, #23]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d9d6      	bls.n	8006aa6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006af8:	23ff      	movs	r3, #255	@ 0xff
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f001 fcf4 	bl	80084fc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006b14:	2101      	movs	r1, #1
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 fe0d 	bl	8008736 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af04      	add	r7, sp, #16
 8006b2e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006b30:	2302      	movs	r3, #2
 8006b32:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d102      	bne.n	8006b4a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2203      	movs	r2, #3
 8006b48:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b0b      	cmp	r3, #11
 8006b52:	f200 81bb 	bhi.w	8006ecc <USBH_Process+0x3a4>
 8006b56:	a201      	add	r2, pc, #4	@ (adr r2, 8006b5c <USBH_Process+0x34>)
 8006b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5c:	08006b8d 	.word	0x08006b8d
 8006b60:	08006bbf 	.word	0x08006bbf
 8006b64:	08006c27 	.word	0x08006c27
 8006b68:	08006e67 	.word	0x08006e67
 8006b6c:	08006ecd 	.word	0x08006ecd
 8006b70:	08006cc7 	.word	0x08006cc7
 8006b74:	08006e0d 	.word	0x08006e0d
 8006b78:	08006cfd 	.word	0x08006cfd
 8006b7c:	08006d1d 	.word	0x08006d1d
 8006b80:	08006d3b 	.word	0x08006d3b
 8006b84:	08006d7f 	.word	0x08006d7f
 8006b88:	08006e4f 	.word	0x08006e4f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 819b 	beq.w	8006ed0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006ba0:	20c8      	movs	r0, #200	@ 0xc8
 8006ba2:	f001 fe12 	bl	80087ca <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 fd05 	bl	80085b6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006bbc:	e188      	b.n	8006ed0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d107      	bne.n	8006bd8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006bd6:	e18a      	b.n	8006eee <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006bde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006be2:	d914      	bls.n	8006c0e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006bea:	3301      	adds	r3, #1
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d903      	bls.n	8006c06 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	220d      	movs	r2, #13
 8006c02:	701a      	strb	r2, [r3, #0]
      break;
 8006c04:	e173      	b.n	8006eee <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	701a      	strb	r2, [r3, #0]
      break;
 8006c0c:	e16f      	b.n	8006eee <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006c14:	f103 020a 	add.w	r2, r3, #10
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006c1e:	200a      	movs	r0, #10
 8006c20:	f001 fdd3 	bl	80087ca <USBH_Delay>
      break;
 8006c24:	e163      	b.n	8006eee <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c36:	2104      	movs	r1, #4
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006c3c:	2064      	movs	r0, #100	@ 0x64
 8006c3e:	f001 fdc4 	bl	80087ca <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 fc90 	bl	8008568 <USBH_LL_GetSpeed>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2205      	movs	r2, #5
 8006c56:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006c58:	2100      	movs	r1, #0
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 fa9b 	bl	8008196 <USBH_AllocPipe>
 8006c60:	4603      	mov	r3, r0
 8006c62:	461a      	mov	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006c68:	2180      	movs	r1, #128	@ 0x80
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f001 fa93 	bl	8008196 <USBH_AllocPipe>
 8006c70:	4603      	mov	r3, r0
 8006c72:	461a      	mov	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	7919      	ldrb	r1, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006c8c:	9202      	str	r2, [sp, #8]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	9201      	str	r2, [sp, #4]
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	4603      	mov	r3, r0
 8006c96:	2280      	movs	r2, #128	@ 0x80
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 fa4d 	bl	8008138 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	7959      	ldrb	r1, [r3, #5]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006cb2:	9202      	str	r2, [sp, #8]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	9201      	str	r2, [sp, #4]
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f001 fa3a 	bl	8008138 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cc4:	e113      	b.n	8006eee <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f916 	bl	8006ef8 <USBH_HandleEnum>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 80fd 	bne.w	8006ed4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d103      	bne.n	8006cf4 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2208      	movs	r2, #8
 8006cf0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006cf2:	e0ef      	b.n	8006ed4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2207      	movs	r2, #7
 8006cf8:	701a      	strb	r2, [r3, #0]
      break;
 8006cfa:	e0eb      	b.n	8006ed4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 80e8 	beq.w	8006ed8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d0e:	2101      	movs	r1, #1
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2208      	movs	r2, #8
 8006d18:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006d1a:	e0dd      	b.n	8006ed8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fc3a 	bl	800759e <USBH_SetCfg>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f040 80d5 	bne.w	8006edc <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2209      	movs	r2, #9
 8006d36:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d38:	e0d0      	b.n	8006edc <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d016      	beq.n	8006d76 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006d48:	2101      	movs	r1, #1
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fc4a 	bl	80075e4 <USBH_SetFeature>
 8006d50:	4603      	mov	r3, r0
 8006d52:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d103      	bne.n	8006d64 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	220a      	movs	r2, #10
 8006d60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d62:	e0bd      	b.n	8006ee0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b03      	cmp	r3, #3
 8006d6a:	f040 80b9 	bne.w	8006ee0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	220a      	movs	r2, #10
 8006d72:	701a      	strb	r2, [r3, #0]
      break;
 8006d74:	e0b4      	b.n	8006ee0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	220a      	movs	r2, #10
 8006d7a:	701a      	strb	r2, [r3, #0]
      break;
 8006d7c:	e0b0      	b.n	8006ee0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80ad 	beq.w	8006ee4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d92:	2300      	movs	r3, #0
 8006d94:	73fb      	strb	r3, [r7, #15]
 8006d96:	e016      	b.n	8006dc6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006d98:	7bfa      	ldrb	r2, [r7, #15]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	32de      	adds	r2, #222	@ 0xde
 8006d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da2:	791a      	ldrb	r2, [r3, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d108      	bne.n	8006dc0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006dae:	7bfa      	ldrb	r2, [r7, #15]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	32de      	adds	r2, #222	@ 0xde
 8006db4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006dbe:	e005      	b.n	8006dcc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	73fb      	strb	r3, [r7, #15]
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0e5      	beq.n	8006d98 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d016      	beq.n	8006e04 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	4798      	blx	r3
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d109      	bne.n	8006dfc <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2206      	movs	r2, #6
 8006dec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006df4:	2103      	movs	r1, #3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006dfa:	e073      	b.n	8006ee4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	220d      	movs	r2, #13
 8006e00:	701a      	strb	r2, [r3, #0]
      break;
 8006e02:	e06f      	b.n	8006ee4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	220d      	movs	r2, #13
 8006e08:	701a      	strb	r2, [r3, #0]
      break;
 8006e0a:	e06b      	b.n	8006ee4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d017      	beq.n	8006e46 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
 8006e22:	4603      	mov	r3, r0
 8006e24:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d103      	bne.n	8006e36 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	220b      	movs	r2, #11
 8006e32:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e34:	e058      	b.n	8006ee8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006e36:	7bbb      	ldrb	r3, [r7, #14]
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d154      	bne.n	8006ee8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	220d      	movs	r2, #13
 8006e42:	701a      	strb	r2, [r3, #0]
      break;
 8006e44:	e050      	b.n	8006ee8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	220d      	movs	r2, #13
 8006e4a:	701a      	strb	r2, [r3, #0]
      break;
 8006e4c:	e04c      	b.n	8006ee8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d049      	beq.n	8006eec <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	4798      	blx	r3
      }
      break;
 8006e64:	e042      	b.n	8006eec <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7ff fd4a 	bl	8006908 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d009      	beq.n	8006e92 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d005      	beq.n	8006ea8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006ea2:	2105      	movs	r1, #5
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d107      	bne.n	8006ec4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7ff fe22 	bl	8006b06 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ec2:	e014      	b.n	8006eee <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 fb19 	bl	80084fc <USBH_LL_Start>
      break;
 8006eca:	e010      	b.n	8006eee <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006ecc:	bf00      	nop
 8006ece:	e00e      	b.n	8006eee <USBH_Process+0x3c6>
      break;
 8006ed0:	bf00      	nop
 8006ed2:	e00c      	b.n	8006eee <USBH_Process+0x3c6>
      break;
 8006ed4:	bf00      	nop
 8006ed6:	e00a      	b.n	8006eee <USBH_Process+0x3c6>
    break;
 8006ed8:	bf00      	nop
 8006eda:	e008      	b.n	8006eee <USBH_Process+0x3c6>
      break;
 8006edc:	bf00      	nop
 8006ede:	e006      	b.n	8006eee <USBH_Process+0x3c6>
      break;
 8006ee0:	bf00      	nop
 8006ee2:	e004      	b.n	8006eee <USBH_Process+0x3c6>
      break;
 8006ee4:	bf00      	nop
 8006ee6:	e002      	b.n	8006eee <USBH_Process+0x3c6>
      break;
 8006ee8:	bf00      	nop
 8006eea:	e000      	b.n	8006eee <USBH_Process+0x3c6>
      break;
 8006eec:	bf00      	nop
  }
  return USBH_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b088      	sub	sp, #32
 8006efc:	af04      	add	r7, sp, #16
 8006efe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006f00:	2301      	movs	r3, #1
 8006f02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006f04:	2301      	movs	r3, #1
 8006f06:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	785b      	ldrb	r3, [r3, #1]
 8006f0c:	2b07      	cmp	r3, #7
 8006f0e:	f200 81bd 	bhi.w	800728c <USBH_HandleEnum+0x394>
 8006f12:	a201      	add	r2, pc, #4	@ (adr r2, 8006f18 <USBH_HandleEnum+0x20>)
 8006f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f18:	08006f39 	.word	0x08006f39
 8006f1c:	08006ff3 	.word	0x08006ff3
 8006f20:	0800705d 	.word	0x0800705d
 8006f24:	080070e7 	.word	0x080070e7
 8006f28:	08007151 	.word	0x08007151
 8006f2c:	080071c1 	.word	0x080071c1
 8006f30:	08007207 	.word	0x08007207
 8006f34:	0800724d 	.word	0x0800724d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006f38:	2108      	movs	r1, #8
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa4c 	bl	80073d8 <USBH_Get_DevDesc>
 8006f40:	4603      	mov	r3, r0
 8006f42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f44:	7bbb      	ldrb	r3, [r7, #14]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d12e      	bne.n	8006fa8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	7919      	ldrb	r1, [r3, #4]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006f6e:	9202      	str	r2, [sp, #8]
 8006f70:	2200      	movs	r2, #0
 8006f72:	9201      	str	r2, [sp, #4]
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	4603      	mov	r3, r0
 8006f78:	2280      	movs	r2, #128	@ 0x80
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 f8dc 	bl	8008138 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	7959      	ldrb	r1, [r3, #5]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f94:	9202      	str	r2, [sp, #8]
 8006f96:	2200      	movs	r2, #0
 8006f98:	9201      	str	r2, [sp, #4]
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f001 f8c9 	bl	8008138 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006fa6:	e173      	b.n	8007290 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	f040 8170 	bne.w	8007290 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d903      	bls.n	8006fd2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	220d      	movs	r2, #13
 8006fce:	701a      	strb	r2, [r3, #0]
      break;
 8006fd0:	e15e      	b.n	8007290 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	795b      	ldrb	r3, [r3, #5]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 f8fd 	bl	80081d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	791b      	ldrb	r3, [r3, #4]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 f8f7 	bl	80081d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	701a      	strb	r2, [r3, #0]
      break;
 8006ff0:	e14e      	b.n	8007290 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006ff2:	2112      	movs	r1, #18
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f9ef 	bl	80073d8 <USBH_Get_DevDesc>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d103      	bne.n	800700c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800700a:	e143      	b.n	8007294 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	2b03      	cmp	r3, #3
 8007010:	f040 8140 	bne.w	8007294 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800701a:	3301      	adds	r3, #1
 800701c:	b2da      	uxtb	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800702a:	2b03      	cmp	r3, #3
 800702c:	d903      	bls.n	8007036 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	220d      	movs	r2, #13
 8007032:	701a      	strb	r2, [r3, #0]
      break;
 8007034:	e12e      	b.n	8007294 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	795b      	ldrb	r3, [r3, #5]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 f8cb 	bl	80081d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	791b      	ldrb	r3, [r3, #4]
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f001 f8c5 	bl	80081d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	701a      	strb	r2, [r3, #0]
      break;
 800705a:	e11b      	b.n	8007294 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800705c:	2101      	movs	r1, #1
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fa79 	bl	8007556 <USBH_SetAddress>
 8007064:	4603      	mov	r3, r0
 8007066:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007068:	7bbb      	ldrb	r3, [r7, #14]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d130      	bne.n	80070d0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800706e:	2002      	movs	r0, #2
 8007070:	f001 fbab 	bl	80087ca <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2203      	movs	r2, #3
 8007080:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	7919      	ldrb	r1, [r3, #4]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007096:	9202      	str	r2, [sp, #8]
 8007098:	2200      	movs	r2, #0
 800709a:	9201      	str	r2, [sp, #4]
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	4603      	mov	r3, r0
 80070a0:	2280      	movs	r2, #128	@ 0x80
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f001 f848 	bl	8008138 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	7959      	ldrb	r1, [r3, #5]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070bc:	9202      	str	r2, [sp, #8]
 80070be:	2200      	movs	r2, #0
 80070c0:	9201      	str	r2, [sp, #4]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	4603      	mov	r3, r0
 80070c6:	2200      	movs	r2, #0
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f001 f835 	bl	8008138 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80070ce:	e0e3      	b.n	8007298 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	f040 80e0 	bne.w	8007298 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	220d      	movs	r2, #13
 80070dc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	705a      	strb	r2, [r3, #1]
      break;
 80070e4:	e0d8      	b.n	8007298 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80070e6:	2109      	movs	r1, #9
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f9a1 	bl	8007430 <USBH_Get_CfgDesc>
 80070ee:	4603      	mov	r3, r0
 80070f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d103      	bne.n	8007100 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2204      	movs	r2, #4
 80070fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070fe:	e0cd      	b.n	800729c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	2b03      	cmp	r3, #3
 8007104:	f040 80ca 	bne.w	800729c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800710e:	3301      	adds	r3, #1
 8007110:	b2da      	uxtb	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800711e:	2b03      	cmp	r3, #3
 8007120:	d903      	bls.n	800712a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	220d      	movs	r2, #13
 8007126:	701a      	strb	r2, [r3, #0]
      break;
 8007128:	e0b8      	b.n	800729c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	795b      	ldrb	r3, [r3, #5]
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f001 f851 	bl	80081d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	791b      	ldrb	r3, [r3, #4]
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 f84b 	bl	80081d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	701a      	strb	r2, [r3, #0]
      break;
 800714e:	e0a5      	b.n	800729c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f969 	bl	8007430 <USBH_Get_CfgDesc>
 800715e:	4603      	mov	r3, r0
 8007160:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007162:	7bbb      	ldrb	r3, [r7, #14]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d103      	bne.n	8007170 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2205      	movs	r2, #5
 800716c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800716e:	e097      	b.n	80072a0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007170:	7bbb      	ldrb	r3, [r7, #14]
 8007172:	2b03      	cmp	r3, #3
 8007174:	f040 8094 	bne.w	80072a0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800717e:	3301      	adds	r3, #1
 8007180:	b2da      	uxtb	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800718e:	2b03      	cmp	r3, #3
 8007190:	d903      	bls.n	800719a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	220d      	movs	r2, #13
 8007196:	701a      	strb	r2, [r3, #0]
      break;
 8007198:	e082      	b.n	80072a0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	795b      	ldrb	r3, [r3, #5]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 f819 	bl	80081d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	791b      	ldrb	r3, [r3, #4]
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 f813 	bl	80081d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]
      break;
 80071be:	e06f      	b.n	80072a0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d019      	beq.n	80071fe <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80071d6:	23ff      	movs	r3, #255	@ 0xff
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f953 	bl	8007484 <USBH_Get_StringDesc>
 80071de:	4603      	mov	r3, r0
 80071e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d103      	bne.n	80071f0 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2206      	movs	r2, #6
 80071ec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80071ee:	e059      	b.n	80072a4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d156      	bne.n	80072a4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2206      	movs	r2, #6
 80071fa:	705a      	strb	r2, [r3, #1]
      break;
 80071fc:	e052      	b.n	80072a4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2206      	movs	r2, #6
 8007202:	705a      	strb	r2, [r3, #1]
      break;
 8007204:	e04e      	b.n	80072a4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800720c:	2b00      	cmp	r3, #0
 800720e:	d019      	beq.n	8007244 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800721c:	23ff      	movs	r3, #255	@ 0xff
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f930 	bl	8007484 <USBH_Get_StringDesc>
 8007224:	4603      	mov	r3, r0
 8007226:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d103      	bne.n	8007236 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2207      	movs	r2, #7
 8007232:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007234:	e038      	b.n	80072a8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007236:	7bbb      	ldrb	r3, [r7, #14]
 8007238:	2b03      	cmp	r3, #3
 800723a:	d135      	bne.n	80072a8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2207      	movs	r2, #7
 8007240:	705a      	strb	r2, [r3, #1]
      break;
 8007242:	e031      	b.n	80072a8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2207      	movs	r2, #7
 8007248:	705a      	strb	r2, [r3, #1]
      break;
 800724a:	e02d      	b.n	80072a8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007252:	2b00      	cmp	r3, #0
 8007254:	d017      	beq.n	8007286 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007262:	23ff      	movs	r3, #255	@ 0xff
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f90d 	bl	8007484 <USBH_Get_StringDesc>
 800726a:	4603      	mov	r3, r0
 800726c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800726e:	7bbb      	ldrb	r3, [r7, #14]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d102      	bne.n	800727a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007278:	e018      	b.n	80072ac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	2b03      	cmp	r3, #3
 800727e:	d115      	bne.n	80072ac <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	73fb      	strb	r3, [r7, #15]
      break;
 8007284:	e012      	b.n	80072ac <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]
      break;
 800728a:	e00f      	b.n	80072ac <USBH_HandleEnum+0x3b4>

    default:
      break;
 800728c:	bf00      	nop
 800728e:	e00e      	b.n	80072ae <USBH_HandleEnum+0x3b6>
      break;
 8007290:	bf00      	nop
 8007292:	e00c      	b.n	80072ae <USBH_HandleEnum+0x3b6>
      break;
 8007294:	bf00      	nop
 8007296:	e00a      	b.n	80072ae <USBH_HandleEnum+0x3b6>
      break;
 8007298:	bf00      	nop
 800729a:	e008      	b.n	80072ae <USBH_HandleEnum+0x3b6>
      break;
 800729c:	bf00      	nop
 800729e:	e006      	b.n	80072ae <USBH_HandleEnum+0x3b6>
      break;
 80072a0:	bf00      	nop
 80072a2:	e004      	b.n	80072ae <USBH_HandleEnum+0x3b6>
      break;
 80072a4:	bf00      	nop
 80072a6:	e002      	b.n	80072ae <USBH_HandleEnum+0x3b6>
      break;
 80072a8:	bf00      	nop
 80072aa:	e000      	b.n	80072ae <USBH_HandleEnum+0x3b6>
      break;
 80072ac:	bf00      	nop
  }
  return Status;
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80072ca:	bf00      	nop
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b082      	sub	sp, #8
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f804 	bl	80072fa <USBH_HandleSof>
}
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b0b      	cmp	r3, #11
 800730a:	d10a      	bne.n	8007322 <USBH_HandleSof+0x28>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	4798      	blx	r3
  }
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800732a:	b480      	push	{r7}
 800732c:	b083      	sub	sp, #12
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800733a:	bf00      	nop
}
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007356:	bf00      	nop
}
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 f8be 	bl	8008532 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	791b      	ldrb	r3, [r3, #4]
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 ff0b 	bl	80081d8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	795b      	ldrb	r3, [r3, #5]
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 ff05 	bl	80081d8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af02      	add	r7, sp, #8
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80073e4:	887b      	ldrh	r3, [r7, #2]
 80073e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073ea:	d901      	bls.n	80073f0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e01b      	b.n	8007428 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80073f6:	887b      	ldrh	r3, [r7, #2]
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	4613      	mov	r3, r2
 80073fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007400:	2100      	movs	r1, #0
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f872 	bl	80074ec <USBH_GetDescriptor>
 8007408:	4603      	mov	r3, r0
 800740a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800740c:	7bfb      	ldrb	r3, [r7, #15]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007418:	887a      	ldrh	r2, [r7, #2]
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f929 	bl	8007674 <USBH_ParseDevDesc>
 8007422:	4603      	mov	r3, r0
 8007424:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007426:	7bfb      	ldrb	r3, [r7, #15]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af02      	add	r7, sp, #8
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	331c      	adds	r3, #28
 8007440:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007442:	887b      	ldrh	r3, [r7, #2]
 8007444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007448:	d901      	bls.n	800744e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800744a:	2303      	movs	r3, #3
 800744c:	e016      	b.n	800747c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800744e:	887b      	ldrh	r3, [r7, #2]
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007458:	2100      	movs	r1, #0
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f846 	bl	80074ec <USBH_GetDescriptor>
 8007460:	4603      	mov	r3, r0
 8007462:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007464:	7bfb      	ldrb	r3, [r7, #15]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d107      	bne.n	800747a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800746a:	887b      	ldrh	r3, [r7, #2]
 800746c:	461a      	mov	r2, r3
 800746e:	68b9      	ldr	r1, [r7, #8]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f9af 	bl	80077d4 <USBH_ParseCfgDesc>
 8007476:	4603      	mov	r3, r0
 8007478:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800747a:	7bfb      	ldrb	r3, [r7, #15]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af02      	add	r7, sp, #8
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	607a      	str	r2, [r7, #4]
 800748e:	461a      	mov	r2, r3
 8007490:	460b      	mov	r3, r1
 8007492:	72fb      	strb	r3, [r7, #11]
 8007494:	4613      	mov	r3, r2
 8007496:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007498:	893b      	ldrh	r3, [r7, #8]
 800749a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800749e:	d802      	bhi.n	80074a6 <USBH_Get_StringDesc+0x22>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e01c      	b.n	80074e4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80074aa:	7afb      	ldrb	r3, [r7, #11]
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80074b2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80074ba:	893b      	ldrh	r3, [r7, #8]
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	460b      	mov	r3, r1
 80074c0:	2100      	movs	r1, #0
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 f812 	bl	80074ec <USBH_GetDescriptor>
 80074c8:	4603      	mov	r3, r0
 80074ca:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80074cc:	7dfb      	ldrb	r3, [r7, #23]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d107      	bne.n	80074e2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80074d8:	893a      	ldrh	r2, [r7, #8]
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 fb8d 	bl	8007bfc <USBH_ParseStringDesc>
  }

  return status;
 80074e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	607b      	str	r3, [r7, #4]
 80074f6:	460b      	mov	r3, r1
 80074f8:	72fb      	strb	r3, [r7, #11]
 80074fa:	4613      	mov	r3, r2
 80074fc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	789b      	ldrb	r3, [r3, #2]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d11c      	bne.n	8007540 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007506:	7afb      	ldrb	r3, [r7, #11]
 8007508:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800750c:	b2da      	uxtb	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2206      	movs	r2, #6
 8007516:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	893a      	ldrh	r2, [r7, #8]
 800751c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800751e:	893b      	ldrh	r3, [r7, #8]
 8007520:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007524:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007528:	d104      	bne.n	8007534 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f240 4209 	movw	r2, #1033	@ 0x409
 8007530:	829a      	strh	r2, [r3, #20]
 8007532:	e002      	b.n	800753a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	8b3a      	ldrh	r2, [r7, #24]
 800753e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007540:	8b3b      	ldrh	r3, [r7, #24]
 8007542:	461a      	mov	r2, r3
 8007544:	6879      	ldr	r1, [r7, #4]
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 fba5 	bl	8007c96 <USBH_CtlReq>
 800754c:	4603      	mov	r3, r0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b082      	sub	sp, #8
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	460b      	mov	r3, r1
 8007560:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	789b      	ldrb	r3, [r3, #2]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d10f      	bne.n	800758a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2205      	movs	r2, #5
 8007574:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007576:	78fb      	ldrb	r3, [r7, #3]
 8007578:	b29a      	uxth	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800758a:	2200      	movs	r2, #0
 800758c:	2100      	movs	r1, #0
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fb81 	bl	8007c96 <USBH_CtlReq>
 8007594:	4603      	mov	r3, r0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b082      	sub	sp, #8
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	460b      	mov	r3, r1
 80075a8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	789b      	ldrb	r3, [r3, #2]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d10e      	bne.n	80075d0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2209      	movs	r2, #9
 80075bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	887a      	ldrh	r2, [r7, #2]
 80075c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80075d0:	2200      	movs	r2, #0
 80075d2:	2100      	movs	r1, #0
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fb5e 	bl	8007c96 <USBH_CtlReq>
 80075da:	4603      	mov	r3, r0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	789b      	ldrb	r3, [r3, #2]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d10f      	bne.n	8007618 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2203      	movs	r2, #3
 8007602:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	b29a      	uxth	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007618:	2200      	movs	r2, #0
 800761a:	2100      	movs	r1, #0
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fb3a 	bl	8007c96 <USBH_CtlReq>
 8007622:	4603      	mov	r3, r0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	789b      	ldrb	r3, [r3, #2]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d10f      	bne.n	8007660 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007652:	78fb      	ldrb	r3, [r7, #3]
 8007654:	b29a      	uxth	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007660:	2200      	movs	r2, #0
 8007662:	2100      	movs	r1, #0
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fb16 	bl	8007c96 <USBH_CtlReq>
 800766a:	4603      	mov	r3, r0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007674:	b480      	push	{r7}
 8007676:	b087      	sub	sp, #28
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	4613      	mov	r3, r2
 8007680:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007688:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007694:	2302      	movs	r3, #2
 8007696:	e094      	b.n	80077c2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	781a      	ldrb	r2, [r3, #0]
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	785a      	ldrb	r2, [r3, #1]
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	3302      	adds	r3, #2
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	3303      	adds	r3, #3
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	021b      	lsls	r3, r3, #8
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	4313      	orrs	r3, r2
 80076bc:	b29a      	uxth	r2, r3
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	791a      	ldrb	r2, [r3, #4]
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	795a      	ldrb	r2, [r3, #5]
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	799a      	ldrb	r2, [r3, #6]
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	79da      	ldrb	r2, [r3, #7]
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d004      	beq.n	80076f6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d11b      	bne.n	800772e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	79db      	ldrb	r3, [r3, #7]
 80076fa:	2b20      	cmp	r3, #32
 80076fc:	dc0f      	bgt.n	800771e <USBH_ParseDevDesc+0xaa>
 80076fe:	2b08      	cmp	r3, #8
 8007700:	db0f      	blt.n	8007722 <USBH_ParseDevDesc+0xae>
 8007702:	3b08      	subs	r3, #8
 8007704:	4a32      	ldr	r2, [pc, #200]	@ (80077d0 <USBH_ParseDevDesc+0x15c>)
 8007706:	fa22 f303 	lsr.w	r3, r2, r3
 800770a:	f003 0301 	and.w	r3, r3, #1
 800770e:	2b00      	cmp	r3, #0
 8007710:	bf14      	ite	ne
 8007712:	2301      	movne	r3, #1
 8007714:	2300      	moveq	r3, #0
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	d106      	bne.n	800772a <USBH_ParseDevDesc+0xb6>
 800771c:	e001      	b.n	8007722 <USBH_ParseDevDesc+0xae>
 800771e:	2b40      	cmp	r3, #64	@ 0x40
 8007720:	d003      	beq.n	800772a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	2208      	movs	r2, #8
 8007726:	71da      	strb	r2, [r3, #7]
        break;
 8007728:	e000      	b.n	800772c <USBH_ParseDevDesc+0xb8>
        break;
 800772a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800772c:	e00e      	b.n	800774c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007734:	2b02      	cmp	r3, #2
 8007736:	d107      	bne.n	8007748 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	79db      	ldrb	r3, [r3, #7]
 800773c:	2b08      	cmp	r3, #8
 800773e:	d005      	beq.n	800774c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	2208      	movs	r2, #8
 8007744:	71da      	strb	r2, [r3, #7]
 8007746:	e001      	b.n	800774c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007748:	2303      	movs	r3, #3
 800774a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800774c:	88fb      	ldrh	r3, [r7, #6]
 800774e:	2b08      	cmp	r3, #8
 8007750:	d936      	bls.n	80077c0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	3308      	adds	r3, #8
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	461a      	mov	r2, r3
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	3309      	adds	r3, #9
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	021b      	lsls	r3, r3, #8
 8007762:	b29b      	uxth	r3, r3
 8007764:	4313      	orrs	r3, r2
 8007766:	b29a      	uxth	r2, r3
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	330a      	adds	r3, #10
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	330b      	adds	r3, #11
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	021b      	lsls	r3, r3, #8
 800777c:	b29b      	uxth	r3, r3
 800777e:	4313      	orrs	r3, r2
 8007780:	b29a      	uxth	r2, r3
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	330c      	adds	r3, #12
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	461a      	mov	r2, r3
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	330d      	adds	r3, #13
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	021b      	lsls	r3, r3, #8
 8007796:	b29b      	uxth	r3, r3
 8007798:	4313      	orrs	r3, r2
 800779a:	b29a      	uxth	r2, r3
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	7b9a      	ldrb	r2, [r3, #14]
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	7bda      	ldrb	r2, [r3, #15]
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	7c1a      	ldrb	r2, [r3, #16]
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	7c5a      	ldrb	r2, [r3, #17]
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80077c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	371c      	adds	r7, #28
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	01000101 	.word	0x01000101

080077d4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08c      	sub	sp, #48	@ 0x30
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	4613      	mov	r3, r2
 80077e0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80077e8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80077f0:	2300      	movs	r3, #0
 80077f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007802:	2302      	movs	r3, #2
 8007804:	e0da      	b.n	80079bc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800780a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b09      	cmp	r3, #9
 8007810:	d002      	beq.n	8007818 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007814:	2209      	movs	r2, #9
 8007816:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	781a      	ldrb	r2, [r3, #0]
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	785a      	ldrb	r2, [r3, #1]
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	3302      	adds	r3, #2
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	3303      	adds	r3, #3
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	021b      	lsls	r3, r3, #8
 8007838:	b29b      	uxth	r3, r3
 800783a:	4313      	orrs	r3, r2
 800783c:	b29b      	uxth	r3, r3
 800783e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007842:	bf28      	it	cs
 8007844:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007848:	b29a      	uxth	r2, r3
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	791a      	ldrb	r2, [r3, #4]
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	795a      	ldrb	r2, [r3, #5]
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	799a      	ldrb	r2, [r3, #6]
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	79da      	ldrb	r2, [r3, #7]
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	7a1a      	ldrb	r2, [r3, #8]
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007876:	88fb      	ldrh	r3, [r7, #6]
 8007878:	2b09      	cmp	r3, #9
 800787a:	f240 809d 	bls.w	80079b8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800787e:	2309      	movs	r3, #9
 8007880:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007882:	2300      	movs	r3, #0
 8007884:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007886:	e081      	b.n	800798c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007888:	f107 0316 	add.w	r3, r7, #22
 800788c:	4619      	mov	r1, r3
 800788e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007890:	f000 f9e7 	bl	8007c62 <USBH_GetNextDesc>
 8007894:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007898:	785b      	ldrb	r3, [r3, #1]
 800789a:	2b04      	cmp	r3, #4
 800789c:	d176      	bne.n	800798c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800789e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b09      	cmp	r3, #9
 80078a4:	d002      	beq.n	80078ac <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80078a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a8:	2209      	movs	r2, #9
 80078aa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80078ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078b0:	221a      	movs	r2, #26
 80078b2:	fb02 f303 	mul.w	r3, r2, r3
 80078b6:	3308      	adds	r3, #8
 80078b8:	6a3a      	ldr	r2, [r7, #32]
 80078ba:	4413      	add	r3, r2
 80078bc:	3302      	adds	r3, #2
 80078be:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80078c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078c2:	69f8      	ldr	r0, [r7, #28]
 80078c4:	f000 f87e 	bl	80079c4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80078d2:	e043      	b.n	800795c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078d4:	f107 0316 	add.w	r3, r7, #22
 80078d8:	4619      	mov	r1, r3
 80078da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078dc:	f000 f9c1 	bl	8007c62 <USBH_GetNextDesc>
 80078e0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80078e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e4:	785b      	ldrb	r3, [r3, #1]
 80078e6:	2b05      	cmp	r3, #5
 80078e8:	d138      	bne.n	800795c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	795b      	ldrb	r3, [r3, #5]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d113      	bne.n	800791a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d003      	beq.n	8007902 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	799b      	ldrb	r3, [r3, #6]
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d10b      	bne.n	800791a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	79db      	ldrb	r3, [r3, #7]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10b      	bne.n	8007922 <USBH_ParseCfgDesc+0x14e>
 800790a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b09      	cmp	r3, #9
 8007910:	d007      	beq.n	8007922 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8007912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007914:	2209      	movs	r2, #9
 8007916:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007918:	e003      	b.n	8007922 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800791a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791c:	2207      	movs	r2, #7
 800791e:	701a      	strb	r2, [r3, #0]
 8007920:	e000      	b.n	8007924 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007922:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007928:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800792c:	3201      	adds	r2, #1
 800792e:	00d2      	lsls	r2, r2, #3
 8007930:	211a      	movs	r1, #26
 8007932:	fb01 f303 	mul.w	r3, r1, r3
 8007936:	4413      	add	r3, r2
 8007938:	3308      	adds	r3, #8
 800793a:	6a3a      	ldr	r2, [r7, #32]
 800793c:	4413      	add	r3, r2
 800793e:	3304      	adds	r3, #4
 8007940:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007942:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007944:	69b9      	ldr	r1, [r7, #24]
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 f870 	bl	8007a2c <USBH_ParseEPDesc>
 800794c:	4603      	mov	r3, r0
 800794e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007952:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007956:	3301      	adds	r3, #1
 8007958:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	791b      	ldrb	r3, [r3, #4]
 8007960:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007964:	429a      	cmp	r2, r3
 8007966:	d204      	bcs.n	8007972 <USBH_ParseCfgDesc+0x19e>
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	885a      	ldrh	r2, [r3, #2]
 800796c:	8afb      	ldrh	r3, [r7, #22]
 800796e:	429a      	cmp	r2, r3
 8007970:	d8b0      	bhi.n	80078d4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	791b      	ldrb	r3, [r3, #4]
 8007976:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800797a:	429a      	cmp	r2, r3
 800797c:	d201      	bcs.n	8007982 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800797e:	2303      	movs	r3, #3
 8007980:	e01c      	b.n	80079bc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8007982:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007986:	3301      	adds	r3, #1
 8007988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800798c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007990:	2b01      	cmp	r3, #1
 8007992:	d805      	bhi.n	80079a0 <USBH_ParseCfgDesc+0x1cc>
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	885a      	ldrh	r2, [r3, #2]
 8007998:	8afb      	ldrh	r3, [r7, #22]
 800799a:	429a      	cmp	r2, r3
 800799c:	f63f af74 	bhi.w	8007888 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	791b      	ldrb	r3, [r3, #4]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	bf28      	it	cs
 80079a8:	2302      	movcs	r3, #2
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d201      	bcs.n	80079b8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e001      	b.n	80079bc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80079b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3730      	adds	r7, #48	@ 0x30
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	781a      	ldrb	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	785a      	ldrb	r2, [r3, #1]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	789a      	ldrb	r2, [r3, #2]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	78da      	ldrb	r2, [r3, #3]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	3304      	adds	r3, #4
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	bf28      	it	cs
 80079f8:	2302      	movcs	r3, #2
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	795a      	ldrb	r2, [r3, #5]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	799a      	ldrb	r2, [r3, #6]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	79da      	ldrb	r2, [r3, #7]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	7a1a      	ldrb	r2, [r3, #8]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	721a      	strb	r2, [r3, #8]
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	781a      	ldrb	r2, [r3, #0]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	785a      	ldrb	r2, [r3, #1]
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	789a      	ldrb	r2, [r3, #2]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	78da      	ldrb	r2, [r3, #3]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3305      	adds	r3, #5
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	021b      	lsls	r3, r3, #8
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	799a      	ldrb	r2, [r3, #6]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	889b      	ldrh	r3, [r3, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d009      	beq.n	8007a9a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a8e:	d804      	bhi.n	8007a9a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007a94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a98:	d901      	bls.n	8007a9e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d136      	bne.n	8007b16 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	78db      	ldrb	r3, [r3, #3]
 8007aac:	f003 0303 	and.w	r3, r3, #3
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d108      	bne.n	8007ac6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	889b      	ldrh	r3, [r3, #4]
 8007ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007abc:	f240 8097 	bls.w	8007bee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	75fb      	strb	r3, [r7, #23]
 8007ac4:	e093      	b.n	8007bee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	78db      	ldrb	r3, [r3, #3]
 8007aca:	f003 0303 	and.w	r3, r3, #3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d107      	bne.n	8007ae2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	889b      	ldrh	r3, [r3, #4]
 8007ad6:	2b40      	cmp	r3, #64	@ 0x40
 8007ad8:	f240 8089 	bls.w	8007bee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007adc:	2303      	movs	r3, #3
 8007ade:	75fb      	strb	r3, [r7, #23]
 8007ae0:	e085      	b.n	8007bee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	78db      	ldrb	r3, [r3, #3]
 8007ae6:	f003 0303 	and.w	r3, r3, #3
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d005      	beq.n	8007afa <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	78db      	ldrb	r3, [r3, #3]
 8007af2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d10a      	bne.n	8007b10 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	799b      	ldrb	r3, [r3, #6]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <USBH_ParseEPDesc+0xde>
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	799b      	ldrb	r3, [r3, #6]
 8007b06:	2b10      	cmp	r3, #16
 8007b08:	d970      	bls.n	8007bec <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b0e:	e06d      	b.n	8007bec <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007b10:	2303      	movs	r3, #3
 8007b12:	75fb      	strb	r3, [r7, #23]
 8007b14:	e06b      	b.n	8007bee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d13c      	bne.n	8007b9a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	78db      	ldrb	r3, [r3, #3]
 8007b24:	f003 0303 	and.w	r3, r3, #3
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d005      	beq.n	8007b38 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	78db      	ldrb	r3, [r3, #3]
 8007b30:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d106      	bne.n	8007b46 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	889b      	ldrh	r3, [r3, #4]
 8007b3c:	2b40      	cmp	r3, #64	@ 0x40
 8007b3e:	d956      	bls.n	8007bee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b40:	2303      	movs	r3, #3
 8007b42:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007b44:	e053      	b.n	8007bee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	78db      	ldrb	r3, [r3, #3]
 8007b4a:	f003 0303 	and.w	r3, r3, #3
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d10e      	bne.n	8007b70 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	799b      	ldrb	r3, [r3, #6]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d007      	beq.n	8007b6a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007b5e:	2b10      	cmp	r3, #16
 8007b60:	d803      	bhi.n	8007b6a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007b66:	2b40      	cmp	r3, #64	@ 0x40
 8007b68:	d941      	bls.n	8007bee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	75fb      	strb	r3, [r7, #23]
 8007b6e:	e03e      	b.n	8007bee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	78db      	ldrb	r3, [r3, #3]
 8007b74:	f003 0303 	and.w	r3, r3, #3
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d10b      	bne.n	8007b94 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	799b      	ldrb	r3, [r3, #6]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d004      	beq.n	8007b8e <USBH_ParseEPDesc+0x162>
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	889b      	ldrh	r3, [r3, #4]
 8007b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b8c:	d32f      	bcc.n	8007bee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	75fb      	strb	r3, [r7, #23]
 8007b92:	e02c      	b.n	8007bee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007b94:	2303      	movs	r3, #3
 8007b96:	75fb      	strb	r3, [r7, #23]
 8007b98:	e029      	b.n	8007bee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d120      	bne.n	8007be6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	78db      	ldrb	r3, [r3, #3]
 8007ba8:	f003 0303 	and.w	r3, r3, #3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d106      	bne.n	8007bbe <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	889b      	ldrh	r3, [r3, #4]
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d01a      	beq.n	8007bee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	75fb      	strb	r3, [r7, #23]
 8007bbc:	e017      	b.n	8007bee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	78db      	ldrb	r3, [r3, #3]
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d10a      	bne.n	8007be0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	799b      	ldrb	r3, [r3, #6]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <USBH_ParseEPDesc+0x1ae>
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	889b      	ldrh	r3, [r3, #4]
 8007bd6:	2b08      	cmp	r3, #8
 8007bd8:	d909      	bls.n	8007bee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	75fb      	strb	r3, [r7, #23]
 8007bde:	e006      	b.n	8007bee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007be0:	2303      	movs	r3, #3
 8007be2:	75fb      	strb	r3, [r7, #23]
 8007be4:	e003      	b.n	8007bee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007be6:	2303      	movs	r3, #3
 8007be8:	75fb      	strb	r3, [r7, #23]
 8007bea:	e000      	b.n	8007bee <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bec:	bf00      	nop
  }

  return status;
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	371c      	adds	r7, #28
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	4613      	mov	r3, r2
 8007c08:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d120      	bne.n	8007c56 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	1e9a      	subs	r2, r3, #2
 8007c1a:	88fb      	ldrh	r3, [r7, #6]
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	bf28      	it	cs
 8007c20:	4613      	movcs	r3, r2
 8007c22:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3302      	adds	r3, #2
 8007c28:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	82fb      	strh	r3, [r7, #22]
 8007c2e:	e00b      	b.n	8007c48 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c30:	8afb      	ldrh	r3, [r7, #22]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	4413      	add	r3, r2
 8007c36:	781a      	ldrb	r2, [r3, #0]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c42:	8afb      	ldrh	r3, [r7, #22]
 8007c44:	3302      	adds	r3, #2
 8007c46:	82fb      	strh	r3, [r7, #22]
 8007c48:	8afa      	ldrh	r2, [r7, #22]
 8007c4a:	8abb      	ldrh	r3, [r7, #20]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d3ef      	bcc.n	8007c30 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2200      	movs	r2, #0
 8007c54:	701a      	strb	r2, [r3, #0]
  }
}
 8007c56:	bf00      	nop
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b085      	sub	sp, #20
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	7812      	ldrb	r2, [r2, #0]
 8007c74:	4413      	add	r3, r2
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4413      	add	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c88:	68fb      	ldr	r3, [r7, #12]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b086      	sub	sp, #24
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	60f8      	str	r0, [r7, #12]
 8007c9e:	60b9      	str	r1, [r7, #8]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	789b      	ldrb	r3, [r3, #2]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d002      	beq.n	8007cb6 <USBH_CtlReq+0x20>
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d00f      	beq.n	8007cd4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007cb4:	e027      	b.n	8007d06 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	88fa      	ldrh	r2, [r7, #6]
 8007cc0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd2:	e018      	b.n	8007d06 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 f81b 	bl	8007d10 <USBH_HandleControl>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007cde:	7dfb      	ldrb	r3, [r7, #23]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <USBH_CtlReq+0x54>
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	d106      	bne.n	8007cf8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2201      	movs	r2, #1
 8007cee:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	761a      	strb	r2, [r3, #24]
      break;
 8007cf6:	e005      	b.n	8007d04 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d102      	bne.n	8007d04 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2201      	movs	r2, #1
 8007d02:	709a      	strb	r2, [r3, #2]
      break;
 8007d04:	bf00      	nop
  }
  return status;
 8007d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3718      	adds	r7, #24
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af02      	add	r7, sp, #8
 8007d16:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	7e1b      	ldrb	r3, [r3, #24]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	2b0a      	cmp	r3, #10
 8007d28:	f200 8156 	bhi.w	8007fd8 <USBH_HandleControl+0x2c8>
 8007d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d34 <USBH_HandleControl+0x24>)
 8007d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d32:	bf00      	nop
 8007d34:	08007d61 	.word	0x08007d61
 8007d38:	08007d7b 	.word	0x08007d7b
 8007d3c:	08007de5 	.word	0x08007de5
 8007d40:	08007e0b 	.word	0x08007e0b
 8007d44:	08007e43 	.word	0x08007e43
 8007d48:	08007e6d 	.word	0x08007e6d
 8007d4c:	08007ebf 	.word	0x08007ebf
 8007d50:	08007ee1 	.word	0x08007ee1
 8007d54:	08007f1d 	.word	0x08007f1d
 8007d58:	08007f43 	.word	0x08007f43
 8007d5c:	08007f81 	.word	0x08007f81
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f103 0110 	add.w	r1, r3, #16
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	795b      	ldrb	r3, [r3, #5]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f943 	bl	8007ff8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2202      	movs	r2, #2
 8007d76:	761a      	strb	r2, [r3, #24]
      break;
 8007d78:	e139      	b.n	8007fee <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	795b      	ldrb	r3, [r3, #5]
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fcc5 	bl	8008710 <USBH_LL_GetURBState>
 8007d86:	4603      	mov	r3, r0
 8007d88:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d8a:	7bbb      	ldrb	r3, [r7, #14]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d11e      	bne.n	8007dce <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	7c1b      	ldrb	r3, [r3, #16]
 8007d94:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007d98:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	8adb      	ldrh	r3, [r3, #22]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00a      	beq.n	8007db8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007da2:	7b7b      	ldrb	r3, [r7, #13]
 8007da4:	2b80      	cmp	r3, #128	@ 0x80
 8007da6:	d103      	bne.n	8007db0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2203      	movs	r2, #3
 8007dac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007dae:	e115      	b.n	8007fdc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2205      	movs	r2, #5
 8007db4:	761a      	strb	r2, [r3, #24]
      break;
 8007db6:	e111      	b.n	8007fdc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007db8:	7b7b      	ldrb	r3, [r7, #13]
 8007dba:	2b80      	cmp	r3, #128	@ 0x80
 8007dbc:	d103      	bne.n	8007dc6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2209      	movs	r2, #9
 8007dc2:	761a      	strb	r2, [r3, #24]
      break;
 8007dc4:	e10a      	b.n	8007fdc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2207      	movs	r2, #7
 8007dca:	761a      	strb	r2, [r3, #24]
      break;
 8007dcc:	e106      	b.n	8007fdc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d003      	beq.n	8007ddc <USBH_HandleControl+0xcc>
 8007dd4:	7bbb      	ldrb	r3, [r7, #14]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	f040 8100 	bne.w	8007fdc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	220b      	movs	r2, #11
 8007de0:	761a      	strb	r2, [r3, #24]
      break;
 8007de2:	e0fb      	b.n	8007fdc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6899      	ldr	r1, [r3, #8]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	899a      	ldrh	r2, [r3, #12]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	791b      	ldrb	r3, [r3, #4]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f93a 	bl	8008076 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2204      	movs	r2, #4
 8007e06:	761a      	strb	r2, [r3, #24]
      break;
 8007e08:	e0f1      	b.n	8007fee <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	791b      	ldrb	r3, [r3, #4]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fc7d 	bl	8008710 <USBH_LL_GetURBState>
 8007e16:	4603      	mov	r3, r0
 8007e18:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d102      	bne.n	8007e26 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2209      	movs	r2, #9
 8007e24:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007e26:	7bbb      	ldrb	r3, [r7, #14]
 8007e28:	2b05      	cmp	r3, #5
 8007e2a:	d102      	bne.n	8007e32 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e30:	e0d6      	b.n	8007fe0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	2b04      	cmp	r3, #4
 8007e36:	f040 80d3 	bne.w	8007fe0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	220b      	movs	r2, #11
 8007e3e:	761a      	strb	r2, [r3, #24]
      break;
 8007e40:	e0ce      	b.n	8007fe0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6899      	ldr	r1, [r3, #8]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	899a      	ldrh	r2, [r3, #12]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	795b      	ldrb	r3, [r3, #5]
 8007e4e:	2001      	movs	r0, #1
 8007e50:	9000      	str	r0, [sp, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f8ea 	bl	800802c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2206      	movs	r2, #6
 8007e68:	761a      	strb	r2, [r3, #24]
      break;
 8007e6a:	e0c0      	b.n	8007fee <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	795b      	ldrb	r3, [r3, #5]
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fc4c 	bl	8008710 <USBH_LL_GetURBState>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d103      	bne.n	8007e8a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2207      	movs	r2, #7
 8007e86:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e88:	e0ac      	b.n	8007fe4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
 8007e8c:	2b05      	cmp	r3, #5
 8007e8e:	d105      	bne.n	8007e9c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	220c      	movs	r2, #12
 8007e94:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007e96:	2303      	movs	r3, #3
 8007e98:	73fb      	strb	r3, [r7, #15]
      break;
 8007e9a:	e0a3      	b.n	8007fe4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e9c:	7bbb      	ldrb	r3, [r7, #14]
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d103      	bne.n	8007eaa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2205      	movs	r2, #5
 8007ea6:	761a      	strb	r2, [r3, #24]
      break;
 8007ea8:	e09c      	b.n	8007fe4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	f040 8099 	bne.w	8007fe4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	220b      	movs	r2, #11
 8007eb6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007eb8:	2302      	movs	r3, #2
 8007eba:	73fb      	strb	r3, [r7, #15]
      break;
 8007ebc:	e092      	b.n	8007fe4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	791b      	ldrb	r3, [r3, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f8d5 	bl	8008076 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2208      	movs	r2, #8
 8007edc:	761a      	strb	r2, [r3, #24]

      break;
 8007ede:	e086      	b.n	8007fee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	791b      	ldrb	r3, [r3, #4]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fc12 	bl	8008710 <USBH_LL_GetURBState>
 8007eec:	4603      	mov	r3, r0
 8007eee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ef0:	7bbb      	ldrb	r3, [r7, #14]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d105      	bne.n	8007f02 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	220d      	movs	r2, #13
 8007efa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f00:	e072      	b.n	8007fe8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d103      	bne.n	8007f10 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	220b      	movs	r2, #11
 8007f0c:	761a      	strb	r2, [r3, #24]
      break;
 8007f0e:	e06b      	b.n	8007fe8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
 8007f12:	2b05      	cmp	r3, #5
 8007f14:	d168      	bne.n	8007fe8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007f16:	2303      	movs	r3, #3
 8007f18:	73fb      	strb	r3, [r7, #15]
      break;
 8007f1a:	e065      	b.n	8007fe8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	795b      	ldrb	r3, [r3, #5]
 8007f20:	2201      	movs	r2, #1
 8007f22:	9200      	str	r2, [sp, #0]
 8007f24:	2200      	movs	r2, #0
 8007f26:	2100      	movs	r1, #0
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f87f 	bl	800802c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	220a      	movs	r2, #10
 8007f3e:	761a      	strb	r2, [r3, #24]
      break;
 8007f40:	e055      	b.n	8007fee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	795b      	ldrb	r3, [r3, #5]
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fbe1 	bl	8008710 <USBH_LL_GetURBState>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d105      	bne.n	8007f64 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	220d      	movs	r2, #13
 8007f60:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f62:	e043      	b.n	8007fec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d103      	bne.n	8007f72 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2209      	movs	r2, #9
 8007f6e:	761a      	strb	r2, [r3, #24]
      break;
 8007f70:	e03c      	b.n	8007fec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	d139      	bne.n	8007fec <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	220b      	movs	r2, #11
 8007f7c:	761a      	strb	r2, [r3, #24]
      break;
 8007f7e:	e035      	b.n	8007fec <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	7e5b      	ldrb	r3, [r3, #25]
 8007f84:	3301      	adds	r3, #1
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	765a      	strb	r2, [r3, #25]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	7e5b      	ldrb	r3, [r3, #25]
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d806      	bhi.n	8007fa2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007fa0:	e025      	b.n	8007fee <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fa8:	2106      	movs	r1, #6
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	795b      	ldrb	r3, [r3, #5]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f90c 	bl	80081d8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	791b      	ldrb	r3, [r3, #4]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f906 	bl	80081d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8007fd6:	e00a      	b.n	8007fee <USBH_HandleControl+0x2de>

    default:
      break;
 8007fd8:	bf00      	nop
 8007fda:	e008      	b.n	8007fee <USBH_HandleControl+0x2de>
      break;
 8007fdc:	bf00      	nop
 8007fde:	e006      	b.n	8007fee <USBH_HandleControl+0x2de>
      break;
 8007fe0:	bf00      	nop
 8007fe2:	e004      	b.n	8007fee <USBH_HandleControl+0x2de>
      break;
 8007fe4:	bf00      	nop
 8007fe6:	e002      	b.n	8007fee <USBH_HandleControl+0x2de>
      break;
 8007fe8:	bf00      	nop
 8007fea:	e000      	b.n	8007fee <USBH_HandleControl+0x2de>
      break;
 8007fec:	bf00      	nop
  }

  return status;
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b088      	sub	sp, #32
 8007ffc:	af04      	add	r7, sp, #16
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4613      	mov	r3, r2
 8008004:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008006:	79f9      	ldrb	r1, [r7, #7]
 8008008:	2300      	movs	r3, #0
 800800a:	9303      	str	r3, [sp, #12]
 800800c:	2308      	movs	r3, #8
 800800e:	9302      	str	r3, [sp, #8]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	2300      	movs	r3, #0
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	2300      	movs	r3, #0
 800801a:	2200      	movs	r2, #0
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f000 fb46 	bl	80086ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af04      	add	r7, sp, #16
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	4611      	mov	r1, r2
 8008038:	461a      	mov	r2, r3
 800803a:	460b      	mov	r3, r1
 800803c:	80fb      	strh	r3, [r7, #6]
 800803e:	4613      	mov	r3, r2
 8008040:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008050:	7979      	ldrb	r1, [r7, #5]
 8008052:	7e3b      	ldrb	r3, [r7, #24]
 8008054:	9303      	str	r3, [sp, #12]
 8008056:	88fb      	ldrh	r3, [r7, #6]
 8008058:	9302      	str	r3, [sp, #8]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	2301      	movs	r3, #1
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	2300      	movs	r3, #0
 8008064:	2200      	movs	r2, #0
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 fb21 	bl	80086ae <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b088      	sub	sp, #32
 800807a:	af04      	add	r7, sp, #16
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	4611      	mov	r1, r2
 8008082:	461a      	mov	r2, r3
 8008084:	460b      	mov	r3, r1
 8008086:	80fb      	strh	r3, [r7, #6]
 8008088:	4613      	mov	r3, r2
 800808a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800808c:	7979      	ldrb	r1, [r7, #5]
 800808e:	2300      	movs	r3, #0
 8008090:	9303      	str	r3, [sp, #12]
 8008092:	88fb      	ldrh	r3, [r7, #6]
 8008094:	9302      	str	r3, [sp, #8]
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	2301      	movs	r3, #1
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	2300      	movs	r3, #0
 80080a0:	2201      	movs	r2, #1
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f000 fb03 	bl	80086ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80080a8:	2300      	movs	r3, #0

}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b088      	sub	sp, #32
 80080b6:	af04      	add	r7, sp, #16
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	4611      	mov	r1, r2
 80080be:	461a      	mov	r2, r3
 80080c0:	460b      	mov	r3, r1
 80080c2:	80fb      	strh	r3, [r7, #6]
 80080c4:	4613      	mov	r3, r2
 80080c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080d6:	7979      	ldrb	r1, [r7, #5]
 80080d8:	7e3b      	ldrb	r3, [r7, #24]
 80080da:	9303      	str	r3, [sp, #12]
 80080dc:	88fb      	ldrh	r3, [r7, #6]
 80080de:	9302      	str	r3, [sp, #8]
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	9301      	str	r3, [sp, #4]
 80080e4:	2301      	movs	r3, #1
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	2302      	movs	r3, #2
 80080ea:	2200      	movs	r2, #0
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 fade 	bl	80086ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b088      	sub	sp, #32
 8008100:	af04      	add	r7, sp, #16
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	4611      	mov	r1, r2
 8008108:	461a      	mov	r2, r3
 800810a:	460b      	mov	r3, r1
 800810c:	80fb      	strh	r3, [r7, #6]
 800810e:	4613      	mov	r3, r2
 8008110:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008112:	7979      	ldrb	r1, [r7, #5]
 8008114:	2300      	movs	r3, #0
 8008116:	9303      	str	r3, [sp, #12]
 8008118:	88fb      	ldrh	r3, [r7, #6]
 800811a:	9302      	str	r3, [sp, #8]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	2301      	movs	r3, #1
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	2302      	movs	r3, #2
 8008126:	2201      	movs	r2, #1
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 fac0 	bl	80086ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af04      	add	r7, sp, #16
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	4608      	mov	r0, r1
 8008142:	4611      	mov	r1, r2
 8008144:	461a      	mov	r2, r3
 8008146:	4603      	mov	r3, r0
 8008148:	70fb      	strb	r3, [r7, #3]
 800814a:	460b      	mov	r3, r1
 800814c:	70bb      	strb	r3, [r7, #2]
 800814e:	4613      	mov	r3, r2
 8008150:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008152:	7878      	ldrb	r0, [r7, #1]
 8008154:	78ba      	ldrb	r2, [r7, #2]
 8008156:	78f9      	ldrb	r1, [r7, #3]
 8008158:	8b3b      	ldrh	r3, [r7, #24]
 800815a:	9302      	str	r3, [sp, #8]
 800815c:	7d3b      	ldrb	r3, [r7, #20]
 800815e:	9301      	str	r3, [sp, #4]
 8008160:	7c3b      	ldrb	r3, [r7, #16]
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	4603      	mov	r3, r0
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fa53 	bl	8008612 <USBH_LL_OpenPipe>

  return USBH_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	460b      	mov	r3, r1
 8008180:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008182:	78fb      	ldrb	r3, [r7, #3]
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fa72 	bl	8008670 <USBH_LL_ClosePipe>

  return USBH_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b084      	sub	sp, #16
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	460b      	mov	r3, r1
 80081a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f836 	bl	8008214 <USBH_GetFreePipe>
 80081a8:	4603      	mov	r3, r0
 80081aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80081ac:	89fb      	ldrh	r3, [r7, #14]
 80081ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d00a      	beq.n	80081cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80081b6:	78fa      	ldrb	r2, [r7, #3]
 80081b8:	89fb      	ldrh	r3, [r7, #14]
 80081ba:	f003 030f 	and.w	r3, r3, #15
 80081be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081c2:	6879      	ldr	r1, [r7, #4]
 80081c4:	33e0      	adds	r3, #224	@ 0xe0
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	440b      	add	r3, r1
 80081ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80081cc:	89fb      	ldrh	r3, [r7, #14]
 80081ce:	b2db      	uxtb	r3, r3
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80081e4:	78fb      	ldrb	r3, [r7, #3]
 80081e6:	2b0f      	cmp	r3, #15
 80081e8:	d80d      	bhi.n	8008206 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80081ea:	78fb      	ldrb	r3, [r7, #3]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	33e0      	adds	r3, #224	@ 0xe0
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80081fc:	6879      	ldr	r1, [r7, #4]
 80081fe:	33e0      	adds	r3, #224	@ 0xe0
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	440b      	add	r3, r1
 8008204:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008220:	2300      	movs	r3, #0
 8008222:	73fb      	strb	r3, [r7, #15]
 8008224:	e00f      	b.n	8008246 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008226:	7bfb      	ldrb	r3, [r7, #15]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	33e0      	adds	r3, #224	@ 0xe0
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d102      	bne.n	8008240 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	b29b      	uxth	r3, r3
 800823e:	e007      	b.n	8008250 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008240:	7bfb      	ldrb	r3, [r7, #15]
 8008242:	3301      	adds	r3, #1
 8008244:	73fb      	strb	r3, [r7, #15]
 8008246:	7bfb      	ldrb	r3, [r7, #15]
 8008248:	2b0f      	cmp	r3, #15
 800824a:	d9ec      	bls.n	8008226 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800824c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008250:	4618      	mov	r0, r3
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008260:	2201      	movs	r2, #1
 8008262:	490e      	ldr	r1, [pc, #56]	@ (800829c <MX_USB_HOST_Init+0x40>)
 8008264:	480e      	ldr	r0, [pc, #56]	@ (80082a0 <MX_USB_HOST_Init+0x44>)
 8008266:	f7fe fb15 	bl	8006894 <USBH_Init>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008270:	f7f8 fb3e 	bl	80008f0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008274:	490b      	ldr	r1, [pc, #44]	@ (80082a4 <MX_USB_HOST_Init+0x48>)
 8008276:	480a      	ldr	r0, [pc, #40]	@ (80082a0 <MX_USB_HOST_Init+0x44>)
 8008278:	f7fe fbb9 	bl	80069ee <USBH_RegisterClass>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008282:	f7f8 fb35 	bl	80008f0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008286:	4806      	ldr	r0, [pc, #24]	@ (80082a0 <MX_USB_HOST_Init+0x44>)
 8008288:	f7fe fc3d 	bl	8006b06 <USBH_Start>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008292:	f7f8 fb2d 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008296:	bf00      	nop
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	080082bd 	.word	0x080082bd
 80082a0:	20000194 	.word	0x20000194
 80082a4:	2000000c 	.word	0x2000000c

080082a8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80082ac:	4802      	ldr	r0, [pc, #8]	@ (80082b8 <MX_USB_HOST_Process+0x10>)
 80082ae:	f7fe fc3b 	bl	8006b28 <USBH_Process>
}
 80082b2:	bf00      	nop
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20000194 	.word	0x20000194

080082bc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	460b      	mov	r3, r1
 80082c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80082c8:	78fb      	ldrb	r3, [r7, #3]
 80082ca:	3b01      	subs	r3, #1
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	d819      	bhi.n	8008304 <USBH_UserProcess+0x48>
 80082d0:	a201      	add	r2, pc, #4	@ (adr r2, 80082d8 <USBH_UserProcess+0x1c>)
 80082d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d6:	bf00      	nop
 80082d8:	08008305 	.word	0x08008305
 80082dc:	080082f5 	.word	0x080082f5
 80082e0:	08008305 	.word	0x08008305
 80082e4:	080082fd 	.word	0x080082fd
 80082e8:	080082ed 	.word	0x080082ed
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80082ec:	4b09      	ldr	r3, [pc, #36]	@ (8008314 <USBH_UserProcess+0x58>)
 80082ee:	2203      	movs	r2, #3
 80082f0:	701a      	strb	r2, [r3, #0]
  break;
 80082f2:	e008      	b.n	8008306 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80082f4:	4b07      	ldr	r3, [pc, #28]	@ (8008314 <USBH_UserProcess+0x58>)
 80082f6:	2202      	movs	r2, #2
 80082f8:	701a      	strb	r2, [r3, #0]
  break;
 80082fa:	e004      	b.n	8008306 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80082fc:	4b05      	ldr	r3, [pc, #20]	@ (8008314 <USBH_UserProcess+0x58>)
 80082fe:	2201      	movs	r2, #1
 8008300:	701a      	strb	r2, [r3, #0]
  break;
 8008302:	e000      	b.n	8008306 <USBH_UserProcess+0x4a>

  default:
  break;
 8008304:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	2000056c 	.word	0x2000056c

08008318 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	@ 0x28
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008320:	f107 0314 	add.w	r3, r7, #20
 8008324:	2200      	movs	r2, #0
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	605a      	str	r2, [r3, #4]
 800832a:	609a      	str	r2, [r3, #8]
 800832c:	60da      	str	r2, [r3, #12]
 800832e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008338:	d147      	bne.n	80083ca <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800833a:	2300      	movs	r3, #0
 800833c:	613b      	str	r3, [r7, #16]
 800833e:	4b25      	ldr	r3, [pc, #148]	@ (80083d4 <HAL_HCD_MspInit+0xbc>)
 8008340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008342:	4a24      	ldr	r2, [pc, #144]	@ (80083d4 <HAL_HCD_MspInit+0xbc>)
 8008344:	f043 0301 	orr.w	r3, r3, #1
 8008348:	6313      	str	r3, [r2, #48]	@ 0x30
 800834a:	4b22      	ldr	r3, [pc, #136]	@ (80083d4 <HAL_HCD_MspInit+0xbc>)
 800834c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	613b      	str	r3, [r7, #16]
 8008354:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008356:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800835a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800835c:	2300      	movs	r3, #0
 800835e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008360:	2300      	movs	r3, #0
 8008362:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008364:	f107 0314 	add.w	r3, r7, #20
 8008368:	4619      	mov	r1, r3
 800836a:	481b      	ldr	r0, [pc, #108]	@ (80083d8 <HAL_HCD_MspInit+0xc0>)
 800836c:	f7f8 fe52 	bl	8001014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008370:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008376:	2302      	movs	r3, #2
 8008378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800837a:	2300      	movs	r3, #0
 800837c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800837e:	2300      	movs	r3, #0
 8008380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008382:	230a      	movs	r3, #10
 8008384:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008386:	f107 0314 	add.w	r3, r7, #20
 800838a:	4619      	mov	r1, r3
 800838c:	4812      	ldr	r0, [pc, #72]	@ (80083d8 <HAL_HCD_MspInit+0xc0>)
 800838e:	f7f8 fe41 	bl	8001014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008392:	4b10      	ldr	r3, [pc, #64]	@ (80083d4 <HAL_HCD_MspInit+0xbc>)
 8008394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008396:	4a0f      	ldr	r2, [pc, #60]	@ (80083d4 <HAL_HCD_MspInit+0xbc>)
 8008398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800839c:	6353      	str	r3, [r2, #52]	@ 0x34
 800839e:	2300      	movs	r3, #0
 80083a0:	60fb      	str	r3, [r7, #12]
 80083a2:	4b0c      	ldr	r3, [pc, #48]	@ (80083d4 <HAL_HCD_MspInit+0xbc>)
 80083a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083a6:	4a0b      	ldr	r2, [pc, #44]	@ (80083d4 <HAL_HCD_MspInit+0xbc>)
 80083a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80083ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80083ae:	4b09      	ldr	r3, [pc, #36]	@ (80083d4 <HAL_HCD_MspInit+0xbc>)
 80083b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083ba:	2200      	movs	r2, #0
 80083bc:	2100      	movs	r1, #0
 80083be:	2043      	movs	r0, #67	@ 0x43
 80083c0:	f7f8 fdf1 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083c4:	2043      	movs	r0, #67	@ 0x43
 80083c6:	f7f8 fe0a 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083ca:	bf00      	nop
 80083cc:	3728      	adds	r7, #40	@ 0x28
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	40023800 	.word	0x40023800
 80083d8:	40020000 	.word	0x40020000

080083dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe ff73 	bl	80072d6 <USBH_LL_IncTimer>
}
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe ffab 	bl	8007362 <USBH_LL_Connect>
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe ffb4 	bl	8007390 <USBH_LL_Disconnect>
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	70fb      	strb	r3, [r7, #3]
 800843c:	4613      	mov	r3, r2
 800843e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe ff65 	bl	800732a <USBH_LL_PortEnabled>
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008476:	4618      	mov	r0, r3
 8008478:	f7fe ff65 	bl	8007346 <USBH_LL_PortDisabled>
}
 800847c:	bf00      	nop
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008492:	2b01      	cmp	r3, #1
 8008494:	d12a      	bne.n	80084ec <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008496:	4a18      	ldr	r2, [pc, #96]	@ (80084f8 <USBH_LL_Init+0x74>)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a15      	ldr	r2, [pc, #84]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084a2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084a6:	4b14      	ldr	r3, [pc, #80]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80084ac:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80084ae:	4b12      	ldr	r3, [pc, #72]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084b0:	2208      	movs	r2, #8
 80084b2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80084b4:	4b10      	ldr	r3, [pc, #64]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084b6:	2201      	movs	r2, #1
 80084b8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084ba:	4b0f      	ldr	r3, [pc, #60]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084bc:	2200      	movs	r2, #0
 80084be:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80084c0:	4b0d      	ldr	r3, [pc, #52]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084c2:	2202      	movs	r2, #2
 80084c4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084c6:	4b0c      	ldr	r3, [pc, #48]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80084cc:	480a      	ldr	r0, [pc, #40]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084ce:	f7f8 ff70 	bl	80013b2 <HAL_HCD_Init>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80084d8:	f7f8 fa0a 	bl	80008f0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80084dc:	4806      	ldr	r0, [pc, #24]	@ (80084f8 <USBH_LL_Init+0x74>)
 80084de:	f7f9 fbd1 	bl	8001c84 <HAL_HCD_GetCurrentFrame>
 80084e2:	4603      	mov	r3, r0
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7fe fee6 	bl	80072b8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20000570 	.word	0x20000570

080084fc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008512:	4618      	mov	r0, r3
 8008514:	f7f9 fb3e 	bl	8001b94 <HAL_HCD_Start>
 8008518:	4603      	mov	r3, r0
 800851a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	4618      	mov	r0, r3
 8008520:	f000 f95e 	bl	80087e0 <USBH_Get_USB_Status>
 8008524:	4603      	mov	r3, r0
 8008526:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008528:	7bbb      	ldrb	r3, [r7, #14]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b084      	sub	sp, #16
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008548:	4618      	mov	r0, r3
 800854a:	f7f9 fb46 	bl	8001bda <HAL_HCD_Stop>
 800854e:	4603      	mov	r3, r0
 8008550:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008552:	7bfb      	ldrb	r3, [r7, #15]
 8008554:	4618      	mov	r0, r3
 8008556:	f000 f943 	bl	80087e0 <USBH_Get_USB_Status>
 800855a:	4603      	mov	r3, r0
 800855c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800855e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008570:	2301      	movs	r3, #1
 8008572:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800857a:	4618      	mov	r0, r3
 800857c:	f7f9 fb90 	bl	8001ca0 <HAL_HCD_GetCurrentSpeed>
 8008580:	4603      	mov	r3, r0
 8008582:	2b02      	cmp	r3, #2
 8008584:	d00c      	beq.n	80085a0 <USBH_LL_GetSpeed+0x38>
 8008586:	2b02      	cmp	r3, #2
 8008588:	d80d      	bhi.n	80085a6 <USBH_LL_GetSpeed+0x3e>
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <USBH_LL_GetSpeed+0x2c>
 800858e:	2b01      	cmp	r3, #1
 8008590:	d003      	beq.n	800859a <USBH_LL_GetSpeed+0x32>
 8008592:	e008      	b.n	80085a6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008594:	2300      	movs	r3, #0
 8008596:	73fb      	strb	r3, [r7, #15]
    break;
 8008598:	e008      	b.n	80085ac <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800859a:	2301      	movs	r3, #1
 800859c:	73fb      	strb	r3, [r7, #15]
    break;
 800859e:	e005      	b.n	80085ac <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80085a0:	2302      	movs	r3, #2
 80085a2:	73fb      	strb	r3, [r7, #15]
    break;
 80085a4:	e002      	b.n	80085ac <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80085a6:	2301      	movs	r3, #1
 80085a8:	73fb      	strb	r3, [r7, #15]
    break;
 80085aa:	bf00      	nop
  }
  return  speed;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7f9 fb21 	bl	8001c14 <HAL_HCD_ResetPort>
 80085d2:	4603      	mov	r3, r0
 80085d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 f901 	bl	80087e0 <USBH_Get_USB_Status>
 80085de:	4603      	mov	r3, r0
 80085e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	460b      	mov	r3, r1
 80085f6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085fe:	78fa      	ldrb	r2, [r7, #3]
 8008600:	4611      	mov	r1, r2
 8008602:	4618      	mov	r0, r3
 8008604:	f7f9 fb29 	bl	8001c5a <HAL_HCD_HC_GetXferCount>
 8008608:	4603      	mov	r3, r0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008612:	b590      	push	{r4, r7, lr}
 8008614:	b089      	sub	sp, #36	@ 0x24
 8008616:	af04      	add	r7, sp, #16
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	4608      	mov	r0, r1
 800861c:	4611      	mov	r1, r2
 800861e:	461a      	mov	r2, r3
 8008620:	4603      	mov	r3, r0
 8008622:	70fb      	strb	r3, [r7, #3]
 8008624:	460b      	mov	r3, r1
 8008626:	70bb      	strb	r3, [r7, #2]
 8008628:	4613      	mov	r3, r2
 800862a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800863a:	787c      	ldrb	r4, [r7, #1]
 800863c:	78ba      	ldrb	r2, [r7, #2]
 800863e:	78f9      	ldrb	r1, [r7, #3]
 8008640:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008642:	9302      	str	r3, [sp, #8]
 8008644:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	4623      	mov	r3, r4
 8008652:	f7f8 ff15 	bl	8001480 <HAL_HCD_HC_Init>
 8008656:	4603      	mov	r3, r0
 8008658:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800865a:	7bfb      	ldrb	r3, [r7, #15]
 800865c:	4618      	mov	r0, r3
 800865e:	f000 f8bf 	bl	80087e0 <USBH_Get_USB_Status>
 8008662:	4603      	mov	r3, r0
 8008664:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008666:	7bbb      	ldrb	r3, [r7, #14]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	bd90      	pop	{r4, r7, pc}

08008670 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800868a:	78fa      	ldrb	r2, [r7, #3]
 800868c:	4611      	mov	r1, r2
 800868e:	4618      	mov	r0, r3
 8008690:	f7f8 ffae 	bl	80015f0 <HAL_HCD_HC_Halt>
 8008694:	4603      	mov	r3, r0
 8008696:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008698:	7bfb      	ldrb	r3, [r7, #15]
 800869a:	4618      	mov	r0, r3
 800869c:	f000 f8a0 	bl	80087e0 <USBH_Get_USB_Status>
 80086a0:	4603      	mov	r3, r0
 80086a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80086ae:	b590      	push	{r4, r7, lr}
 80086b0:	b089      	sub	sp, #36	@ 0x24
 80086b2:	af04      	add	r7, sp, #16
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	4608      	mov	r0, r1
 80086b8:	4611      	mov	r1, r2
 80086ba:	461a      	mov	r2, r3
 80086bc:	4603      	mov	r3, r0
 80086be:	70fb      	strb	r3, [r7, #3]
 80086c0:	460b      	mov	r3, r1
 80086c2:	70bb      	strb	r3, [r7, #2]
 80086c4:	4613      	mov	r3, r2
 80086c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80086d6:	787c      	ldrb	r4, [r7, #1]
 80086d8:	78ba      	ldrb	r2, [r7, #2]
 80086da:	78f9      	ldrb	r1, [r7, #3]
 80086dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80086e0:	9303      	str	r3, [sp, #12]
 80086e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80086e4:	9302      	str	r3, [sp, #8]
 80086e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e8:	9301      	str	r3, [sp, #4]
 80086ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	4623      	mov	r3, r4
 80086f2:	f7f8 ffa1 	bl	8001638 <HAL_HCD_HC_SubmitRequest>
 80086f6:	4603      	mov	r3, r0
 80086f8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 f86f 	bl	80087e0 <USBH_Get_USB_Status>
 8008702:	4603      	mov	r3, r0
 8008704:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008706:	7bbb      	ldrb	r3, [r7, #14]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	bd90      	pop	{r4, r7, pc}

08008710 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008722:	78fa      	ldrb	r2, [r7, #3]
 8008724:	4611      	mov	r1, r2
 8008726:	4618      	mov	r0, r3
 8008728:	f7f9 fa82 	bl	8001c30 <HAL_HCD_HC_GetURBState>
 800872c:	4603      	mov	r3, r0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b082      	sub	sp, #8
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	460b      	mov	r3, r1
 8008740:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008748:	2b01      	cmp	r3, #1
 800874a:	d103      	bne.n	8008754 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800874c:	78fb      	ldrb	r3, [r7, #3]
 800874e:	4618      	mov	r0, r3
 8008750:	f000 f872 	bl	8008838 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008754:	20c8      	movs	r0, #200	@ 0xc8
 8008756:	f7f8 fb27 	bl	8000da8 <HAL_Delay>
  return USBH_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
 8008770:	4613      	mov	r3, r2
 8008772:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800877a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800877c:	78fa      	ldrb	r2, [r7, #3]
 800877e:	68f9      	ldr	r1, [r7, #12]
 8008780:	4613      	mov	r3, r2
 8008782:	011b      	lsls	r3, r3, #4
 8008784:	1a9b      	subs	r3, r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	440b      	add	r3, r1
 800878a:	3317      	adds	r3, #23
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008792:	78fa      	ldrb	r2, [r7, #3]
 8008794:	68f9      	ldr	r1, [r7, #12]
 8008796:	4613      	mov	r3, r2
 8008798:	011b      	lsls	r3, r3, #4
 800879a:	1a9b      	subs	r3, r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	440b      	add	r3, r1
 80087a0:	333c      	adds	r3, #60	@ 0x3c
 80087a2:	78ba      	ldrb	r2, [r7, #2]
 80087a4:	701a      	strb	r2, [r3, #0]
 80087a6:	e009      	b.n	80087bc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80087a8:	78fa      	ldrb	r2, [r7, #3]
 80087aa:	68f9      	ldr	r1, [r7, #12]
 80087ac:	4613      	mov	r3, r2
 80087ae:	011b      	lsls	r3, r3, #4
 80087b0:	1a9b      	subs	r3, r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	440b      	add	r3, r1
 80087b6:	333d      	adds	r3, #61	@ 0x3d
 80087b8:	78ba      	ldrb	r2, [r7, #2]
 80087ba:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b082      	sub	sp, #8
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7f8 fae8 	bl	8000da8 <HAL_Delay>
}
 80087d8:	bf00      	nop
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	4603      	mov	r3, r0
 80087e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087ee:	79fb      	ldrb	r3, [r7, #7]
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d817      	bhi.n	8008824 <USBH_Get_USB_Status+0x44>
 80087f4:	a201      	add	r2, pc, #4	@ (adr r2, 80087fc <USBH_Get_USB_Status+0x1c>)
 80087f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fa:	bf00      	nop
 80087fc:	0800880d 	.word	0x0800880d
 8008800:	08008813 	.word	0x08008813
 8008804:	08008819 	.word	0x08008819
 8008808:	0800881f 	.word	0x0800881f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	73fb      	strb	r3, [r7, #15]
    break;
 8008810:	e00b      	b.n	800882a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008812:	2302      	movs	r3, #2
 8008814:	73fb      	strb	r3, [r7, #15]
    break;
 8008816:	e008      	b.n	800882a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008818:	2301      	movs	r3, #1
 800881a:	73fb      	strb	r3, [r7, #15]
    break;
 800881c:	e005      	b.n	800882a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800881e:	2302      	movs	r3, #2
 8008820:	73fb      	strb	r3, [r7, #15]
    break;
 8008822:	e002      	b.n	800882a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008824:	2302      	movs	r3, #2
 8008826:	73fb      	strb	r3, [r7, #15]
    break;
 8008828:	bf00      	nop
  }
  return usb_status;
 800882a:	7bfb      	ldrb	r3, [r7, #15]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	4603      	mov	r3, r0
 8008840:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008842:	79fb      	ldrb	r3, [r7, #7]
 8008844:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008846:	79fb      	ldrb	r3, [r7, #7]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d102      	bne.n	8008852 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800884c:	2300      	movs	r3, #0
 800884e:	73fb      	strb	r3, [r7, #15]
 8008850:	e001      	b.n	8008856 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008852:	2301      	movs	r3, #1
 8008854:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008856:	7bfb      	ldrb	r3, [r7, #15]
 8008858:	461a      	mov	r2, r3
 800885a:	2101      	movs	r1, #1
 800885c:	4803      	ldr	r0, [pc, #12]	@ (800886c <MX_DriverVbusFS+0x34>)
 800885e:	f7f8 fd75 	bl	800134c <HAL_GPIO_WritePin>
}
 8008862:	bf00      	nop
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	40020800 	.word	0x40020800

08008870 <malloc>:
 8008870:	4b02      	ldr	r3, [pc, #8]	@ (800887c <malloc+0xc>)
 8008872:	4601      	mov	r1, r0
 8008874:	6818      	ldr	r0, [r3, #0]
 8008876:	f000 b82d 	b.w	80088d4 <_malloc_r>
 800887a:	bf00      	nop
 800887c:	2000002c 	.word	0x2000002c

08008880 <free>:
 8008880:	4b02      	ldr	r3, [pc, #8]	@ (800888c <free+0xc>)
 8008882:	4601      	mov	r1, r0
 8008884:	6818      	ldr	r0, [r3, #0]
 8008886:	f000 b8f5 	b.w	8008a74 <_free_r>
 800888a:	bf00      	nop
 800888c:	2000002c 	.word	0x2000002c

08008890 <sbrk_aligned>:
 8008890:	b570      	push	{r4, r5, r6, lr}
 8008892:	4e0f      	ldr	r6, [pc, #60]	@ (80088d0 <sbrk_aligned+0x40>)
 8008894:	460c      	mov	r4, r1
 8008896:	6831      	ldr	r1, [r6, #0]
 8008898:	4605      	mov	r5, r0
 800889a:	b911      	cbnz	r1, 80088a2 <sbrk_aligned+0x12>
 800889c:	f000 f8ae 	bl	80089fc <_sbrk_r>
 80088a0:	6030      	str	r0, [r6, #0]
 80088a2:	4621      	mov	r1, r4
 80088a4:	4628      	mov	r0, r5
 80088a6:	f000 f8a9 	bl	80089fc <_sbrk_r>
 80088aa:	1c43      	adds	r3, r0, #1
 80088ac:	d103      	bne.n	80088b6 <sbrk_aligned+0x26>
 80088ae:	f04f 34ff 	mov.w	r4, #4294967295
 80088b2:	4620      	mov	r0, r4
 80088b4:	bd70      	pop	{r4, r5, r6, pc}
 80088b6:	1cc4      	adds	r4, r0, #3
 80088b8:	f024 0403 	bic.w	r4, r4, #3
 80088bc:	42a0      	cmp	r0, r4
 80088be:	d0f8      	beq.n	80088b2 <sbrk_aligned+0x22>
 80088c0:	1a21      	subs	r1, r4, r0
 80088c2:	4628      	mov	r0, r5
 80088c4:	f000 f89a 	bl	80089fc <_sbrk_r>
 80088c8:	3001      	adds	r0, #1
 80088ca:	d1f2      	bne.n	80088b2 <sbrk_aligned+0x22>
 80088cc:	e7ef      	b.n	80088ae <sbrk_aligned+0x1e>
 80088ce:	bf00      	nop
 80088d0:	20000950 	.word	0x20000950

080088d4 <_malloc_r>:
 80088d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d8:	1ccd      	adds	r5, r1, #3
 80088da:	f025 0503 	bic.w	r5, r5, #3
 80088de:	3508      	adds	r5, #8
 80088e0:	2d0c      	cmp	r5, #12
 80088e2:	bf38      	it	cc
 80088e4:	250c      	movcc	r5, #12
 80088e6:	2d00      	cmp	r5, #0
 80088e8:	4606      	mov	r6, r0
 80088ea:	db01      	blt.n	80088f0 <_malloc_r+0x1c>
 80088ec:	42a9      	cmp	r1, r5
 80088ee:	d904      	bls.n	80088fa <_malloc_r+0x26>
 80088f0:	230c      	movs	r3, #12
 80088f2:	6033      	str	r3, [r6, #0]
 80088f4:	2000      	movs	r0, #0
 80088f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089d0 <_malloc_r+0xfc>
 80088fe:	f000 f869 	bl	80089d4 <__malloc_lock>
 8008902:	f8d8 3000 	ldr.w	r3, [r8]
 8008906:	461c      	mov	r4, r3
 8008908:	bb44      	cbnz	r4, 800895c <_malloc_r+0x88>
 800890a:	4629      	mov	r1, r5
 800890c:	4630      	mov	r0, r6
 800890e:	f7ff ffbf 	bl	8008890 <sbrk_aligned>
 8008912:	1c43      	adds	r3, r0, #1
 8008914:	4604      	mov	r4, r0
 8008916:	d158      	bne.n	80089ca <_malloc_r+0xf6>
 8008918:	f8d8 4000 	ldr.w	r4, [r8]
 800891c:	4627      	mov	r7, r4
 800891e:	2f00      	cmp	r7, #0
 8008920:	d143      	bne.n	80089aa <_malloc_r+0xd6>
 8008922:	2c00      	cmp	r4, #0
 8008924:	d04b      	beq.n	80089be <_malloc_r+0xea>
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	4639      	mov	r1, r7
 800892a:	4630      	mov	r0, r6
 800892c:	eb04 0903 	add.w	r9, r4, r3
 8008930:	f000 f864 	bl	80089fc <_sbrk_r>
 8008934:	4581      	cmp	r9, r0
 8008936:	d142      	bne.n	80089be <_malloc_r+0xea>
 8008938:	6821      	ldr	r1, [r4, #0]
 800893a:	1a6d      	subs	r5, r5, r1
 800893c:	4629      	mov	r1, r5
 800893e:	4630      	mov	r0, r6
 8008940:	f7ff ffa6 	bl	8008890 <sbrk_aligned>
 8008944:	3001      	adds	r0, #1
 8008946:	d03a      	beq.n	80089be <_malloc_r+0xea>
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	442b      	add	r3, r5
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	f8d8 3000 	ldr.w	r3, [r8]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	bb62      	cbnz	r2, 80089b0 <_malloc_r+0xdc>
 8008956:	f8c8 7000 	str.w	r7, [r8]
 800895a:	e00f      	b.n	800897c <_malloc_r+0xa8>
 800895c:	6822      	ldr	r2, [r4, #0]
 800895e:	1b52      	subs	r2, r2, r5
 8008960:	d420      	bmi.n	80089a4 <_malloc_r+0xd0>
 8008962:	2a0b      	cmp	r2, #11
 8008964:	d917      	bls.n	8008996 <_malloc_r+0xc2>
 8008966:	1961      	adds	r1, r4, r5
 8008968:	42a3      	cmp	r3, r4
 800896a:	6025      	str	r5, [r4, #0]
 800896c:	bf18      	it	ne
 800896e:	6059      	strne	r1, [r3, #4]
 8008970:	6863      	ldr	r3, [r4, #4]
 8008972:	bf08      	it	eq
 8008974:	f8c8 1000 	streq.w	r1, [r8]
 8008978:	5162      	str	r2, [r4, r5]
 800897a:	604b      	str	r3, [r1, #4]
 800897c:	4630      	mov	r0, r6
 800897e:	f000 f82f 	bl	80089e0 <__malloc_unlock>
 8008982:	f104 000b 	add.w	r0, r4, #11
 8008986:	1d23      	adds	r3, r4, #4
 8008988:	f020 0007 	bic.w	r0, r0, #7
 800898c:	1ac2      	subs	r2, r0, r3
 800898e:	bf1c      	itt	ne
 8008990:	1a1b      	subne	r3, r3, r0
 8008992:	50a3      	strne	r3, [r4, r2]
 8008994:	e7af      	b.n	80088f6 <_malloc_r+0x22>
 8008996:	6862      	ldr	r2, [r4, #4]
 8008998:	42a3      	cmp	r3, r4
 800899a:	bf0c      	ite	eq
 800899c:	f8c8 2000 	streq.w	r2, [r8]
 80089a0:	605a      	strne	r2, [r3, #4]
 80089a2:	e7eb      	b.n	800897c <_malloc_r+0xa8>
 80089a4:	4623      	mov	r3, r4
 80089a6:	6864      	ldr	r4, [r4, #4]
 80089a8:	e7ae      	b.n	8008908 <_malloc_r+0x34>
 80089aa:	463c      	mov	r4, r7
 80089ac:	687f      	ldr	r7, [r7, #4]
 80089ae:	e7b6      	b.n	800891e <_malloc_r+0x4a>
 80089b0:	461a      	mov	r2, r3
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	42a3      	cmp	r3, r4
 80089b6:	d1fb      	bne.n	80089b0 <_malloc_r+0xdc>
 80089b8:	2300      	movs	r3, #0
 80089ba:	6053      	str	r3, [r2, #4]
 80089bc:	e7de      	b.n	800897c <_malloc_r+0xa8>
 80089be:	230c      	movs	r3, #12
 80089c0:	6033      	str	r3, [r6, #0]
 80089c2:	4630      	mov	r0, r6
 80089c4:	f000 f80c 	bl	80089e0 <__malloc_unlock>
 80089c8:	e794      	b.n	80088f4 <_malloc_r+0x20>
 80089ca:	6005      	str	r5, [r0, #0]
 80089cc:	e7d6      	b.n	800897c <_malloc_r+0xa8>
 80089ce:	bf00      	nop
 80089d0:	20000954 	.word	0x20000954

080089d4 <__malloc_lock>:
 80089d4:	4801      	ldr	r0, [pc, #4]	@ (80089dc <__malloc_lock+0x8>)
 80089d6:	f000 b84b 	b.w	8008a70 <__retarget_lock_acquire_recursive>
 80089da:	bf00      	nop
 80089dc:	20000a94 	.word	0x20000a94

080089e0 <__malloc_unlock>:
 80089e0:	4801      	ldr	r0, [pc, #4]	@ (80089e8 <__malloc_unlock+0x8>)
 80089e2:	f000 b846 	b.w	8008a72 <__retarget_lock_release_recursive>
 80089e6:	bf00      	nop
 80089e8:	20000a94 	.word	0x20000a94

080089ec <memset>:
 80089ec:	4402      	add	r2, r0
 80089ee:	4603      	mov	r3, r0
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d100      	bne.n	80089f6 <memset+0xa>
 80089f4:	4770      	bx	lr
 80089f6:	f803 1b01 	strb.w	r1, [r3], #1
 80089fa:	e7f9      	b.n	80089f0 <memset+0x4>

080089fc <_sbrk_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4d06      	ldr	r5, [pc, #24]	@ (8008a18 <_sbrk_r+0x1c>)
 8008a00:	2300      	movs	r3, #0
 8008a02:	4604      	mov	r4, r0
 8008a04:	4608      	mov	r0, r1
 8008a06:	602b      	str	r3, [r5, #0]
 8008a08:	f7f8 f8ea 	bl	8000be0 <_sbrk>
 8008a0c:	1c43      	adds	r3, r0, #1
 8008a0e:	d102      	bne.n	8008a16 <_sbrk_r+0x1a>
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	b103      	cbz	r3, 8008a16 <_sbrk_r+0x1a>
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	bd38      	pop	{r3, r4, r5, pc}
 8008a18:	20000a90 	.word	0x20000a90

08008a1c <__errno>:
 8008a1c:	4b01      	ldr	r3, [pc, #4]	@ (8008a24 <__errno+0x8>)
 8008a1e:	6818      	ldr	r0, [r3, #0]
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	2000002c 	.word	0x2000002c

08008a28 <__libc_init_array>:
 8008a28:	b570      	push	{r4, r5, r6, lr}
 8008a2a:	4d0d      	ldr	r5, [pc, #52]	@ (8008a60 <__libc_init_array+0x38>)
 8008a2c:	4c0d      	ldr	r4, [pc, #52]	@ (8008a64 <__libc_init_array+0x3c>)
 8008a2e:	1b64      	subs	r4, r4, r5
 8008a30:	10a4      	asrs	r4, r4, #2
 8008a32:	2600      	movs	r6, #0
 8008a34:	42a6      	cmp	r6, r4
 8008a36:	d109      	bne.n	8008a4c <__libc_init_array+0x24>
 8008a38:	4d0b      	ldr	r5, [pc, #44]	@ (8008a68 <__libc_init_array+0x40>)
 8008a3a:	4c0c      	ldr	r4, [pc, #48]	@ (8008a6c <__libc_init_array+0x44>)
 8008a3c:	f000 f864 	bl	8008b08 <_init>
 8008a40:	1b64      	subs	r4, r4, r5
 8008a42:	10a4      	asrs	r4, r4, #2
 8008a44:	2600      	movs	r6, #0
 8008a46:	42a6      	cmp	r6, r4
 8008a48:	d105      	bne.n	8008a56 <__libc_init_array+0x2e>
 8008a4a:	bd70      	pop	{r4, r5, r6, pc}
 8008a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a50:	4798      	blx	r3
 8008a52:	3601      	adds	r6, #1
 8008a54:	e7ee      	b.n	8008a34 <__libc_init_array+0xc>
 8008a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a5a:	4798      	blx	r3
 8008a5c:	3601      	adds	r6, #1
 8008a5e:	e7f2      	b.n	8008a46 <__libc_init_array+0x1e>
 8008a60:	08008b44 	.word	0x08008b44
 8008a64:	08008b44 	.word	0x08008b44
 8008a68:	08008b44 	.word	0x08008b44
 8008a6c:	08008b48 	.word	0x08008b48

08008a70 <__retarget_lock_acquire_recursive>:
 8008a70:	4770      	bx	lr

08008a72 <__retarget_lock_release_recursive>:
 8008a72:	4770      	bx	lr

08008a74 <_free_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4605      	mov	r5, r0
 8008a78:	2900      	cmp	r1, #0
 8008a7a:	d041      	beq.n	8008b00 <_free_r+0x8c>
 8008a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a80:	1f0c      	subs	r4, r1, #4
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	bfb8      	it	lt
 8008a86:	18e4      	addlt	r4, r4, r3
 8008a88:	f7ff ffa4 	bl	80089d4 <__malloc_lock>
 8008a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8008b04 <_free_r+0x90>)
 8008a8e:	6813      	ldr	r3, [r2, #0]
 8008a90:	b933      	cbnz	r3, 8008aa0 <_free_r+0x2c>
 8008a92:	6063      	str	r3, [r4, #4]
 8008a94:	6014      	str	r4, [r2, #0]
 8008a96:	4628      	mov	r0, r5
 8008a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a9c:	f7ff bfa0 	b.w	80089e0 <__malloc_unlock>
 8008aa0:	42a3      	cmp	r3, r4
 8008aa2:	d908      	bls.n	8008ab6 <_free_r+0x42>
 8008aa4:	6820      	ldr	r0, [r4, #0]
 8008aa6:	1821      	adds	r1, r4, r0
 8008aa8:	428b      	cmp	r3, r1
 8008aaa:	bf01      	itttt	eq
 8008aac:	6819      	ldreq	r1, [r3, #0]
 8008aae:	685b      	ldreq	r3, [r3, #4]
 8008ab0:	1809      	addeq	r1, r1, r0
 8008ab2:	6021      	streq	r1, [r4, #0]
 8008ab4:	e7ed      	b.n	8008a92 <_free_r+0x1e>
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	b10b      	cbz	r3, 8008ac0 <_free_r+0x4c>
 8008abc:	42a3      	cmp	r3, r4
 8008abe:	d9fa      	bls.n	8008ab6 <_free_r+0x42>
 8008ac0:	6811      	ldr	r1, [r2, #0]
 8008ac2:	1850      	adds	r0, r2, r1
 8008ac4:	42a0      	cmp	r0, r4
 8008ac6:	d10b      	bne.n	8008ae0 <_free_r+0x6c>
 8008ac8:	6820      	ldr	r0, [r4, #0]
 8008aca:	4401      	add	r1, r0
 8008acc:	1850      	adds	r0, r2, r1
 8008ace:	4283      	cmp	r3, r0
 8008ad0:	6011      	str	r1, [r2, #0]
 8008ad2:	d1e0      	bne.n	8008a96 <_free_r+0x22>
 8008ad4:	6818      	ldr	r0, [r3, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	6053      	str	r3, [r2, #4]
 8008ada:	4408      	add	r0, r1
 8008adc:	6010      	str	r0, [r2, #0]
 8008ade:	e7da      	b.n	8008a96 <_free_r+0x22>
 8008ae0:	d902      	bls.n	8008ae8 <_free_r+0x74>
 8008ae2:	230c      	movs	r3, #12
 8008ae4:	602b      	str	r3, [r5, #0]
 8008ae6:	e7d6      	b.n	8008a96 <_free_r+0x22>
 8008ae8:	6820      	ldr	r0, [r4, #0]
 8008aea:	1821      	adds	r1, r4, r0
 8008aec:	428b      	cmp	r3, r1
 8008aee:	bf04      	itt	eq
 8008af0:	6819      	ldreq	r1, [r3, #0]
 8008af2:	685b      	ldreq	r3, [r3, #4]
 8008af4:	6063      	str	r3, [r4, #4]
 8008af6:	bf04      	itt	eq
 8008af8:	1809      	addeq	r1, r1, r0
 8008afa:	6021      	streq	r1, [r4, #0]
 8008afc:	6054      	str	r4, [r2, #4]
 8008afe:	e7ca      	b.n	8008a96 <_free_r+0x22>
 8008b00:	bd38      	pop	{r3, r4, r5, pc}
 8008b02:	bf00      	nop
 8008b04:	20000954 	.word	0x20000954

08008b08 <_init>:
 8008b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0a:	bf00      	nop
 8008b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0e:	bc08      	pop	{r3}
 8008b10:	469e      	mov	lr, r3
 8008b12:	4770      	bx	lr

08008b14 <_fini>:
 8008b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b16:	bf00      	nop
 8008b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b1a:	bc08      	pop	{r3}
 8008b1c:	469e      	mov	lr, r3
 8008b1e:	4770      	bx	lr
